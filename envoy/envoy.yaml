admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  #
  #  gRPC Web
  #
  - name: listener_grpc_web
    address:
      socket_address: { address: 0.0.0.0, port_value: 8080 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          access_log: 
            - name: envoy.access_loggers.file
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                path: /dev/stdout

          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match: { prefix: "/auth" }
                route: 
                  cluster: auth_service
                  timeout: 0s
                  max_stream_duration:
                    grpc_timeout_header_max: 0s
                typed_per_filter_config:
                  envoy.filters.http.ext_authz:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                    disabled: true
              - match: { prefix: "/" }
                route:
                  cluster: todo_service
                  timeout: 0s
                  max_stream_duration:
                    grpc_timeout_header_max: 0s
              cors:
                allow_origin_string_match:
                - prefix: "*"
                allow_methods: GET, PUT, DELETE, POST, OPTIONS
                allow_headers: authorization,keep-alive,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                max_age: "86400"
                allow_credentials: true
                expose_headers: grpc-status,grpc-message

          http_filters:
          - name: envoy.filters.http.cors
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              transport_api_version: V3
              grpc_service:
                envoy_grpc:
                  cluster_name: ext-authz
                timeout: 0.5s
              with_request_body:
                max_request_bytes: 1024
                allow_partial_message: true
                pack_as_bytes: true
          - name: envoy.filters.http.grpc_json_transcoder
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
              proto_descriptor: "./todo.pb"
              services: ["todo.todoService", "auth.AuthenticationService"]
              print_options:
                add_whitespace: true
                always_print_primitive_fields: true
                always_print_enums_as_ints: false
                preserve_proto_field_names: false
          - name: envoy.filters.http.grpc_web
          - name: envoy.filters.http.router



  clusters:
  - name: todo_service
    connect_timeout: 0.25s
    type: strict_dns
    http2_protocol_options: {}
    lb_policy: round_robin
    # Heath checks are needed, since we're two endpoints -- one of which isn't live
    health_checks:
      timeout: 1s
      interval: 10s
      unhealthy_threshold: 2
      healthy_threshold: 2
      grpc_health_check: {}
    load_assignment:
      cluster_name: todo_cluster
      endpoints:
        - lb_endpoints:
          # Configuration for running localhost
          - endpoint:
              address:
                socket_address:
                  address: 0.0.0.0
                  port_value: 14001
          # Configuration for when running in docker
          - endpoint:
              address:
                socket_address:
                  address: todo
                  port_value: 14586
  - name: auth_service
    connect_timeout: 0.25s
    type: strict_dns
    http2_protocol_options: {}
    lb_policy: round_robin
    health_checks:
      timeout: 1s
      interval: 10s
      unhealthy_threshold: 2
      healthy_threshold: 2
      grpc_health_check: {}
    load_assignment:
      cluster_name: auth_cluster
      endpoints:
        - lb_endpoints:
          # Configuration for running localhost
          - endpoint:
              address:
                socket_address:
                  address: 0.0.0.0
                  port_value: 14002
          # Configuration for when running in docker
          - endpoint:
              address:
                socket_address:
                  address: auth
                  port_value: 14586

  - name: ext-authz
    type: static
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}
    load_assignment:
      cluster_name: ext-authz
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 0.0.0.0
                port_value: 14010

    # This timeout controls the initial TCP handshake timeout - not the timeout for the
    # entire request.
    connect_timeout: 0.25s
