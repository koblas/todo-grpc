// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/file/v1/file.proto

package filev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/koblas/grpc-todo/gen/core/file/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "core.file.v1.FileService"
)

// FileServiceClient is a client for the core.file.v1.FileService service.
type FileServiceClient interface {
	UploadUrl(context.Context, *connect_go.Request[v1.FileServiceUploadUrlRequest]) (*connect_go.Response[v1.FileServiceUploadUrlResponse], error)
	VerifyUrl(context.Context, *connect_go.Request[v1.FileServiceVerifyUrlRequest]) (*connect_go.Response[v1.FileServiceVerifyUrlResponse], error)
	Upload(context.Context, *connect_go.Request[v1.FileServiceUploadRequest]) (*connect_go.Response[v1.FileServiceUploadResponse], error)
	Put(context.Context, *connect_go.Request[v1.FileServicePutRequest]) (*connect_go.Response[v1.FileServicePutResponse], error)
	Get(context.Context, *connect_go.Request[v1.FileServiceGetRequest]) (*connect_go.Response[v1.FileServiceGetResponse], error)
}

// NewFileServiceClient constructs a client for the core.file.v1.FileService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileServiceClient{
		uploadUrl: connect_go.NewClient[v1.FileServiceUploadUrlRequest, v1.FileServiceUploadUrlResponse](
			httpClient,
			baseURL+"/core.file.v1.FileService/UploadUrl",
			opts...,
		),
		verifyUrl: connect_go.NewClient[v1.FileServiceVerifyUrlRequest, v1.FileServiceVerifyUrlResponse](
			httpClient,
			baseURL+"/core.file.v1.FileService/VerifyUrl",
			opts...,
		),
		upload: connect_go.NewClient[v1.FileServiceUploadRequest, v1.FileServiceUploadResponse](
			httpClient,
			baseURL+"/core.file.v1.FileService/Upload",
			opts...,
		),
		put: connect_go.NewClient[v1.FileServicePutRequest, v1.FileServicePutResponse](
			httpClient,
			baseURL+"/core.file.v1.FileService/Put",
			opts...,
		),
		get: connect_go.NewClient[v1.FileServiceGetRequest, v1.FileServiceGetResponse](
			httpClient,
			baseURL+"/core.file.v1.FileService/Get",
			opts...,
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	uploadUrl *connect_go.Client[v1.FileServiceUploadUrlRequest, v1.FileServiceUploadUrlResponse]
	verifyUrl *connect_go.Client[v1.FileServiceVerifyUrlRequest, v1.FileServiceVerifyUrlResponse]
	upload    *connect_go.Client[v1.FileServiceUploadRequest, v1.FileServiceUploadResponse]
	put       *connect_go.Client[v1.FileServicePutRequest, v1.FileServicePutResponse]
	get       *connect_go.Client[v1.FileServiceGetRequest, v1.FileServiceGetResponse]
}

// UploadUrl calls core.file.v1.FileService.UploadUrl.
func (c *fileServiceClient) UploadUrl(ctx context.Context, req *connect_go.Request[v1.FileServiceUploadUrlRequest]) (*connect_go.Response[v1.FileServiceUploadUrlResponse], error) {
	return c.uploadUrl.CallUnary(ctx, req)
}

// VerifyUrl calls core.file.v1.FileService.VerifyUrl.
func (c *fileServiceClient) VerifyUrl(ctx context.Context, req *connect_go.Request[v1.FileServiceVerifyUrlRequest]) (*connect_go.Response[v1.FileServiceVerifyUrlResponse], error) {
	return c.verifyUrl.CallUnary(ctx, req)
}

// Upload calls core.file.v1.FileService.Upload.
func (c *fileServiceClient) Upload(ctx context.Context, req *connect_go.Request[v1.FileServiceUploadRequest]) (*connect_go.Response[v1.FileServiceUploadResponse], error) {
	return c.upload.CallUnary(ctx, req)
}

// Put calls core.file.v1.FileService.Put.
func (c *fileServiceClient) Put(ctx context.Context, req *connect_go.Request[v1.FileServicePutRequest]) (*connect_go.Response[v1.FileServicePutResponse], error) {
	return c.put.CallUnary(ctx, req)
}

// Get calls core.file.v1.FileService.Get.
func (c *fileServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.FileServiceGetRequest]) (*connect_go.Response[v1.FileServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the core.file.v1.FileService service.
type FileServiceHandler interface {
	UploadUrl(context.Context, *connect_go.Request[v1.FileServiceUploadUrlRequest]) (*connect_go.Response[v1.FileServiceUploadUrlResponse], error)
	VerifyUrl(context.Context, *connect_go.Request[v1.FileServiceVerifyUrlRequest]) (*connect_go.Response[v1.FileServiceVerifyUrlResponse], error)
	Upload(context.Context, *connect_go.Request[v1.FileServiceUploadRequest]) (*connect_go.Response[v1.FileServiceUploadResponse], error)
	Put(context.Context, *connect_go.Request[v1.FileServicePutRequest]) (*connect_go.Response[v1.FileServicePutResponse], error)
	Get(context.Context, *connect_go.Request[v1.FileServiceGetRequest]) (*connect_go.Response[v1.FileServiceGetResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.file.v1.FileService/UploadUrl", connect_go.NewUnaryHandler(
		"/core.file.v1.FileService/UploadUrl",
		svc.UploadUrl,
		opts...,
	))
	mux.Handle("/core.file.v1.FileService/VerifyUrl", connect_go.NewUnaryHandler(
		"/core.file.v1.FileService/VerifyUrl",
		svc.VerifyUrl,
		opts...,
	))
	mux.Handle("/core.file.v1.FileService/Upload", connect_go.NewUnaryHandler(
		"/core.file.v1.FileService/Upload",
		svc.Upload,
		opts...,
	))
	mux.Handle("/core.file.v1.FileService/Put", connect_go.NewUnaryHandler(
		"/core.file.v1.FileService/Put",
		svc.Put,
		opts...,
	))
	mux.Handle("/core.file.v1.FileService/Get", connect_go.NewUnaryHandler(
		"/core.file.v1.FileService/Get",
		svc.Get,
		opts...,
	))
	return "/core.file.v1.FileService/", mux
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) UploadUrl(context.Context, *connect_go.Request[v1.FileServiceUploadUrlRequest]) (*connect_go.Response[v1.FileServiceUploadUrlResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.file.v1.FileService.UploadUrl is not implemented"))
}

func (UnimplementedFileServiceHandler) VerifyUrl(context.Context, *connect_go.Request[v1.FileServiceVerifyUrlRequest]) (*connect_go.Response[v1.FileServiceVerifyUrlResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.file.v1.FileService.VerifyUrl is not implemented"))
}

func (UnimplementedFileServiceHandler) Upload(context.Context, *connect_go.Request[v1.FileServiceUploadRequest]) (*connect_go.Response[v1.FileServiceUploadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.file.v1.FileService.Upload is not implemented"))
}

func (UnimplementedFileServiceHandler) Put(context.Context, *connect_go.Request[v1.FileServicePutRequest]) (*connect_go.Response[v1.FileServicePutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.file.v1.FileService.Put is not implemented"))
}

func (UnimplementedFileServiceHandler) Get(context.Context, *connect_go.Request[v1.FileServiceGetRequest]) (*connect_go.Response[v1.FileServiceGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.file.v1.FileService.Get is not implemented"))
}
