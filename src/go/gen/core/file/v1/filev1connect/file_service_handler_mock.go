package filev1connect

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/koblas/grpc-todo/gen/core/file/v1/filev1connect.FileServiceHandler -o ./file_service_handler_mock.go -n FileServiceHandlerMock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	connect_go "github.com/bufbuild/connect-go"
	"github.com/gojuno/minimock/v3"
	v1 "github.com/koblas/grpc-todo/gen/core/file/v1"
)

// FileServiceHandlerMock implements FileServiceHandler
type FileServiceHandlerMock struct {
	t minimock.Tester

	funcGet          func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest]) (pp2 *connect_go.Response[v1.FileServiceGetResponse], err error)
	inspectFuncGet   func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest])
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mFileServiceHandlerMockGet

	funcPut          func(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest]) (pp2 *connect_go.Response[v1.FileServicePutResponse], err error)
	inspectFuncPut   func(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest])
	afterPutCounter  uint64
	beforePutCounter uint64
	PutMock          mFileServiceHandlerMockPut

	funcUpload          func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadResponse], err error)
	inspectFuncUpload   func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest])
	afterUploadCounter  uint64
	beforeUploadCounter uint64
	UploadMock          mFileServiceHandlerMockUpload

	funcUploadUrl          func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse], err error)
	inspectFuncUploadUrl   func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest])
	afterUploadUrlCounter  uint64
	beforeUploadUrlCounter uint64
	UploadUrlMock          mFileServiceHandlerMockUploadUrl

	funcVerifyUrl          func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse], err error)
	inspectFuncVerifyUrl   func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest])
	afterVerifyUrlCounter  uint64
	beforeVerifyUrlCounter uint64
	VerifyUrlMock          mFileServiceHandlerMockVerifyUrl
}

// NewFileServiceHandlerMock returns a mock for FileServiceHandler
func NewFileServiceHandlerMock(t minimock.Tester) *FileServiceHandlerMock {
	m := &FileServiceHandlerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mFileServiceHandlerMockGet{mock: m}
	m.GetMock.callArgs = []*FileServiceHandlerMockGetParams{}

	m.PutMock = mFileServiceHandlerMockPut{mock: m}
	m.PutMock.callArgs = []*FileServiceHandlerMockPutParams{}

	m.UploadMock = mFileServiceHandlerMockUpload{mock: m}
	m.UploadMock.callArgs = []*FileServiceHandlerMockUploadParams{}

	m.UploadUrlMock = mFileServiceHandlerMockUploadUrl{mock: m}
	m.UploadUrlMock.callArgs = []*FileServiceHandlerMockUploadUrlParams{}

	m.VerifyUrlMock = mFileServiceHandlerMockVerifyUrl{mock: m}
	m.VerifyUrlMock.callArgs = []*FileServiceHandlerMockVerifyUrlParams{}

	return m
}

type mFileServiceHandlerMockGet struct {
	mock               *FileServiceHandlerMock
	defaultExpectation *FileServiceHandlerMockGetExpectation
	expectations       []*FileServiceHandlerMockGetExpectation

	callArgs []*FileServiceHandlerMockGetParams
	mutex    sync.RWMutex
}

// FileServiceHandlerMockGetExpectation specifies expectation struct of the FileServiceHandler.Get
type FileServiceHandlerMockGetExpectation struct {
	mock    *FileServiceHandlerMock
	params  *FileServiceHandlerMockGetParams
	results *FileServiceHandlerMockGetResults
	Counter uint64
}

// FileServiceHandlerMockGetParams contains parameters of the FileServiceHandler.Get
type FileServiceHandlerMockGetParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FileServiceGetRequest]
}

// FileServiceHandlerMockGetResults contains results of the FileServiceHandler.Get
type FileServiceHandlerMockGetResults struct {
	pp2 *connect_go.Response[v1.FileServiceGetResponse]
	err error
}

// Expect sets up expected params for FileServiceHandler.Get
func (mmGet *mFileServiceHandlerMockGet) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest]) *mFileServiceHandlerMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileServiceHandlerMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &FileServiceHandlerMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &FileServiceHandlerMockGetParams{ctx, pp1}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the FileServiceHandler.Get
func (mmGet *mFileServiceHandlerMockGet) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest])) *mFileServiceHandlerMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for FileServiceHandlerMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by FileServiceHandler.Get
func (mmGet *mFileServiceHandlerMockGet) Return(pp2 *connect_go.Response[v1.FileServiceGetResponse], err error) *FileServiceHandlerMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileServiceHandlerMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &FileServiceHandlerMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &FileServiceHandlerMockGetResults{pp2, err}
	return mmGet.mock
}

// Set uses given function f to mock the FileServiceHandler.Get method
func (mmGet *mFileServiceHandlerMockGet) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest]) (pp2 *connect_go.Response[v1.FileServiceGetResponse], err error)) *FileServiceHandlerMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the FileServiceHandler.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the FileServiceHandler.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the FileServiceHandler.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mFileServiceHandlerMockGet) When(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest]) *FileServiceHandlerMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileServiceHandlerMock.Get mock is already set by Set")
	}

	expectation := &FileServiceHandlerMockGetExpectation{
		mock:   mmGet.mock,
		params: &FileServiceHandlerMockGetParams{ctx, pp1},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up FileServiceHandler.Get return parameters for the expectation previously defined by the When method
func (e *FileServiceHandlerMockGetExpectation) Then(pp2 *connect_go.Response[v1.FileServiceGetResponse], err error) *FileServiceHandlerMock {
	e.results = &FileServiceHandlerMockGetResults{pp2, err}
	return e.mock
}

// Get implements FileServiceHandler
func (mmGet *FileServiceHandlerMock) Get(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest]) (pp2 *connect_go.Response[v1.FileServiceGetResponse], err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, pp1)
	}

	mm_params := &FileServiceHandlerMockGetParams{ctx, pp1}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := FileServiceHandlerMockGetParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("FileServiceHandlerMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the FileServiceHandlerMock.Get")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, pp1)
	}
	mmGet.t.Fatalf("Unexpected call to FileServiceHandlerMock.Get. %v %v", ctx, pp1)
	return
}

// GetAfterCounter returns a count of finished FileServiceHandlerMock.Get invocations
func (mmGet *FileServiceHandlerMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of FileServiceHandlerMock.Get invocations
func (mmGet *FileServiceHandlerMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to FileServiceHandlerMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mFileServiceHandlerMockGet) Calls() []*FileServiceHandlerMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*FileServiceHandlerMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *FileServiceHandlerMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *FileServiceHandlerMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileServiceHandlerMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileServiceHandlerMock.Get")
		} else {
			m.t.Errorf("Expected call to FileServiceHandlerMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to FileServiceHandlerMock.Get")
	}
}

type mFileServiceHandlerMockPut struct {
	mock               *FileServiceHandlerMock
	defaultExpectation *FileServiceHandlerMockPutExpectation
	expectations       []*FileServiceHandlerMockPutExpectation

	callArgs []*FileServiceHandlerMockPutParams
	mutex    sync.RWMutex
}

// FileServiceHandlerMockPutExpectation specifies expectation struct of the FileServiceHandler.Put
type FileServiceHandlerMockPutExpectation struct {
	mock    *FileServiceHandlerMock
	params  *FileServiceHandlerMockPutParams
	results *FileServiceHandlerMockPutResults
	Counter uint64
}

// FileServiceHandlerMockPutParams contains parameters of the FileServiceHandler.Put
type FileServiceHandlerMockPutParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FileServicePutRequest]
}

// FileServiceHandlerMockPutResults contains results of the FileServiceHandler.Put
type FileServiceHandlerMockPutResults struct {
	pp2 *connect_go.Response[v1.FileServicePutResponse]
	err error
}

// Expect sets up expected params for FileServiceHandler.Put
func (mmPut *mFileServiceHandlerMockPut) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest]) *mFileServiceHandlerMockPut {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("FileServiceHandlerMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &FileServiceHandlerMockPutExpectation{}
	}

	mmPut.defaultExpectation.params = &FileServiceHandlerMockPutParams{ctx, pp1}
	for _, e := range mmPut.expectations {
		if minimock.Equal(e.params, mmPut.defaultExpectation.params) {
			mmPut.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPut.defaultExpectation.params)
		}
	}

	return mmPut
}

// Inspect accepts an inspector function that has same arguments as the FileServiceHandler.Put
func (mmPut *mFileServiceHandlerMockPut) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest])) *mFileServiceHandlerMockPut {
	if mmPut.mock.inspectFuncPut != nil {
		mmPut.mock.t.Fatalf("Inspect function is already set for FileServiceHandlerMock.Put")
	}

	mmPut.mock.inspectFuncPut = f

	return mmPut
}

// Return sets up results that will be returned by FileServiceHandler.Put
func (mmPut *mFileServiceHandlerMockPut) Return(pp2 *connect_go.Response[v1.FileServicePutResponse], err error) *FileServiceHandlerMock {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("FileServiceHandlerMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &FileServiceHandlerMockPutExpectation{mock: mmPut.mock}
	}
	mmPut.defaultExpectation.results = &FileServiceHandlerMockPutResults{pp2, err}
	return mmPut.mock
}

// Set uses given function f to mock the FileServiceHandler.Put method
func (mmPut *mFileServiceHandlerMockPut) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest]) (pp2 *connect_go.Response[v1.FileServicePutResponse], err error)) *FileServiceHandlerMock {
	if mmPut.defaultExpectation != nil {
		mmPut.mock.t.Fatalf("Default expectation is already set for the FileServiceHandler.Put method")
	}

	if len(mmPut.expectations) > 0 {
		mmPut.mock.t.Fatalf("Some expectations are already set for the FileServiceHandler.Put method")
	}

	mmPut.mock.funcPut = f
	return mmPut.mock
}

// When sets expectation for the FileServiceHandler.Put which will trigger the result defined by the following
// Then helper
func (mmPut *mFileServiceHandlerMockPut) When(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest]) *FileServiceHandlerMockPutExpectation {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("FileServiceHandlerMock.Put mock is already set by Set")
	}

	expectation := &FileServiceHandlerMockPutExpectation{
		mock:   mmPut.mock,
		params: &FileServiceHandlerMockPutParams{ctx, pp1},
	}
	mmPut.expectations = append(mmPut.expectations, expectation)
	return expectation
}

// Then sets up FileServiceHandler.Put return parameters for the expectation previously defined by the When method
func (e *FileServiceHandlerMockPutExpectation) Then(pp2 *connect_go.Response[v1.FileServicePutResponse], err error) *FileServiceHandlerMock {
	e.results = &FileServiceHandlerMockPutResults{pp2, err}
	return e.mock
}

// Put implements FileServiceHandler
func (mmPut *FileServiceHandlerMock) Put(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest]) (pp2 *connect_go.Response[v1.FileServicePutResponse], err error) {
	mm_atomic.AddUint64(&mmPut.beforePutCounter, 1)
	defer mm_atomic.AddUint64(&mmPut.afterPutCounter, 1)

	if mmPut.inspectFuncPut != nil {
		mmPut.inspectFuncPut(ctx, pp1)
	}

	mm_params := &FileServiceHandlerMockPutParams{ctx, pp1}

	// Record call args
	mmPut.PutMock.mutex.Lock()
	mmPut.PutMock.callArgs = append(mmPut.PutMock.callArgs, mm_params)
	mmPut.PutMock.mutex.Unlock()

	for _, e := range mmPut.PutMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmPut.PutMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPut.PutMock.defaultExpectation.Counter, 1)
		mm_want := mmPut.PutMock.defaultExpectation.params
		mm_got := FileServiceHandlerMockPutParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPut.t.Errorf("FileServiceHandlerMock.Put got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPut.PutMock.defaultExpectation.results
		if mm_results == nil {
			mmPut.t.Fatal("No results are set for the FileServiceHandlerMock.Put")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmPut.funcPut != nil {
		return mmPut.funcPut(ctx, pp1)
	}
	mmPut.t.Fatalf("Unexpected call to FileServiceHandlerMock.Put. %v %v", ctx, pp1)
	return
}

// PutAfterCounter returns a count of finished FileServiceHandlerMock.Put invocations
func (mmPut *FileServiceHandlerMock) PutAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPut.afterPutCounter)
}

// PutBeforeCounter returns a count of FileServiceHandlerMock.Put invocations
func (mmPut *FileServiceHandlerMock) PutBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPut.beforePutCounter)
}

// Calls returns a list of arguments used in each call to FileServiceHandlerMock.Put.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPut *mFileServiceHandlerMockPut) Calls() []*FileServiceHandlerMockPutParams {
	mmPut.mutex.RLock()

	argCopy := make([]*FileServiceHandlerMockPutParams, len(mmPut.callArgs))
	copy(argCopy, mmPut.callArgs)

	mmPut.mutex.RUnlock()

	return argCopy
}

// MinimockPutDone returns true if the count of the Put invocations corresponds
// the number of defined expectations
func (m *FileServiceHandlerMock) MinimockPutDone() bool {
	for _, e := range m.PutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPut != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		return false
	}
	return true
}

// MinimockPutInspect logs each unmet expectation
func (m *FileServiceHandlerMock) MinimockPutInspect() {
	for _, e := range m.PutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileServiceHandlerMock.Put with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		if m.PutMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileServiceHandlerMock.Put")
		} else {
			m.t.Errorf("Expected call to FileServiceHandlerMock.Put with params: %#v", *m.PutMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPut != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		m.t.Error("Expected call to FileServiceHandlerMock.Put")
	}
}

type mFileServiceHandlerMockUpload struct {
	mock               *FileServiceHandlerMock
	defaultExpectation *FileServiceHandlerMockUploadExpectation
	expectations       []*FileServiceHandlerMockUploadExpectation

	callArgs []*FileServiceHandlerMockUploadParams
	mutex    sync.RWMutex
}

// FileServiceHandlerMockUploadExpectation specifies expectation struct of the FileServiceHandler.Upload
type FileServiceHandlerMockUploadExpectation struct {
	mock    *FileServiceHandlerMock
	params  *FileServiceHandlerMockUploadParams
	results *FileServiceHandlerMockUploadResults
	Counter uint64
}

// FileServiceHandlerMockUploadParams contains parameters of the FileServiceHandler.Upload
type FileServiceHandlerMockUploadParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FileServiceUploadRequest]
}

// FileServiceHandlerMockUploadResults contains results of the FileServiceHandler.Upload
type FileServiceHandlerMockUploadResults struct {
	pp2 *connect_go.Response[v1.FileServiceUploadResponse]
	err error
}

// Expect sets up expected params for FileServiceHandler.Upload
func (mmUpload *mFileServiceHandlerMockUpload) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest]) *mFileServiceHandlerMockUpload {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("FileServiceHandlerMock.Upload mock is already set by Set")
	}

	if mmUpload.defaultExpectation == nil {
		mmUpload.defaultExpectation = &FileServiceHandlerMockUploadExpectation{}
	}

	mmUpload.defaultExpectation.params = &FileServiceHandlerMockUploadParams{ctx, pp1}
	for _, e := range mmUpload.expectations {
		if minimock.Equal(e.params, mmUpload.defaultExpectation.params) {
			mmUpload.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpload.defaultExpectation.params)
		}
	}

	return mmUpload
}

// Inspect accepts an inspector function that has same arguments as the FileServiceHandler.Upload
func (mmUpload *mFileServiceHandlerMockUpload) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest])) *mFileServiceHandlerMockUpload {
	if mmUpload.mock.inspectFuncUpload != nil {
		mmUpload.mock.t.Fatalf("Inspect function is already set for FileServiceHandlerMock.Upload")
	}

	mmUpload.mock.inspectFuncUpload = f

	return mmUpload
}

// Return sets up results that will be returned by FileServiceHandler.Upload
func (mmUpload *mFileServiceHandlerMockUpload) Return(pp2 *connect_go.Response[v1.FileServiceUploadResponse], err error) *FileServiceHandlerMock {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("FileServiceHandlerMock.Upload mock is already set by Set")
	}

	if mmUpload.defaultExpectation == nil {
		mmUpload.defaultExpectation = &FileServiceHandlerMockUploadExpectation{mock: mmUpload.mock}
	}
	mmUpload.defaultExpectation.results = &FileServiceHandlerMockUploadResults{pp2, err}
	return mmUpload.mock
}

// Set uses given function f to mock the FileServiceHandler.Upload method
func (mmUpload *mFileServiceHandlerMockUpload) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadResponse], err error)) *FileServiceHandlerMock {
	if mmUpload.defaultExpectation != nil {
		mmUpload.mock.t.Fatalf("Default expectation is already set for the FileServiceHandler.Upload method")
	}

	if len(mmUpload.expectations) > 0 {
		mmUpload.mock.t.Fatalf("Some expectations are already set for the FileServiceHandler.Upload method")
	}

	mmUpload.mock.funcUpload = f
	return mmUpload.mock
}

// When sets expectation for the FileServiceHandler.Upload which will trigger the result defined by the following
// Then helper
func (mmUpload *mFileServiceHandlerMockUpload) When(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest]) *FileServiceHandlerMockUploadExpectation {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("FileServiceHandlerMock.Upload mock is already set by Set")
	}

	expectation := &FileServiceHandlerMockUploadExpectation{
		mock:   mmUpload.mock,
		params: &FileServiceHandlerMockUploadParams{ctx, pp1},
	}
	mmUpload.expectations = append(mmUpload.expectations, expectation)
	return expectation
}

// Then sets up FileServiceHandler.Upload return parameters for the expectation previously defined by the When method
func (e *FileServiceHandlerMockUploadExpectation) Then(pp2 *connect_go.Response[v1.FileServiceUploadResponse], err error) *FileServiceHandlerMock {
	e.results = &FileServiceHandlerMockUploadResults{pp2, err}
	return e.mock
}

// Upload implements FileServiceHandler
func (mmUpload *FileServiceHandlerMock) Upload(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadResponse], err error) {
	mm_atomic.AddUint64(&mmUpload.beforeUploadCounter, 1)
	defer mm_atomic.AddUint64(&mmUpload.afterUploadCounter, 1)

	if mmUpload.inspectFuncUpload != nil {
		mmUpload.inspectFuncUpload(ctx, pp1)
	}

	mm_params := &FileServiceHandlerMockUploadParams{ctx, pp1}

	// Record call args
	mmUpload.UploadMock.mutex.Lock()
	mmUpload.UploadMock.callArgs = append(mmUpload.UploadMock.callArgs, mm_params)
	mmUpload.UploadMock.mutex.Unlock()

	for _, e := range mmUpload.UploadMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmUpload.UploadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpload.UploadMock.defaultExpectation.Counter, 1)
		mm_want := mmUpload.UploadMock.defaultExpectation.params
		mm_got := FileServiceHandlerMockUploadParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpload.t.Errorf("FileServiceHandlerMock.Upload got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpload.UploadMock.defaultExpectation.results
		if mm_results == nil {
			mmUpload.t.Fatal("No results are set for the FileServiceHandlerMock.Upload")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmUpload.funcUpload != nil {
		return mmUpload.funcUpload(ctx, pp1)
	}
	mmUpload.t.Fatalf("Unexpected call to FileServiceHandlerMock.Upload. %v %v", ctx, pp1)
	return
}

// UploadAfterCounter returns a count of finished FileServiceHandlerMock.Upload invocations
func (mmUpload *FileServiceHandlerMock) UploadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpload.afterUploadCounter)
}

// UploadBeforeCounter returns a count of FileServiceHandlerMock.Upload invocations
func (mmUpload *FileServiceHandlerMock) UploadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpload.beforeUploadCounter)
}

// Calls returns a list of arguments used in each call to FileServiceHandlerMock.Upload.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpload *mFileServiceHandlerMockUpload) Calls() []*FileServiceHandlerMockUploadParams {
	mmUpload.mutex.RLock()

	argCopy := make([]*FileServiceHandlerMockUploadParams, len(mmUpload.callArgs))
	copy(argCopy, mmUpload.callArgs)

	mmUpload.mutex.RUnlock()

	return argCopy
}

// MinimockUploadDone returns true if the count of the Upload invocations corresponds
// the number of defined expectations
func (m *FileServiceHandlerMock) MinimockUploadDone() bool {
	for _, e := range m.UploadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UploadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUploadCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpload != nil && mm_atomic.LoadUint64(&m.afterUploadCounter) < 1 {
		return false
	}
	return true
}

// MinimockUploadInspect logs each unmet expectation
func (m *FileServiceHandlerMock) MinimockUploadInspect() {
	for _, e := range m.UploadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileServiceHandlerMock.Upload with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UploadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUploadCounter) < 1 {
		if m.UploadMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileServiceHandlerMock.Upload")
		} else {
			m.t.Errorf("Expected call to FileServiceHandlerMock.Upload with params: %#v", *m.UploadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpload != nil && mm_atomic.LoadUint64(&m.afterUploadCounter) < 1 {
		m.t.Error("Expected call to FileServiceHandlerMock.Upload")
	}
}

type mFileServiceHandlerMockUploadUrl struct {
	mock               *FileServiceHandlerMock
	defaultExpectation *FileServiceHandlerMockUploadUrlExpectation
	expectations       []*FileServiceHandlerMockUploadUrlExpectation

	callArgs []*FileServiceHandlerMockUploadUrlParams
	mutex    sync.RWMutex
}

// FileServiceHandlerMockUploadUrlExpectation specifies expectation struct of the FileServiceHandler.UploadUrl
type FileServiceHandlerMockUploadUrlExpectation struct {
	mock    *FileServiceHandlerMock
	params  *FileServiceHandlerMockUploadUrlParams
	results *FileServiceHandlerMockUploadUrlResults
	Counter uint64
}

// FileServiceHandlerMockUploadUrlParams contains parameters of the FileServiceHandler.UploadUrl
type FileServiceHandlerMockUploadUrlParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]
}

// FileServiceHandlerMockUploadUrlResults contains results of the FileServiceHandler.UploadUrl
type FileServiceHandlerMockUploadUrlResults struct {
	pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse]
	err error
}

// Expect sets up expected params for FileServiceHandler.UploadUrl
func (mmUploadUrl *mFileServiceHandlerMockUploadUrl) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]) *mFileServiceHandlerMockUploadUrl {
	if mmUploadUrl.mock.funcUploadUrl != nil {
		mmUploadUrl.mock.t.Fatalf("FileServiceHandlerMock.UploadUrl mock is already set by Set")
	}

	if mmUploadUrl.defaultExpectation == nil {
		mmUploadUrl.defaultExpectation = &FileServiceHandlerMockUploadUrlExpectation{}
	}

	mmUploadUrl.defaultExpectation.params = &FileServiceHandlerMockUploadUrlParams{ctx, pp1}
	for _, e := range mmUploadUrl.expectations {
		if minimock.Equal(e.params, mmUploadUrl.defaultExpectation.params) {
			mmUploadUrl.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUploadUrl.defaultExpectation.params)
		}
	}

	return mmUploadUrl
}

// Inspect accepts an inspector function that has same arguments as the FileServiceHandler.UploadUrl
func (mmUploadUrl *mFileServiceHandlerMockUploadUrl) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest])) *mFileServiceHandlerMockUploadUrl {
	if mmUploadUrl.mock.inspectFuncUploadUrl != nil {
		mmUploadUrl.mock.t.Fatalf("Inspect function is already set for FileServiceHandlerMock.UploadUrl")
	}

	mmUploadUrl.mock.inspectFuncUploadUrl = f

	return mmUploadUrl
}

// Return sets up results that will be returned by FileServiceHandler.UploadUrl
func (mmUploadUrl *mFileServiceHandlerMockUploadUrl) Return(pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse], err error) *FileServiceHandlerMock {
	if mmUploadUrl.mock.funcUploadUrl != nil {
		mmUploadUrl.mock.t.Fatalf("FileServiceHandlerMock.UploadUrl mock is already set by Set")
	}

	if mmUploadUrl.defaultExpectation == nil {
		mmUploadUrl.defaultExpectation = &FileServiceHandlerMockUploadUrlExpectation{mock: mmUploadUrl.mock}
	}
	mmUploadUrl.defaultExpectation.results = &FileServiceHandlerMockUploadUrlResults{pp2, err}
	return mmUploadUrl.mock
}

// Set uses given function f to mock the FileServiceHandler.UploadUrl method
func (mmUploadUrl *mFileServiceHandlerMockUploadUrl) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse], err error)) *FileServiceHandlerMock {
	if mmUploadUrl.defaultExpectation != nil {
		mmUploadUrl.mock.t.Fatalf("Default expectation is already set for the FileServiceHandler.UploadUrl method")
	}

	if len(mmUploadUrl.expectations) > 0 {
		mmUploadUrl.mock.t.Fatalf("Some expectations are already set for the FileServiceHandler.UploadUrl method")
	}

	mmUploadUrl.mock.funcUploadUrl = f
	return mmUploadUrl.mock
}

// When sets expectation for the FileServiceHandler.UploadUrl which will trigger the result defined by the following
// Then helper
func (mmUploadUrl *mFileServiceHandlerMockUploadUrl) When(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]) *FileServiceHandlerMockUploadUrlExpectation {
	if mmUploadUrl.mock.funcUploadUrl != nil {
		mmUploadUrl.mock.t.Fatalf("FileServiceHandlerMock.UploadUrl mock is already set by Set")
	}

	expectation := &FileServiceHandlerMockUploadUrlExpectation{
		mock:   mmUploadUrl.mock,
		params: &FileServiceHandlerMockUploadUrlParams{ctx, pp1},
	}
	mmUploadUrl.expectations = append(mmUploadUrl.expectations, expectation)
	return expectation
}

// Then sets up FileServiceHandler.UploadUrl return parameters for the expectation previously defined by the When method
func (e *FileServiceHandlerMockUploadUrlExpectation) Then(pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse], err error) *FileServiceHandlerMock {
	e.results = &FileServiceHandlerMockUploadUrlResults{pp2, err}
	return e.mock
}

// UploadUrl implements FileServiceHandler
func (mmUploadUrl *FileServiceHandlerMock) UploadUrl(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse], err error) {
	mm_atomic.AddUint64(&mmUploadUrl.beforeUploadUrlCounter, 1)
	defer mm_atomic.AddUint64(&mmUploadUrl.afterUploadUrlCounter, 1)

	if mmUploadUrl.inspectFuncUploadUrl != nil {
		mmUploadUrl.inspectFuncUploadUrl(ctx, pp1)
	}

	mm_params := &FileServiceHandlerMockUploadUrlParams{ctx, pp1}

	// Record call args
	mmUploadUrl.UploadUrlMock.mutex.Lock()
	mmUploadUrl.UploadUrlMock.callArgs = append(mmUploadUrl.UploadUrlMock.callArgs, mm_params)
	mmUploadUrl.UploadUrlMock.mutex.Unlock()

	for _, e := range mmUploadUrl.UploadUrlMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmUploadUrl.UploadUrlMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUploadUrl.UploadUrlMock.defaultExpectation.Counter, 1)
		mm_want := mmUploadUrl.UploadUrlMock.defaultExpectation.params
		mm_got := FileServiceHandlerMockUploadUrlParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUploadUrl.t.Errorf("FileServiceHandlerMock.UploadUrl got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUploadUrl.UploadUrlMock.defaultExpectation.results
		if mm_results == nil {
			mmUploadUrl.t.Fatal("No results are set for the FileServiceHandlerMock.UploadUrl")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmUploadUrl.funcUploadUrl != nil {
		return mmUploadUrl.funcUploadUrl(ctx, pp1)
	}
	mmUploadUrl.t.Fatalf("Unexpected call to FileServiceHandlerMock.UploadUrl. %v %v", ctx, pp1)
	return
}

// UploadUrlAfterCounter returns a count of finished FileServiceHandlerMock.UploadUrl invocations
func (mmUploadUrl *FileServiceHandlerMock) UploadUrlAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUploadUrl.afterUploadUrlCounter)
}

// UploadUrlBeforeCounter returns a count of FileServiceHandlerMock.UploadUrl invocations
func (mmUploadUrl *FileServiceHandlerMock) UploadUrlBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUploadUrl.beforeUploadUrlCounter)
}

// Calls returns a list of arguments used in each call to FileServiceHandlerMock.UploadUrl.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUploadUrl *mFileServiceHandlerMockUploadUrl) Calls() []*FileServiceHandlerMockUploadUrlParams {
	mmUploadUrl.mutex.RLock()

	argCopy := make([]*FileServiceHandlerMockUploadUrlParams, len(mmUploadUrl.callArgs))
	copy(argCopy, mmUploadUrl.callArgs)

	mmUploadUrl.mutex.RUnlock()

	return argCopy
}

// MinimockUploadUrlDone returns true if the count of the UploadUrl invocations corresponds
// the number of defined expectations
func (m *FileServiceHandlerMock) MinimockUploadUrlDone() bool {
	for _, e := range m.UploadUrlMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UploadUrlMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUploadUrlCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUploadUrl != nil && mm_atomic.LoadUint64(&m.afterUploadUrlCounter) < 1 {
		return false
	}
	return true
}

// MinimockUploadUrlInspect logs each unmet expectation
func (m *FileServiceHandlerMock) MinimockUploadUrlInspect() {
	for _, e := range m.UploadUrlMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileServiceHandlerMock.UploadUrl with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UploadUrlMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUploadUrlCounter) < 1 {
		if m.UploadUrlMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileServiceHandlerMock.UploadUrl")
		} else {
			m.t.Errorf("Expected call to FileServiceHandlerMock.UploadUrl with params: %#v", *m.UploadUrlMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUploadUrl != nil && mm_atomic.LoadUint64(&m.afterUploadUrlCounter) < 1 {
		m.t.Error("Expected call to FileServiceHandlerMock.UploadUrl")
	}
}

type mFileServiceHandlerMockVerifyUrl struct {
	mock               *FileServiceHandlerMock
	defaultExpectation *FileServiceHandlerMockVerifyUrlExpectation
	expectations       []*FileServiceHandlerMockVerifyUrlExpectation

	callArgs []*FileServiceHandlerMockVerifyUrlParams
	mutex    sync.RWMutex
}

// FileServiceHandlerMockVerifyUrlExpectation specifies expectation struct of the FileServiceHandler.VerifyUrl
type FileServiceHandlerMockVerifyUrlExpectation struct {
	mock    *FileServiceHandlerMock
	params  *FileServiceHandlerMockVerifyUrlParams
	results *FileServiceHandlerMockVerifyUrlResults
	Counter uint64
}

// FileServiceHandlerMockVerifyUrlParams contains parameters of the FileServiceHandler.VerifyUrl
type FileServiceHandlerMockVerifyUrlParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]
}

// FileServiceHandlerMockVerifyUrlResults contains results of the FileServiceHandler.VerifyUrl
type FileServiceHandlerMockVerifyUrlResults struct {
	pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse]
	err error
}

// Expect sets up expected params for FileServiceHandler.VerifyUrl
func (mmVerifyUrl *mFileServiceHandlerMockVerifyUrl) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]) *mFileServiceHandlerMockVerifyUrl {
	if mmVerifyUrl.mock.funcVerifyUrl != nil {
		mmVerifyUrl.mock.t.Fatalf("FileServiceHandlerMock.VerifyUrl mock is already set by Set")
	}

	if mmVerifyUrl.defaultExpectation == nil {
		mmVerifyUrl.defaultExpectation = &FileServiceHandlerMockVerifyUrlExpectation{}
	}

	mmVerifyUrl.defaultExpectation.params = &FileServiceHandlerMockVerifyUrlParams{ctx, pp1}
	for _, e := range mmVerifyUrl.expectations {
		if minimock.Equal(e.params, mmVerifyUrl.defaultExpectation.params) {
			mmVerifyUrl.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVerifyUrl.defaultExpectation.params)
		}
	}

	return mmVerifyUrl
}

// Inspect accepts an inspector function that has same arguments as the FileServiceHandler.VerifyUrl
func (mmVerifyUrl *mFileServiceHandlerMockVerifyUrl) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest])) *mFileServiceHandlerMockVerifyUrl {
	if mmVerifyUrl.mock.inspectFuncVerifyUrl != nil {
		mmVerifyUrl.mock.t.Fatalf("Inspect function is already set for FileServiceHandlerMock.VerifyUrl")
	}

	mmVerifyUrl.mock.inspectFuncVerifyUrl = f

	return mmVerifyUrl
}

// Return sets up results that will be returned by FileServiceHandler.VerifyUrl
func (mmVerifyUrl *mFileServiceHandlerMockVerifyUrl) Return(pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse], err error) *FileServiceHandlerMock {
	if mmVerifyUrl.mock.funcVerifyUrl != nil {
		mmVerifyUrl.mock.t.Fatalf("FileServiceHandlerMock.VerifyUrl mock is already set by Set")
	}

	if mmVerifyUrl.defaultExpectation == nil {
		mmVerifyUrl.defaultExpectation = &FileServiceHandlerMockVerifyUrlExpectation{mock: mmVerifyUrl.mock}
	}
	mmVerifyUrl.defaultExpectation.results = &FileServiceHandlerMockVerifyUrlResults{pp2, err}
	return mmVerifyUrl.mock
}

// Set uses given function f to mock the FileServiceHandler.VerifyUrl method
func (mmVerifyUrl *mFileServiceHandlerMockVerifyUrl) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse], err error)) *FileServiceHandlerMock {
	if mmVerifyUrl.defaultExpectation != nil {
		mmVerifyUrl.mock.t.Fatalf("Default expectation is already set for the FileServiceHandler.VerifyUrl method")
	}

	if len(mmVerifyUrl.expectations) > 0 {
		mmVerifyUrl.mock.t.Fatalf("Some expectations are already set for the FileServiceHandler.VerifyUrl method")
	}

	mmVerifyUrl.mock.funcVerifyUrl = f
	return mmVerifyUrl.mock
}

// When sets expectation for the FileServiceHandler.VerifyUrl which will trigger the result defined by the following
// Then helper
func (mmVerifyUrl *mFileServiceHandlerMockVerifyUrl) When(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]) *FileServiceHandlerMockVerifyUrlExpectation {
	if mmVerifyUrl.mock.funcVerifyUrl != nil {
		mmVerifyUrl.mock.t.Fatalf("FileServiceHandlerMock.VerifyUrl mock is already set by Set")
	}

	expectation := &FileServiceHandlerMockVerifyUrlExpectation{
		mock:   mmVerifyUrl.mock,
		params: &FileServiceHandlerMockVerifyUrlParams{ctx, pp1},
	}
	mmVerifyUrl.expectations = append(mmVerifyUrl.expectations, expectation)
	return expectation
}

// Then sets up FileServiceHandler.VerifyUrl return parameters for the expectation previously defined by the When method
func (e *FileServiceHandlerMockVerifyUrlExpectation) Then(pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse], err error) *FileServiceHandlerMock {
	e.results = &FileServiceHandlerMockVerifyUrlResults{pp2, err}
	return e.mock
}

// VerifyUrl implements FileServiceHandler
func (mmVerifyUrl *FileServiceHandlerMock) VerifyUrl(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse], err error) {
	mm_atomic.AddUint64(&mmVerifyUrl.beforeVerifyUrlCounter, 1)
	defer mm_atomic.AddUint64(&mmVerifyUrl.afterVerifyUrlCounter, 1)

	if mmVerifyUrl.inspectFuncVerifyUrl != nil {
		mmVerifyUrl.inspectFuncVerifyUrl(ctx, pp1)
	}

	mm_params := &FileServiceHandlerMockVerifyUrlParams{ctx, pp1}

	// Record call args
	mmVerifyUrl.VerifyUrlMock.mutex.Lock()
	mmVerifyUrl.VerifyUrlMock.callArgs = append(mmVerifyUrl.VerifyUrlMock.callArgs, mm_params)
	mmVerifyUrl.VerifyUrlMock.mutex.Unlock()

	for _, e := range mmVerifyUrl.VerifyUrlMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmVerifyUrl.VerifyUrlMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVerifyUrl.VerifyUrlMock.defaultExpectation.Counter, 1)
		mm_want := mmVerifyUrl.VerifyUrlMock.defaultExpectation.params
		mm_got := FileServiceHandlerMockVerifyUrlParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVerifyUrl.t.Errorf("FileServiceHandlerMock.VerifyUrl got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVerifyUrl.VerifyUrlMock.defaultExpectation.results
		if mm_results == nil {
			mmVerifyUrl.t.Fatal("No results are set for the FileServiceHandlerMock.VerifyUrl")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmVerifyUrl.funcVerifyUrl != nil {
		return mmVerifyUrl.funcVerifyUrl(ctx, pp1)
	}
	mmVerifyUrl.t.Fatalf("Unexpected call to FileServiceHandlerMock.VerifyUrl. %v %v", ctx, pp1)
	return
}

// VerifyUrlAfterCounter returns a count of finished FileServiceHandlerMock.VerifyUrl invocations
func (mmVerifyUrl *FileServiceHandlerMock) VerifyUrlAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerifyUrl.afterVerifyUrlCounter)
}

// VerifyUrlBeforeCounter returns a count of FileServiceHandlerMock.VerifyUrl invocations
func (mmVerifyUrl *FileServiceHandlerMock) VerifyUrlBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerifyUrl.beforeVerifyUrlCounter)
}

// Calls returns a list of arguments used in each call to FileServiceHandlerMock.VerifyUrl.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVerifyUrl *mFileServiceHandlerMockVerifyUrl) Calls() []*FileServiceHandlerMockVerifyUrlParams {
	mmVerifyUrl.mutex.RLock()

	argCopy := make([]*FileServiceHandlerMockVerifyUrlParams, len(mmVerifyUrl.callArgs))
	copy(argCopy, mmVerifyUrl.callArgs)

	mmVerifyUrl.mutex.RUnlock()

	return argCopy
}

// MinimockVerifyUrlDone returns true if the count of the VerifyUrl invocations corresponds
// the number of defined expectations
func (m *FileServiceHandlerMock) MinimockVerifyUrlDone() bool {
	for _, e := range m.VerifyUrlMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VerifyUrlMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVerifyUrlCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerifyUrl != nil && mm_atomic.LoadUint64(&m.afterVerifyUrlCounter) < 1 {
		return false
	}
	return true
}

// MinimockVerifyUrlInspect logs each unmet expectation
func (m *FileServiceHandlerMock) MinimockVerifyUrlInspect() {
	for _, e := range m.VerifyUrlMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileServiceHandlerMock.VerifyUrl with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VerifyUrlMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVerifyUrlCounter) < 1 {
		if m.VerifyUrlMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileServiceHandlerMock.VerifyUrl")
		} else {
			m.t.Errorf("Expected call to FileServiceHandlerMock.VerifyUrl with params: %#v", *m.VerifyUrlMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerifyUrl != nil && mm_atomic.LoadUint64(&m.afterVerifyUrlCounter) < 1 {
		m.t.Error("Expected call to FileServiceHandlerMock.VerifyUrl")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FileServiceHandlerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetInspect()

		m.MinimockPutInspect()

		m.MinimockUploadInspect()

		m.MinimockUploadUrlInspect()

		m.MinimockVerifyUrlInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FileServiceHandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FileServiceHandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone() &&
		m.MinimockPutDone() &&
		m.MinimockUploadDone() &&
		m.MinimockUploadUrlDone() &&
		m.MinimockVerifyUrlDone()
}
