package corev1connect

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/koblas/grpc-todo/gen/core/v1/corev1connect.SendEmailEventsServiceClient -o ./send_email_events_service_client_mock_test.go -n SendEmailEventsServiceClientMock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	connect_go "github.com/bufbuild/connect-go"
	"github.com/gojuno/minimock/v3"
	v1 "github.com/koblas/grpc-todo/gen/core/v1"
)

// SendEmailEventsServiceClientMock implements SendEmailEventsServiceClient
type SendEmailEventsServiceClientMock struct {
	t minimock.Tester

	funcNotifyEmailSent          func(ctx context.Context, pp1 *connect_go.Request[v1.NotifyEmailSentRequest]) (pp2 *connect_go.Response[v1.NotifyEmailSentResponse], err error)
	inspectFuncNotifyEmailSent   func(ctx context.Context, pp1 *connect_go.Request[v1.NotifyEmailSentRequest])
	afterNotifyEmailSentCounter  uint64
	beforeNotifyEmailSentCounter uint64
	NotifyEmailSentMock          mSendEmailEventsServiceClientMockNotifyEmailSent
}

// NewSendEmailEventsServiceClientMock returns a mock for SendEmailEventsServiceClient
func NewSendEmailEventsServiceClientMock(t minimock.Tester) *SendEmailEventsServiceClientMock {
	m := &SendEmailEventsServiceClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NotifyEmailSentMock = mSendEmailEventsServiceClientMockNotifyEmailSent{mock: m}
	m.NotifyEmailSentMock.callArgs = []*SendEmailEventsServiceClientMockNotifyEmailSentParams{}

	return m
}

type mSendEmailEventsServiceClientMockNotifyEmailSent struct {
	mock               *SendEmailEventsServiceClientMock
	defaultExpectation *SendEmailEventsServiceClientMockNotifyEmailSentExpectation
	expectations       []*SendEmailEventsServiceClientMockNotifyEmailSentExpectation

	callArgs []*SendEmailEventsServiceClientMockNotifyEmailSentParams
	mutex    sync.RWMutex
}

// SendEmailEventsServiceClientMockNotifyEmailSentExpectation specifies expectation struct of the SendEmailEventsServiceClient.NotifyEmailSent
type SendEmailEventsServiceClientMockNotifyEmailSentExpectation struct {
	mock    *SendEmailEventsServiceClientMock
	params  *SendEmailEventsServiceClientMockNotifyEmailSentParams
	results *SendEmailEventsServiceClientMockNotifyEmailSentResults
	Counter uint64
}

// SendEmailEventsServiceClientMockNotifyEmailSentParams contains parameters of the SendEmailEventsServiceClient.NotifyEmailSent
type SendEmailEventsServiceClientMockNotifyEmailSentParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.NotifyEmailSentRequest]
}

// SendEmailEventsServiceClientMockNotifyEmailSentResults contains results of the SendEmailEventsServiceClient.NotifyEmailSent
type SendEmailEventsServiceClientMockNotifyEmailSentResults struct {
	pp2 *connect_go.Response[v1.NotifyEmailSentResponse]
	err error
}

// Expect sets up expected params for SendEmailEventsServiceClient.NotifyEmailSent
func (mmNotifyEmailSent *mSendEmailEventsServiceClientMockNotifyEmailSent) Expect(ctx context.Context, pp1 *connect_go.Request[v1.NotifyEmailSentRequest]) *mSendEmailEventsServiceClientMockNotifyEmailSent {
	if mmNotifyEmailSent.mock.funcNotifyEmailSent != nil {
		mmNotifyEmailSent.mock.t.Fatalf("SendEmailEventsServiceClientMock.NotifyEmailSent mock is already set by Set")
	}

	if mmNotifyEmailSent.defaultExpectation == nil {
		mmNotifyEmailSent.defaultExpectation = &SendEmailEventsServiceClientMockNotifyEmailSentExpectation{}
	}

	mmNotifyEmailSent.defaultExpectation.params = &SendEmailEventsServiceClientMockNotifyEmailSentParams{ctx, pp1}
	for _, e := range mmNotifyEmailSent.expectations {
		if minimock.Equal(e.params, mmNotifyEmailSent.defaultExpectation.params) {
			mmNotifyEmailSent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNotifyEmailSent.defaultExpectation.params)
		}
	}

	return mmNotifyEmailSent
}

// Inspect accepts an inspector function that has same arguments as the SendEmailEventsServiceClient.NotifyEmailSent
func (mmNotifyEmailSent *mSendEmailEventsServiceClientMockNotifyEmailSent) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.NotifyEmailSentRequest])) *mSendEmailEventsServiceClientMockNotifyEmailSent {
	if mmNotifyEmailSent.mock.inspectFuncNotifyEmailSent != nil {
		mmNotifyEmailSent.mock.t.Fatalf("Inspect function is already set for SendEmailEventsServiceClientMock.NotifyEmailSent")
	}

	mmNotifyEmailSent.mock.inspectFuncNotifyEmailSent = f

	return mmNotifyEmailSent
}

// Return sets up results that will be returned by SendEmailEventsServiceClient.NotifyEmailSent
func (mmNotifyEmailSent *mSendEmailEventsServiceClientMockNotifyEmailSent) Return(pp2 *connect_go.Response[v1.NotifyEmailSentResponse], err error) *SendEmailEventsServiceClientMock {
	if mmNotifyEmailSent.mock.funcNotifyEmailSent != nil {
		mmNotifyEmailSent.mock.t.Fatalf("SendEmailEventsServiceClientMock.NotifyEmailSent mock is already set by Set")
	}

	if mmNotifyEmailSent.defaultExpectation == nil {
		mmNotifyEmailSent.defaultExpectation = &SendEmailEventsServiceClientMockNotifyEmailSentExpectation{mock: mmNotifyEmailSent.mock}
	}
	mmNotifyEmailSent.defaultExpectation.results = &SendEmailEventsServiceClientMockNotifyEmailSentResults{pp2, err}
	return mmNotifyEmailSent.mock
}

// Set uses given function f to mock the SendEmailEventsServiceClient.NotifyEmailSent method
func (mmNotifyEmailSent *mSendEmailEventsServiceClientMockNotifyEmailSent) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.NotifyEmailSentRequest]) (pp2 *connect_go.Response[v1.NotifyEmailSentResponse], err error)) *SendEmailEventsServiceClientMock {
	if mmNotifyEmailSent.defaultExpectation != nil {
		mmNotifyEmailSent.mock.t.Fatalf("Default expectation is already set for the SendEmailEventsServiceClient.NotifyEmailSent method")
	}

	if len(mmNotifyEmailSent.expectations) > 0 {
		mmNotifyEmailSent.mock.t.Fatalf("Some expectations are already set for the SendEmailEventsServiceClient.NotifyEmailSent method")
	}

	mmNotifyEmailSent.mock.funcNotifyEmailSent = f
	return mmNotifyEmailSent.mock
}

// When sets expectation for the SendEmailEventsServiceClient.NotifyEmailSent which will trigger the result defined by the following
// Then helper
func (mmNotifyEmailSent *mSendEmailEventsServiceClientMockNotifyEmailSent) When(ctx context.Context, pp1 *connect_go.Request[v1.NotifyEmailSentRequest]) *SendEmailEventsServiceClientMockNotifyEmailSentExpectation {
	if mmNotifyEmailSent.mock.funcNotifyEmailSent != nil {
		mmNotifyEmailSent.mock.t.Fatalf("SendEmailEventsServiceClientMock.NotifyEmailSent mock is already set by Set")
	}

	expectation := &SendEmailEventsServiceClientMockNotifyEmailSentExpectation{
		mock:   mmNotifyEmailSent.mock,
		params: &SendEmailEventsServiceClientMockNotifyEmailSentParams{ctx, pp1},
	}
	mmNotifyEmailSent.expectations = append(mmNotifyEmailSent.expectations, expectation)
	return expectation
}

// Then sets up SendEmailEventsServiceClient.NotifyEmailSent return parameters for the expectation previously defined by the When method
func (e *SendEmailEventsServiceClientMockNotifyEmailSentExpectation) Then(pp2 *connect_go.Response[v1.NotifyEmailSentResponse], err error) *SendEmailEventsServiceClientMock {
	e.results = &SendEmailEventsServiceClientMockNotifyEmailSentResults{pp2, err}
	return e.mock
}

// NotifyEmailSent implements SendEmailEventsServiceClient
func (mmNotifyEmailSent *SendEmailEventsServiceClientMock) NotifyEmailSent(ctx context.Context, pp1 *connect_go.Request[v1.NotifyEmailSentRequest]) (pp2 *connect_go.Response[v1.NotifyEmailSentResponse], err error) {
	mm_atomic.AddUint64(&mmNotifyEmailSent.beforeNotifyEmailSentCounter, 1)
	defer mm_atomic.AddUint64(&mmNotifyEmailSent.afterNotifyEmailSentCounter, 1)

	if mmNotifyEmailSent.inspectFuncNotifyEmailSent != nil {
		mmNotifyEmailSent.inspectFuncNotifyEmailSent(ctx, pp1)
	}

	mm_params := &SendEmailEventsServiceClientMockNotifyEmailSentParams{ctx, pp1}

	// Record call args
	mmNotifyEmailSent.NotifyEmailSentMock.mutex.Lock()
	mmNotifyEmailSent.NotifyEmailSentMock.callArgs = append(mmNotifyEmailSent.NotifyEmailSentMock.callArgs, mm_params)
	mmNotifyEmailSent.NotifyEmailSentMock.mutex.Unlock()

	for _, e := range mmNotifyEmailSent.NotifyEmailSentMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmNotifyEmailSent.NotifyEmailSentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNotifyEmailSent.NotifyEmailSentMock.defaultExpectation.Counter, 1)
		mm_want := mmNotifyEmailSent.NotifyEmailSentMock.defaultExpectation.params
		mm_got := SendEmailEventsServiceClientMockNotifyEmailSentParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNotifyEmailSent.t.Errorf("SendEmailEventsServiceClientMock.NotifyEmailSent got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNotifyEmailSent.NotifyEmailSentMock.defaultExpectation.results
		if mm_results == nil {
			mmNotifyEmailSent.t.Fatal("No results are set for the SendEmailEventsServiceClientMock.NotifyEmailSent")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmNotifyEmailSent.funcNotifyEmailSent != nil {
		return mmNotifyEmailSent.funcNotifyEmailSent(ctx, pp1)
	}
	mmNotifyEmailSent.t.Fatalf("Unexpected call to SendEmailEventsServiceClientMock.NotifyEmailSent. %v %v", ctx, pp1)
	return
}

// NotifyEmailSentAfterCounter returns a count of finished SendEmailEventsServiceClientMock.NotifyEmailSent invocations
func (mmNotifyEmailSent *SendEmailEventsServiceClientMock) NotifyEmailSentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNotifyEmailSent.afterNotifyEmailSentCounter)
}

// NotifyEmailSentBeforeCounter returns a count of SendEmailEventsServiceClientMock.NotifyEmailSent invocations
func (mmNotifyEmailSent *SendEmailEventsServiceClientMock) NotifyEmailSentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNotifyEmailSent.beforeNotifyEmailSentCounter)
}

// Calls returns a list of arguments used in each call to SendEmailEventsServiceClientMock.NotifyEmailSent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNotifyEmailSent *mSendEmailEventsServiceClientMockNotifyEmailSent) Calls() []*SendEmailEventsServiceClientMockNotifyEmailSentParams {
	mmNotifyEmailSent.mutex.RLock()

	argCopy := make([]*SendEmailEventsServiceClientMockNotifyEmailSentParams, len(mmNotifyEmailSent.callArgs))
	copy(argCopy, mmNotifyEmailSent.callArgs)

	mmNotifyEmailSent.mutex.RUnlock()

	return argCopy
}

// MinimockNotifyEmailSentDone returns true if the count of the NotifyEmailSent invocations corresponds
// the number of defined expectations
func (m *SendEmailEventsServiceClientMock) MinimockNotifyEmailSentDone() bool {
	for _, e := range m.NotifyEmailSentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NotifyEmailSentMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNotifyEmailSentCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNotifyEmailSent != nil && mm_atomic.LoadUint64(&m.afterNotifyEmailSentCounter) < 1 {
		return false
	}
	return true
}

// MinimockNotifyEmailSentInspect logs each unmet expectation
func (m *SendEmailEventsServiceClientMock) MinimockNotifyEmailSentInspect() {
	for _, e := range m.NotifyEmailSentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SendEmailEventsServiceClientMock.NotifyEmailSent with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NotifyEmailSentMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNotifyEmailSentCounter) < 1 {
		if m.NotifyEmailSentMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SendEmailEventsServiceClientMock.NotifyEmailSent")
		} else {
			m.t.Errorf("Expected call to SendEmailEventsServiceClientMock.NotifyEmailSent with params: %#v", *m.NotifyEmailSentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNotifyEmailSent != nil && mm_atomic.LoadUint64(&m.afterNotifyEmailSentCounter) < 1 {
		m.t.Error("Expected call to SendEmailEventsServiceClientMock.NotifyEmailSent")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SendEmailEventsServiceClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockNotifyEmailSentInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SendEmailEventsServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SendEmailEventsServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNotifyEmailSentDone()
}
