package corev1connect

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/koblas/grpc-todo/gen/core/v1/corev1connect.TodoEventbusServiceHandler -o ./todo_eventbus_service_handler_mock_test.go -n TodoEventbusServiceHandlerMock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	connect_go "github.com/bufbuild/connect-go"
	"github.com/gojuno/minimock/v3"
	v1 "github.com/koblas/grpc-todo/gen/core/v1"
)

// TodoEventbusServiceHandlerMock implements TodoEventbusServiceHandler
type TodoEventbusServiceHandlerMock struct {
	t minimock.Tester

	funcTodoChange          func(ctx context.Context, pp1 *connect_go.Request[v1.TodoChangeEvent]) (pp2 *connect_go.Response[v1.TodoEventbusTodoChangeResponse], err error)
	inspectFuncTodoChange   func(ctx context.Context, pp1 *connect_go.Request[v1.TodoChangeEvent])
	afterTodoChangeCounter  uint64
	beforeTodoChangeCounter uint64
	TodoChangeMock          mTodoEventbusServiceHandlerMockTodoChange
}

// NewTodoEventbusServiceHandlerMock returns a mock for TodoEventbusServiceHandler
func NewTodoEventbusServiceHandlerMock(t minimock.Tester) *TodoEventbusServiceHandlerMock {
	m := &TodoEventbusServiceHandlerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.TodoChangeMock = mTodoEventbusServiceHandlerMockTodoChange{mock: m}
	m.TodoChangeMock.callArgs = []*TodoEventbusServiceHandlerMockTodoChangeParams{}

	return m
}

type mTodoEventbusServiceHandlerMockTodoChange struct {
	mock               *TodoEventbusServiceHandlerMock
	defaultExpectation *TodoEventbusServiceHandlerMockTodoChangeExpectation
	expectations       []*TodoEventbusServiceHandlerMockTodoChangeExpectation

	callArgs []*TodoEventbusServiceHandlerMockTodoChangeParams
	mutex    sync.RWMutex
}

// TodoEventbusServiceHandlerMockTodoChangeExpectation specifies expectation struct of the TodoEventbusServiceHandler.TodoChange
type TodoEventbusServiceHandlerMockTodoChangeExpectation struct {
	mock    *TodoEventbusServiceHandlerMock
	params  *TodoEventbusServiceHandlerMockTodoChangeParams
	results *TodoEventbusServiceHandlerMockTodoChangeResults
	Counter uint64
}

// TodoEventbusServiceHandlerMockTodoChangeParams contains parameters of the TodoEventbusServiceHandler.TodoChange
type TodoEventbusServiceHandlerMockTodoChangeParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.TodoChangeEvent]
}

// TodoEventbusServiceHandlerMockTodoChangeResults contains results of the TodoEventbusServiceHandler.TodoChange
type TodoEventbusServiceHandlerMockTodoChangeResults struct {
	pp2 *connect_go.Response[v1.TodoEventbusTodoChangeResponse]
	err error
}

// Expect sets up expected params for TodoEventbusServiceHandler.TodoChange
func (mmTodoChange *mTodoEventbusServiceHandlerMockTodoChange) Expect(ctx context.Context, pp1 *connect_go.Request[v1.TodoChangeEvent]) *mTodoEventbusServiceHandlerMockTodoChange {
	if mmTodoChange.mock.funcTodoChange != nil {
		mmTodoChange.mock.t.Fatalf("TodoEventbusServiceHandlerMock.TodoChange mock is already set by Set")
	}

	if mmTodoChange.defaultExpectation == nil {
		mmTodoChange.defaultExpectation = &TodoEventbusServiceHandlerMockTodoChangeExpectation{}
	}

	mmTodoChange.defaultExpectation.params = &TodoEventbusServiceHandlerMockTodoChangeParams{ctx, pp1}
	for _, e := range mmTodoChange.expectations {
		if minimock.Equal(e.params, mmTodoChange.defaultExpectation.params) {
			mmTodoChange.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTodoChange.defaultExpectation.params)
		}
	}

	return mmTodoChange
}

// Inspect accepts an inspector function that has same arguments as the TodoEventbusServiceHandler.TodoChange
func (mmTodoChange *mTodoEventbusServiceHandlerMockTodoChange) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.TodoChangeEvent])) *mTodoEventbusServiceHandlerMockTodoChange {
	if mmTodoChange.mock.inspectFuncTodoChange != nil {
		mmTodoChange.mock.t.Fatalf("Inspect function is already set for TodoEventbusServiceHandlerMock.TodoChange")
	}

	mmTodoChange.mock.inspectFuncTodoChange = f

	return mmTodoChange
}

// Return sets up results that will be returned by TodoEventbusServiceHandler.TodoChange
func (mmTodoChange *mTodoEventbusServiceHandlerMockTodoChange) Return(pp2 *connect_go.Response[v1.TodoEventbusTodoChangeResponse], err error) *TodoEventbusServiceHandlerMock {
	if mmTodoChange.mock.funcTodoChange != nil {
		mmTodoChange.mock.t.Fatalf("TodoEventbusServiceHandlerMock.TodoChange mock is already set by Set")
	}

	if mmTodoChange.defaultExpectation == nil {
		mmTodoChange.defaultExpectation = &TodoEventbusServiceHandlerMockTodoChangeExpectation{mock: mmTodoChange.mock}
	}
	mmTodoChange.defaultExpectation.results = &TodoEventbusServiceHandlerMockTodoChangeResults{pp2, err}
	return mmTodoChange.mock
}

// Set uses given function f to mock the TodoEventbusServiceHandler.TodoChange method
func (mmTodoChange *mTodoEventbusServiceHandlerMockTodoChange) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.TodoChangeEvent]) (pp2 *connect_go.Response[v1.TodoEventbusTodoChangeResponse], err error)) *TodoEventbusServiceHandlerMock {
	if mmTodoChange.defaultExpectation != nil {
		mmTodoChange.mock.t.Fatalf("Default expectation is already set for the TodoEventbusServiceHandler.TodoChange method")
	}

	if len(mmTodoChange.expectations) > 0 {
		mmTodoChange.mock.t.Fatalf("Some expectations are already set for the TodoEventbusServiceHandler.TodoChange method")
	}

	mmTodoChange.mock.funcTodoChange = f
	return mmTodoChange.mock
}

// When sets expectation for the TodoEventbusServiceHandler.TodoChange which will trigger the result defined by the following
// Then helper
func (mmTodoChange *mTodoEventbusServiceHandlerMockTodoChange) When(ctx context.Context, pp1 *connect_go.Request[v1.TodoChangeEvent]) *TodoEventbusServiceHandlerMockTodoChangeExpectation {
	if mmTodoChange.mock.funcTodoChange != nil {
		mmTodoChange.mock.t.Fatalf("TodoEventbusServiceHandlerMock.TodoChange mock is already set by Set")
	}

	expectation := &TodoEventbusServiceHandlerMockTodoChangeExpectation{
		mock:   mmTodoChange.mock,
		params: &TodoEventbusServiceHandlerMockTodoChangeParams{ctx, pp1},
	}
	mmTodoChange.expectations = append(mmTodoChange.expectations, expectation)
	return expectation
}

// Then sets up TodoEventbusServiceHandler.TodoChange return parameters for the expectation previously defined by the When method
func (e *TodoEventbusServiceHandlerMockTodoChangeExpectation) Then(pp2 *connect_go.Response[v1.TodoEventbusTodoChangeResponse], err error) *TodoEventbusServiceHandlerMock {
	e.results = &TodoEventbusServiceHandlerMockTodoChangeResults{pp2, err}
	return e.mock
}

// TodoChange implements TodoEventbusServiceHandler
func (mmTodoChange *TodoEventbusServiceHandlerMock) TodoChange(ctx context.Context, pp1 *connect_go.Request[v1.TodoChangeEvent]) (pp2 *connect_go.Response[v1.TodoEventbusTodoChangeResponse], err error) {
	mm_atomic.AddUint64(&mmTodoChange.beforeTodoChangeCounter, 1)
	defer mm_atomic.AddUint64(&mmTodoChange.afterTodoChangeCounter, 1)

	if mmTodoChange.inspectFuncTodoChange != nil {
		mmTodoChange.inspectFuncTodoChange(ctx, pp1)
	}

	mm_params := &TodoEventbusServiceHandlerMockTodoChangeParams{ctx, pp1}

	// Record call args
	mmTodoChange.TodoChangeMock.mutex.Lock()
	mmTodoChange.TodoChangeMock.callArgs = append(mmTodoChange.TodoChangeMock.callArgs, mm_params)
	mmTodoChange.TodoChangeMock.mutex.Unlock()

	for _, e := range mmTodoChange.TodoChangeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmTodoChange.TodoChangeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTodoChange.TodoChangeMock.defaultExpectation.Counter, 1)
		mm_want := mmTodoChange.TodoChangeMock.defaultExpectation.params
		mm_got := TodoEventbusServiceHandlerMockTodoChangeParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTodoChange.t.Errorf("TodoEventbusServiceHandlerMock.TodoChange got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTodoChange.TodoChangeMock.defaultExpectation.results
		if mm_results == nil {
			mmTodoChange.t.Fatal("No results are set for the TodoEventbusServiceHandlerMock.TodoChange")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmTodoChange.funcTodoChange != nil {
		return mmTodoChange.funcTodoChange(ctx, pp1)
	}
	mmTodoChange.t.Fatalf("Unexpected call to TodoEventbusServiceHandlerMock.TodoChange. %v %v", ctx, pp1)
	return
}

// TodoChangeAfterCounter returns a count of finished TodoEventbusServiceHandlerMock.TodoChange invocations
func (mmTodoChange *TodoEventbusServiceHandlerMock) TodoChangeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTodoChange.afterTodoChangeCounter)
}

// TodoChangeBeforeCounter returns a count of TodoEventbusServiceHandlerMock.TodoChange invocations
func (mmTodoChange *TodoEventbusServiceHandlerMock) TodoChangeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTodoChange.beforeTodoChangeCounter)
}

// Calls returns a list of arguments used in each call to TodoEventbusServiceHandlerMock.TodoChange.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTodoChange *mTodoEventbusServiceHandlerMockTodoChange) Calls() []*TodoEventbusServiceHandlerMockTodoChangeParams {
	mmTodoChange.mutex.RLock()

	argCopy := make([]*TodoEventbusServiceHandlerMockTodoChangeParams, len(mmTodoChange.callArgs))
	copy(argCopy, mmTodoChange.callArgs)

	mmTodoChange.mutex.RUnlock()

	return argCopy
}

// MinimockTodoChangeDone returns true if the count of the TodoChange invocations corresponds
// the number of defined expectations
func (m *TodoEventbusServiceHandlerMock) MinimockTodoChangeDone() bool {
	for _, e := range m.TodoChangeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TodoChangeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTodoChangeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTodoChange != nil && mm_atomic.LoadUint64(&m.afterTodoChangeCounter) < 1 {
		return false
	}
	return true
}

// MinimockTodoChangeInspect logs each unmet expectation
func (m *TodoEventbusServiceHandlerMock) MinimockTodoChangeInspect() {
	for _, e := range m.TodoChangeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TodoEventbusServiceHandlerMock.TodoChange with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TodoChangeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTodoChangeCounter) < 1 {
		if m.TodoChangeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TodoEventbusServiceHandlerMock.TodoChange")
		} else {
			m.t.Errorf("Expected call to TodoEventbusServiceHandlerMock.TodoChange with params: %#v", *m.TodoChangeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTodoChange != nil && mm_atomic.LoadUint64(&m.afterTodoChangeCounter) < 1 {
		m.t.Error("Expected call to TodoEventbusServiceHandlerMock.TodoChange")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TodoEventbusServiceHandlerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockTodoChangeInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TodoEventbusServiceHandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TodoEventbusServiceHandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockTodoChangeDone()
}
