// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/auth_user.proto

package corev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/koblas/grpc-todo/gen/core/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthUserServiceName is the fully-qualified name of the AuthUserService service.
	AuthUserServiceName = "core.v1.AuthUserService"
)

// AuthUserServiceClient is a client for the core.v1.AuthUserService service.
type AuthUserServiceClient interface {
	// Get an authentiction url
	GetAuthUrl(context.Context, *connect_go.Request[v1.AuthUserServiceGetAuthUrlRequest]) (*connect_go.Response[v1.AuthUserServiceGetAuthUrlResponse], error)
	// List all associations for this user
	ListAssociations(context.Context, *connect_go.Request[v1.AuthUserServiceListAssociationsRequest]) (*connect_go.Response[v1.AuthUserServiceListAssociationsResponse], error)
	// Remove this token from the system
	RemoveAssociation(context.Context, *connect_go.Request[v1.AuthUserServiceRemoveAssociationRequest]) (*connect_go.Response[v1.AuthUserServiceRemoveAssociationResponse], error)
	UpsertUser(context.Context, *connect_go.Request[v1.AuthUserServiceUpsertUserRequest]) (*connect_go.Response[v1.AuthUserServiceUpsertUserResponse], error)
}

// NewAuthUserServiceClient constructs a client for the core.v1.AuthUserService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthUserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authUserServiceClient{
		getAuthUrl: connect_go.NewClient[v1.AuthUserServiceGetAuthUrlRequest, v1.AuthUserServiceGetAuthUrlResponse](
			httpClient,
			baseURL+"/core.v1.AuthUserService/GetAuthUrl",
			opts...,
		),
		listAssociations: connect_go.NewClient[v1.AuthUserServiceListAssociationsRequest, v1.AuthUserServiceListAssociationsResponse](
			httpClient,
			baseURL+"/core.v1.AuthUserService/ListAssociations",
			opts...,
		),
		removeAssociation: connect_go.NewClient[v1.AuthUserServiceRemoveAssociationRequest, v1.AuthUserServiceRemoveAssociationResponse](
			httpClient,
			baseURL+"/core.v1.AuthUserService/RemoveAssociation",
			opts...,
		),
		upsertUser: connect_go.NewClient[v1.AuthUserServiceUpsertUserRequest, v1.AuthUserServiceUpsertUserResponse](
			httpClient,
			baseURL+"/core.v1.AuthUserService/UpsertUser",
			opts...,
		),
	}
}

// authUserServiceClient implements AuthUserServiceClient.
type authUserServiceClient struct {
	getAuthUrl        *connect_go.Client[v1.AuthUserServiceGetAuthUrlRequest, v1.AuthUserServiceGetAuthUrlResponse]
	listAssociations  *connect_go.Client[v1.AuthUserServiceListAssociationsRequest, v1.AuthUserServiceListAssociationsResponse]
	removeAssociation *connect_go.Client[v1.AuthUserServiceRemoveAssociationRequest, v1.AuthUserServiceRemoveAssociationResponse]
	upsertUser        *connect_go.Client[v1.AuthUserServiceUpsertUserRequest, v1.AuthUserServiceUpsertUserResponse]
}

// GetAuthUrl calls core.v1.AuthUserService.GetAuthUrl.
func (c *authUserServiceClient) GetAuthUrl(ctx context.Context, req *connect_go.Request[v1.AuthUserServiceGetAuthUrlRequest]) (*connect_go.Response[v1.AuthUserServiceGetAuthUrlResponse], error) {
	return c.getAuthUrl.CallUnary(ctx, req)
}

// ListAssociations calls core.v1.AuthUserService.ListAssociations.
func (c *authUserServiceClient) ListAssociations(ctx context.Context, req *connect_go.Request[v1.AuthUserServiceListAssociationsRequest]) (*connect_go.Response[v1.AuthUserServiceListAssociationsResponse], error) {
	return c.listAssociations.CallUnary(ctx, req)
}

// RemoveAssociation calls core.v1.AuthUserService.RemoveAssociation.
func (c *authUserServiceClient) RemoveAssociation(ctx context.Context, req *connect_go.Request[v1.AuthUserServiceRemoveAssociationRequest]) (*connect_go.Response[v1.AuthUserServiceRemoveAssociationResponse], error) {
	return c.removeAssociation.CallUnary(ctx, req)
}

// UpsertUser calls core.v1.AuthUserService.UpsertUser.
func (c *authUserServiceClient) UpsertUser(ctx context.Context, req *connect_go.Request[v1.AuthUserServiceUpsertUserRequest]) (*connect_go.Response[v1.AuthUserServiceUpsertUserResponse], error) {
	return c.upsertUser.CallUnary(ctx, req)
}

// AuthUserServiceHandler is an implementation of the core.v1.AuthUserService service.
type AuthUserServiceHandler interface {
	// Get an authentiction url
	GetAuthUrl(context.Context, *connect_go.Request[v1.AuthUserServiceGetAuthUrlRequest]) (*connect_go.Response[v1.AuthUserServiceGetAuthUrlResponse], error)
	// List all associations for this user
	ListAssociations(context.Context, *connect_go.Request[v1.AuthUserServiceListAssociationsRequest]) (*connect_go.Response[v1.AuthUserServiceListAssociationsResponse], error)
	// Remove this token from the system
	RemoveAssociation(context.Context, *connect_go.Request[v1.AuthUserServiceRemoveAssociationRequest]) (*connect_go.Response[v1.AuthUserServiceRemoveAssociationResponse], error)
	UpsertUser(context.Context, *connect_go.Request[v1.AuthUserServiceUpsertUserRequest]) (*connect_go.Response[v1.AuthUserServiceUpsertUserResponse], error)
}

// NewAuthUserServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthUserServiceHandler(svc AuthUserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.AuthUserService/GetAuthUrl", connect_go.NewUnaryHandler(
		"/core.v1.AuthUserService/GetAuthUrl",
		svc.GetAuthUrl,
		opts...,
	))
	mux.Handle("/core.v1.AuthUserService/ListAssociations", connect_go.NewUnaryHandler(
		"/core.v1.AuthUserService/ListAssociations",
		svc.ListAssociations,
		opts...,
	))
	mux.Handle("/core.v1.AuthUserService/RemoveAssociation", connect_go.NewUnaryHandler(
		"/core.v1.AuthUserService/RemoveAssociation",
		svc.RemoveAssociation,
		opts...,
	))
	mux.Handle("/core.v1.AuthUserService/UpsertUser", connect_go.NewUnaryHandler(
		"/core.v1.AuthUserService/UpsertUser",
		svc.UpsertUser,
		opts...,
	))
	return "/core.v1.AuthUserService/", mux
}

// UnimplementedAuthUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthUserServiceHandler struct{}

func (UnimplementedAuthUserServiceHandler) GetAuthUrl(context.Context, *connect_go.Request[v1.AuthUserServiceGetAuthUrlRequest]) (*connect_go.Response[v1.AuthUserServiceGetAuthUrlResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.AuthUserService.GetAuthUrl is not implemented"))
}

func (UnimplementedAuthUserServiceHandler) ListAssociations(context.Context, *connect_go.Request[v1.AuthUserServiceListAssociationsRequest]) (*connect_go.Response[v1.AuthUserServiceListAssociationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.AuthUserService.ListAssociations is not implemented"))
}

func (UnimplementedAuthUserServiceHandler) RemoveAssociation(context.Context, *connect_go.Request[v1.AuthUserServiceRemoveAssociationRequest]) (*connect_go.Response[v1.AuthUserServiceRemoveAssociationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.AuthUserService.RemoveAssociation is not implemented"))
}

func (UnimplementedAuthUserServiceHandler) UpsertUser(context.Context, *connect_go.Request[v1.AuthUserServiceUpsertUserRequest]) (*connect_go.Response[v1.AuthUserServiceUpsertUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.AuthUserService.UpsertUser is not implemented"))
}
