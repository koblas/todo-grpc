// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/eventbus.proto

package corev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v11 "github.com/koblas/grpc-todo/gen/core/message/v1"
	v1 "github.com/koblas/grpc-todo/gen/core/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BroadcastEventbusServiceName is the fully-qualified name of the BroadcastEventbusService service.
	BroadcastEventbusServiceName = "core.v1.BroadcastEventbusService"
	// UserEventbusServiceName is the fully-qualified name of the UserEventbusService service.
	UserEventbusServiceName = "core.v1.UserEventbusService"
	// TodoEventbusServiceName is the fully-qualified name of the TodoEventbusService service.
	TodoEventbusServiceName = "core.v1.TodoEventbusService"
	// FileEventbusServiceName is the fully-qualified name of the FileEventbusService service.
	FileEventbusServiceName = "core.v1.FileEventbusService"
	// MessageEventbusServiceName is the fully-qualified name of the MessageEventbusService service.
	MessageEventbusServiceName = "core.v1.MessageEventbusService"
)

// BroadcastEventbusServiceClient is a client for the core.v1.BroadcastEventbusService service.
type BroadcastEventbusServiceClient interface {
	Send(context.Context, *connect_go.Request[v1.BroadcastEvent]) (*connect_go.Response[v1.BroadcastEventbusSendResponse], error)
}

// NewBroadcastEventbusServiceClient constructs a client for the core.v1.BroadcastEventbusService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBroadcastEventbusServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BroadcastEventbusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &broadcastEventbusServiceClient{
		send: connect_go.NewClient[v1.BroadcastEvent, v1.BroadcastEventbusSendResponse](
			httpClient,
			baseURL+"/core.v1.BroadcastEventbusService/Send",
			opts...,
		),
	}
}

// broadcastEventbusServiceClient implements BroadcastEventbusServiceClient.
type broadcastEventbusServiceClient struct {
	send *connect_go.Client[v1.BroadcastEvent, v1.BroadcastEventbusSendResponse]
}

// Send calls core.v1.BroadcastEventbusService.Send.
func (c *broadcastEventbusServiceClient) Send(ctx context.Context, req *connect_go.Request[v1.BroadcastEvent]) (*connect_go.Response[v1.BroadcastEventbusSendResponse], error) {
	return c.send.CallUnary(ctx, req)
}

// BroadcastEventbusServiceHandler is an implementation of the core.v1.BroadcastEventbusService
// service.
type BroadcastEventbusServiceHandler interface {
	Send(context.Context, *connect_go.Request[v1.BroadcastEvent]) (*connect_go.Response[v1.BroadcastEventbusSendResponse], error)
}

// NewBroadcastEventbusServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBroadcastEventbusServiceHandler(svc BroadcastEventbusServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.BroadcastEventbusService/Send", connect_go.NewUnaryHandler(
		"/core.v1.BroadcastEventbusService/Send",
		svc.Send,
		opts...,
	))
	return "/core.v1.BroadcastEventbusService/", mux
}

// UnimplementedBroadcastEventbusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBroadcastEventbusServiceHandler struct{}

func (UnimplementedBroadcastEventbusServiceHandler) Send(context.Context, *connect_go.Request[v1.BroadcastEvent]) (*connect_go.Response[v1.BroadcastEventbusSendResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.BroadcastEventbusService.Send is not implemented"))
}

// UserEventbusServiceClient is a client for the core.v1.UserEventbusService service.
type UserEventbusServiceClient interface {
	UserChange(context.Context, *connect_go.Request[v1.UserChangeEvent]) (*connect_go.Response[v1.UserEventbusUserChangeResponse], error)
	// Password change notification
	SecurityPasswordChange(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityPasswordChangeResponse], error)
	// Forgot password request notfication
	SecurityForgotRequest(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityForgotRequestResponse], error)
	// New user registration
	SecurityRegisterToken(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityRegisterTokenResponse], error)
	// Invite sent
	SecurityInviteToken(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityInviteTokenResponse], error)
}

// NewUserEventbusServiceClient constructs a client for the core.v1.UserEventbusService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserEventbusServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserEventbusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userEventbusServiceClient{
		userChange: connect_go.NewClient[v1.UserChangeEvent, v1.UserEventbusUserChangeResponse](
			httpClient,
			baseURL+"/core.v1.UserEventbusService/UserChange",
			opts...,
		),
		securityPasswordChange: connect_go.NewClient[v1.UserSecurityEvent, v1.UserEventbusSecurityPasswordChangeResponse](
			httpClient,
			baseURL+"/core.v1.UserEventbusService/SecurityPasswordChange",
			opts...,
		),
		securityForgotRequest: connect_go.NewClient[v1.UserSecurityEvent, v1.UserEventbusSecurityForgotRequestResponse](
			httpClient,
			baseURL+"/core.v1.UserEventbusService/SecurityForgotRequest",
			opts...,
		),
		securityRegisterToken: connect_go.NewClient[v1.UserSecurityEvent, v1.UserEventbusSecurityRegisterTokenResponse](
			httpClient,
			baseURL+"/core.v1.UserEventbusService/SecurityRegisterToken",
			opts...,
		),
		securityInviteToken: connect_go.NewClient[v1.UserSecurityEvent, v1.UserEventbusSecurityInviteTokenResponse](
			httpClient,
			baseURL+"/core.v1.UserEventbusService/SecurityInviteToken",
			opts...,
		),
	}
}

// userEventbusServiceClient implements UserEventbusServiceClient.
type userEventbusServiceClient struct {
	userChange             *connect_go.Client[v1.UserChangeEvent, v1.UserEventbusUserChangeResponse]
	securityPasswordChange *connect_go.Client[v1.UserSecurityEvent, v1.UserEventbusSecurityPasswordChangeResponse]
	securityForgotRequest  *connect_go.Client[v1.UserSecurityEvent, v1.UserEventbusSecurityForgotRequestResponse]
	securityRegisterToken  *connect_go.Client[v1.UserSecurityEvent, v1.UserEventbusSecurityRegisterTokenResponse]
	securityInviteToken    *connect_go.Client[v1.UserSecurityEvent, v1.UserEventbusSecurityInviteTokenResponse]
}

// UserChange calls core.v1.UserEventbusService.UserChange.
func (c *userEventbusServiceClient) UserChange(ctx context.Context, req *connect_go.Request[v1.UserChangeEvent]) (*connect_go.Response[v1.UserEventbusUserChangeResponse], error) {
	return c.userChange.CallUnary(ctx, req)
}

// SecurityPasswordChange calls core.v1.UserEventbusService.SecurityPasswordChange.
func (c *userEventbusServiceClient) SecurityPasswordChange(ctx context.Context, req *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityPasswordChangeResponse], error) {
	return c.securityPasswordChange.CallUnary(ctx, req)
}

// SecurityForgotRequest calls core.v1.UserEventbusService.SecurityForgotRequest.
func (c *userEventbusServiceClient) SecurityForgotRequest(ctx context.Context, req *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityForgotRequestResponse], error) {
	return c.securityForgotRequest.CallUnary(ctx, req)
}

// SecurityRegisterToken calls core.v1.UserEventbusService.SecurityRegisterToken.
func (c *userEventbusServiceClient) SecurityRegisterToken(ctx context.Context, req *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityRegisterTokenResponse], error) {
	return c.securityRegisterToken.CallUnary(ctx, req)
}

// SecurityInviteToken calls core.v1.UserEventbusService.SecurityInviteToken.
func (c *userEventbusServiceClient) SecurityInviteToken(ctx context.Context, req *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityInviteTokenResponse], error) {
	return c.securityInviteToken.CallUnary(ctx, req)
}

// UserEventbusServiceHandler is an implementation of the core.v1.UserEventbusService service.
type UserEventbusServiceHandler interface {
	UserChange(context.Context, *connect_go.Request[v1.UserChangeEvent]) (*connect_go.Response[v1.UserEventbusUserChangeResponse], error)
	// Password change notification
	SecurityPasswordChange(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityPasswordChangeResponse], error)
	// Forgot password request notfication
	SecurityForgotRequest(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityForgotRequestResponse], error)
	// New user registration
	SecurityRegisterToken(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityRegisterTokenResponse], error)
	// Invite sent
	SecurityInviteToken(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityInviteTokenResponse], error)
}

// NewUserEventbusServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserEventbusServiceHandler(svc UserEventbusServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.UserEventbusService/UserChange", connect_go.NewUnaryHandler(
		"/core.v1.UserEventbusService/UserChange",
		svc.UserChange,
		opts...,
	))
	mux.Handle("/core.v1.UserEventbusService/SecurityPasswordChange", connect_go.NewUnaryHandler(
		"/core.v1.UserEventbusService/SecurityPasswordChange",
		svc.SecurityPasswordChange,
		opts...,
	))
	mux.Handle("/core.v1.UserEventbusService/SecurityForgotRequest", connect_go.NewUnaryHandler(
		"/core.v1.UserEventbusService/SecurityForgotRequest",
		svc.SecurityForgotRequest,
		opts...,
	))
	mux.Handle("/core.v1.UserEventbusService/SecurityRegisterToken", connect_go.NewUnaryHandler(
		"/core.v1.UserEventbusService/SecurityRegisterToken",
		svc.SecurityRegisterToken,
		opts...,
	))
	mux.Handle("/core.v1.UserEventbusService/SecurityInviteToken", connect_go.NewUnaryHandler(
		"/core.v1.UserEventbusService/SecurityInviteToken",
		svc.SecurityInviteToken,
		opts...,
	))
	return "/core.v1.UserEventbusService/", mux
}

// UnimplementedUserEventbusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserEventbusServiceHandler struct{}

func (UnimplementedUserEventbusServiceHandler) UserChange(context.Context, *connect_go.Request[v1.UserChangeEvent]) (*connect_go.Response[v1.UserEventbusUserChangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserEventbusService.UserChange is not implemented"))
}

func (UnimplementedUserEventbusServiceHandler) SecurityPasswordChange(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityPasswordChangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserEventbusService.SecurityPasswordChange is not implemented"))
}

func (UnimplementedUserEventbusServiceHandler) SecurityForgotRequest(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityForgotRequestResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserEventbusService.SecurityForgotRequest is not implemented"))
}

func (UnimplementedUserEventbusServiceHandler) SecurityRegisterToken(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityRegisterTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserEventbusService.SecurityRegisterToken is not implemented"))
}

func (UnimplementedUserEventbusServiceHandler) SecurityInviteToken(context.Context, *connect_go.Request[v1.UserSecurityEvent]) (*connect_go.Response[v1.UserEventbusSecurityInviteTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserEventbusService.SecurityInviteToken is not implemented"))
}

// TodoEventbusServiceClient is a client for the core.v1.TodoEventbusService service.
type TodoEventbusServiceClient interface {
	TodoChange(context.Context, *connect_go.Request[v1.TodoChangeEvent]) (*connect_go.Response[v1.TodoEventbusTodoChangeResponse], error)
}

// NewTodoEventbusServiceClient constructs a client for the core.v1.TodoEventbusService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTodoEventbusServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TodoEventbusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &todoEventbusServiceClient{
		todoChange: connect_go.NewClient[v1.TodoChangeEvent, v1.TodoEventbusTodoChangeResponse](
			httpClient,
			baseURL+"/core.v1.TodoEventbusService/TodoChange",
			opts...,
		),
	}
}

// todoEventbusServiceClient implements TodoEventbusServiceClient.
type todoEventbusServiceClient struct {
	todoChange *connect_go.Client[v1.TodoChangeEvent, v1.TodoEventbusTodoChangeResponse]
}

// TodoChange calls core.v1.TodoEventbusService.TodoChange.
func (c *todoEventbusServiceClient) TodoChange(ctx context.Context, req *connect_go.Request[v1.TodoChangeEvent]) (*connect_go.Response[v1.TodoEventbusTodoChangeResponse], error) {
	return c.todoChange.CallUnary(ctx, req)
}

// TodoEventbusServiceHandler is an implementation of the core.v1.TodoEventbusService service.
type TodoEventbusServiceHandler interface {
	TodoChange(context.Context, *connect_go.Request[v1.TodoChangeEvent]) (*connect_go.Response[v1.TodoEventbusTodoChangeResponse], error)
}

// NewTodoEventbusServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTodoEventbusServiceHandler(svc TodoEventbusServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.TodoEventbusService/TodoChange", connect_go.NewUnaryHandler(
		"/core.v1.TodoEventbusService/TodoChange",
		svc.TodoChange,
		opts...,
	))
	return "/core.v1.TodoEventbusService/", mux
}

// UnimplementedTodoEventbusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTodoEventbusServiceHandler struct{}

func (UnimplementedTodoEventbusServiceHandler) TodoChange(context.Context, *connect_go.Request[v1.TodoChangeEvent]) (*connect_go.Response[v1.TodoEventbusTodoChangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.TodoEventbusService.TodoChange is not implemented"))
}

// FileEventbusServiceClient is a client for the core.v1.FileEventbusService service.
type FileEventbusServiceClient interface {
	FileUploaded(context.Context, *connect_go.Request[v1.FileServiceUploadEvent]) (*connect_go.Response[v1.FileEventbusFileUploadedResponse], error)
	FileComplete(context.Context, *connect_go.Request[v1.FileServiceCompleteEvent]) (*connect_go.Response[v1.FileEventbusFileCompleteResponse], error)
}

// NewFileEventbusServiceClient constructs a client for the core.v1.FileEventbusService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileEventbusServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FileEventbusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileEventbusServiceClient{
		fileUploaded: connect_go.NewClient[v1.FileServiceUploadEvent, v1.FileEventbusFileUploadedResponse](
			httpClient,
			baseURL+"/core.v1.FileEventbusService/FileUploaded",
			opts...,
		),
		fileComplete: connect_go.NewClient[v1.FileServiceCompleteEvent, v1.FileEventbusFileCompleteResponse](
			httpClient,
			baseURL+"/core.v1.FileEventbusService/FileComplete",
			opts...,
		),
	}
}

// fileEventbusServiceClient implements FileEventbusServiceClient.
type fileEventbusServiceClient struct {
	fileUploaded *connect_go.Client[v1.FileServiceUploadEvent, v1.FileEventbusFileUploadedResponse]
	fileComplete *connect_go.Client[v1.FileServiceCompleteEvent, v1.FileEventbusFileCompleteResponse]
}

// FileUploaded calls core.v1.FileEventbusService.FileUploaded.
func (c *fileEventbusServiceClient) FileUploaded(ctx context.Context, req *connect_go.Request[v1.FileServiceUploadEvent]) (*connect_go.Response[v1.FileEventbusFileUploadedResponse], error) {
	return c.fileUploaded.CallUnary(ctx, req)
}

// FileComplete calls core.v1.FileEventbusService.FileComplete.
func (c *fileEventbusServiceClient) FileComplete(ctx context.Context, req *connect_go.Request[v1.FileServiceCompleteEvent]) (*connect_go.Response[v1.FileEventbusFileCompleteResponse], error) {
	return c.fileComplete.CallUnary(ctx, req)
}

// FileEventbusServiceHandler is an implementation of the core.v1.FileEventbusService service.
type FileEventbusServiceHandler interface {
	FileUploaded(context.Context, *connect_go.Request[v1.FileServiceUploadEvent]) (*connect_go.Response[v1.FileEventbusFileUploadedResponse], error)
	FileComplete(context.Context, *connect_go.Request[v1.FileServiceCompleteEvent]) (*connect_go.Response[v1.FileEventbusFileCompleteResponse], error)
}

// NewFileEventbusServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileEventbusServiceHandler(svc FileEventbusServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.FileEventbusService/FileUploaded", connect_go.NewUnaryHandler(
		"/core.v1.FileEventbusService/FileUploaded",
		svc.FileUploaded,
		opts...,
	))
	mux.Handle("/core.v1.FileEventbusService/FileComplete", connect_go.NewUnaryHandler(
		"/core.v1.FileEventbusService/FileComplete",
		svc.FileComplete,
		opts...,
	))
	return "/core.v1.FileEventbusService/", mux
}

// UnimplementedFileEventbusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileEventbusServiceHandler struct{}

func (UnimplementedFileEventbusServiceHandler) FileUploaded(context.Context, *connect_go.Request[v1.FileServiceUploadEvent]) (*connect_go.Response[v1.FileEventbusFileUploadedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.FileEventbusService.FileUploaded is not implemented"))
}

func (UnimplementedFileEventbusServiceHandler) FileComplete(context.Context, *connect_go.Request[v1.FileServiceCompleteEvent]) (*connect_go.Response[v1.FileEventbusFileCompleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.FileEventbusService.FileComplete is not implemented"))
}

// MessageEventbusServiceClient is a client for the core.v1.MessageEventbusService service.
type MessageEventbusServiceClient interface {
	Change(context.Context, *connect_go.Request[v11.MessageChangeEvent]) (*connect_go.Response[v1.MessageEventbusServiceChangeResponse], error)
}

// NewMessageEventbusServiceClient constructs a client for the core.v1.MessageEventbusService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageEventbusServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MessageEventbusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messageEventbusServiceClient{
		change: connect_go.NewClient[v11.MessageChangeEvent, v1.MessageEventbusServiceChangeResponse](
			httpClient,
			baseURL+"/core.v1.MessageEventbusService/Change",
			opts...,
		),
	}
}

// messageEventbusServiceClient implements MessageEventbusServiceClient.
type messageEventbusServiceClient struct {
	change *connect_go.Client[v11.MessageChangeEvent, v1.MessageEventbusServiceChangeResponse]
}

// Change calls core.v1.MessageEventbusService.Change.
func (c *messageEventbusServiceClient) Change(ctx context.Context, req *connect_go.Request[v11.MessageChangeEvent]) (*connect_go.Response[v1.MessageEventbusServiceChangeResponse], error) {
	return c.change.CallUnary(ctx, req)
}

// MessageEventbusServiceHandler is an implementation of the core.v1.MessageEventbusService service.
type MessageEventbusServiceHandler interface {
	Change(context.Context, *connect_go.Request[v11.MessageChangeEvent]) (*connect_go.Response[v1.MessageEventbusServiceChangeResponse], error)
}

// NewMessageEventbusServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageEventbusServiceHandler(svc MessageEventbusServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.MessageEventbusService/Change", connect_go.NewUnaryHandler(
		"/core.v1.MessageEventbusService/Change",
		svc.Change,
		opts...,
	))
	return "/core.v1.MessageEventbusService/", mux
}

// UnimplementedMessageEventbusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageEventbusServiceHandler struct{}

func (UnimplementedMessageEventbusServiceHandler) Change(context.Context, *connect_go.Request[v11.MessageChangeEvent]) (*connect_go.Response[v1.MessageEventbusServiceChangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.MessageEventbusService.Change is not implemented"))
}
