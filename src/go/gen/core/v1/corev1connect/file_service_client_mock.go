package corev1connect

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/koblas/grpc-todo/gen/core/v1/corev1connect.FileServiceClient -o ./file_service_client_mock.go -n FileServiceClientMock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	connect_go "github.com/bufbuild/connect-go"
	"github.com/gojuno/minimock/v3"
	v1 "github.com/koblas/grpc-todo/gen/core/v1"
)

// FileServiceClientMock implements FileServiceClient
type FileServiceClientMock struct {
	t minimock.Tester

	funcGet          func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest]) (pp2 *connect_go.Response[v1.FileServiceGetResponse], err error)
	inspectFuncGet   func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest])
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mFileServiceClientMockGet

	funcPut          func(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest]) (pp2 *connect_go.Response[v1.FileServicePutResponse], err error)
	inspectFuncPut   func(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest])
	afterPutCounter  uint64
	beforePutCounter uint64
	PutMock          mFileServiceClientMockPut

	funcUpload          func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadResponse], err error)
	inspectFuncUpload   func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest])
	afterUploadCounter  uint64
	beforeUploadCounter uint64
	UploadMock          mFileServiceClientMockUpload

	funcUploadUrl          func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse], err error)
	inspectFuncUploadUrl   func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest])
	afterUploadUrlCounter  uint64
	beforeUploadUrlCounter uint64
	UploadUrlMock          mFileServiceClientMockUploadUrl

	funcVerifyUrl          func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse], err error)
	inspectFuncVerifyUrl   func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest])
	afterVerifyUrlCounter  uint64
	beforeVerifyUrlCounter uint64
	VerifyUrlMock          mFileServiceClientMockVerifyUrl
}

// NewFileServiceClientMock returns a mock for FileServiceClient
func NewFileServiceClientMock(t minimock.Tester) *FileServiceClientMock {
	m := &FileServiceClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mFileServiceClientMockGet{mock: m}
	m.GetMock.callArgs = []*FileServiceClientMockGetParams{}

	m.PutMock = mFileServiceClientMockPut{mock: m}
	m.PutMock.callArgs = []*FileServiceClientMockPutParams{}

	m.UploadMock = mFileServiceClientMockUpload{mock: m}
	m.UploadMock.callArgs = []*FileServiceClientMockUploadParams{}

	m.UploadUrlMock = mFileServiceClientMockUploadUrl{mock: m}
	m.UploadUrlMock.callArgs = []*FileServiceClientMockUploadUrlParams{}

	m.VerifyUrlMock = mFileServiceClientMockVerifyUrl{mock: m}
	m.VerifyUrlMock.callArgs = []*FileServiceClientMockVerifyUrlParams{}

	return m
}

type mFileServiceClientMockGet struct {
	mock               *FileServiceClientMock
	defaultExpectation *FileServiceClientMockGetExpectation
	expectations       []*FileServiceClientMockGetExpectation

	callArgs []*FileServiceClientMockGetParams
	mutex    sync.RWMutex
}

// FileServiceClientMockGetExpectation specifies expectation struct of the FileServiceClient.Get
type FileServiceClientMockGetExpectation struct {
	mock    *FileServiceClientMock
	params  *FileServiceClientMockGetParams
	results *FileServiceClientMockGetResults
	Counter uint64
}

// FileServiceClientMockGetParams contains parameters of the FileServiceClient.Get
type FileServiceClientMockGetParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FileServiceGetRequest]
}

// FileServiceClientMockGetResults contains results of the FileServiceClient.Get
type FileServiceClientMockGetResults struct {
	pp2 *connect_go.Response[v1.FileServiceGetResponse]
	err error
}

// Expect sets up expected params for FileServiceClient.Get
func (mmGet *mFileServiceClientMockGet) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest]) *mFileServiceClientMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileServiceClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &FileServiceClientMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &FileServiceClientMockGetParams{ctx, pp1}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the FileServiceClient.Get
func (mmGet *mFileServiceClientMockGet) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest])) *mFileServiceClientMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for FileServiceClientMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by FileServiceClient.Get
func (mmGet *mFileServiceClientMockGet) Return(pp2 *connect_go.Response[v1.FileServiceGetResponse], err error) *FileServiceClientMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileServiceClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &FileServiceClientMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &FileServiceClientMockGetResults{pp2, err}
	return mmGet.mock
}

// Set uses given function f to mock the FileServiceClient.Get method
func (mmGet *mFileServiceClientMockGet) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest]) (pp2 *connect_go.Response[v1.FileServiceGetResponse], err error)) *FileServiceClientMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the FileServiceClient.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the FileServiceClient.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the FileServiceClient.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mFileServiceClientMockGet) When(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest]) *FileServiceClientMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileServiceClientMock.Get mock is already set by Set")
	}

	expectation := &FileServiceClientMockGetExpectation{
		mock:   mmGet.mock,
		params: &FileServiceClientMockGetParams{ctx, pp1},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up FileServiceClient.Get return parameters for the expectation previously defined by the When method
func (e *FileServiceClientMockGetExpectation) Then(pp2 *connect_go.Response[v1.FileServiceGetResponse], err error) *FileServiceClientMock {
	e.results = &FileServiceClientMockGetResults{pp2, err}
	return e.mock
}

// Get implements FileServiceClient
func (mmGet *FileServiceClientMock) Get(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceGetRequest]) (pp2 *connect_go.Response[v1.FileServiceGetResponse], err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, pp1)
	}

	mm_params := &FileServiceClientMockGetParams{ctx, pp1}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := FileServiceClientMockGetParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("FileServiceClientMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the FileServiceClientMock.Get")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, pp1)
	}
	mmGet.t.Fatalf("Unexpected call to FileServiceClientMock.Get. %v %v", ctx, pp1)
	return
}

// GetAfterCounter returns a count of finished FileServiceClientMock.Get invocations
func (mmGet *FileServiceClientMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of FileServiceClientMock.Get invocations
func (mmGet *FileServiceClientMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to FileServiceClientMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mFileServiceClientMockGet) Calls() []*FileServiceClientMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*FileServiceClientMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *FileServiceClientMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *FileServiceClientMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileServiceClientMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileServiceClientMock.Get")
		} else {
			m.t.Errorf("Expected call to FileServiceClientMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to FileServiceClientMock.Get")
	}
}

type mFileServiceClientMockPut struct {
	mock               *FileServiceClientMock
	defaultExpectation *FileServiceClientMockPutExpectation
	expectations       []*FileServiceClientMockPutExpectation

	callArgs []*FileServiceClientMockPutParams
	mutex    sync.RWMutex
}

// FileServiceClientMockPutExpectation specifies expectation struct of the FileServiceClient.Put
type FileServiceClientMockPutExpectation struct {
	mock    *FileServiceClientMock
	params  *FileServiceClientMockPutParams
	results *FileServiceClientMockPutResults
	Counter uint64
}

// FileServiceClientMockPutParams contains parameters of the FileServiceClient.Put
type FileServiceClientMockPutParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FileServicePutRequest]
}

// FileServiceClientMockPutResults contains results of the FileServiceClient.Put
type FileServiceClientMockPutResults struct {
	pp2 *connect_go.Response[v1.FileServicePutResponse]
	err error
}

// Expect sets up expected params for FileServiceClient.Put
func (mmPut *mFileServiceClientMockPut) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest]) *mFileServiceClientMockPut {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("FileServiceClientMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &FileServiceClientMockPutExpectation{}
	}

	mmPut.defaultExpectation.params = &FileServiceClientMockPutParams{ctx, pp1}
	for _, e := range mmPut.expectations {
		if minimock.Equal(e.params, mmPut.defaultExpectation.params) {
			mmPut.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPut.defaultExpectation.params)
		}
	}

	return mmPut
}

// Inspect accepts an inspector function that has same arguments as the FileServiceClient.Put
func (mmPut *mFileServiceClientMockPut) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest])) *mFileServiceClientMockPut {
	if mmPut.mock.inspectFuncPut != nil {
		mmPut.mock.t.Fatalf("Inspect function is already set for FileServiceClientMock.Put")
	}

	mmPut.mock.inspectFuncPut = f

	return mmPut
}

// Return sets up results that will be returned by FileServiceClient.Put
func (mmPut *mFileServiceClientMockPut) Return(pp2 *connect_go.Response[v1.FileServicePutResponse], err error) *FileServiceClientMock {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("FileServiceClientMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &FileServiceClientMockPutExpectation{mock: mmPut.mock}
	}
	mmPut.defaultExpectation.results = &FileServiceClientMockPutResults{pp2, err}
	return mmPut.mock
}

// Set uses given function f to mock the FileServiceClient.Put method
func (mmPut *mFileServiceClientMockPut) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest]) (pp2 *connect_go.Response[v1.FileServicePutResponse], err error)) *FileServiceClientMock {
	if mmPut.defaultExpectation != nil {
		mmPut.mock.t.Fatalf("Default expectation is already set for the FileServiceClient.Put method")
	}

	if len(mmPut.expectations) > 0 {
		mmPut.mock.t.Fatalf("Some expectations are already set for the FileServiceClient.Put method")
	}

	mmPut.mock.funcPut = f
	return mmPut.mock
}

// When sets expectation for the FileServiceClient.Put which will trigger the result defined by the following
// Then helper
func (mmPut *mFileServiceClientMockPut) When(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest]) *FileServiceClientMockPutExpectation {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("FileServiceClientMock.Put mock is already set by Set")
	}

	expectation := &FileServiceClientMockPutExpectation{
		mock:   mmPut.mock,
		params: &FileServiceClientMockPutParams{ctx, pp1},
	}
	mmPut.expectations = append(mmPut.expectations, expectation)
	return expectation
}

// Then sets up FileServiceClient.Put return parameters for the expectation previously defined by the When method
func (e *FileServiceClientMockPutExpectation) Then(pp2 *connect_go.Response[v1.FileServicePutResponse], err error) *FileServiceClientMock {
	e.results = &FileServiceClientMockPutResults{pp2, err}
	return e.mock
}

// Put implements FileServiceClient
func (mmPut *FileServiceClientMock) Put(ctx context.Context, pp1 *connect_go.Request[v1.FileServicePutRequest]) (pp2 *connect_go.Response[v1.FileServicePutResponse], err error) {
	mm_atomic.AddUint64(&mmPut.beforePutCounter, 1)
	defer mm_atomic.AddUint64(&mmPut.afterPutCounter, 1)

	if mmPut.inspectFuncPut != nil {
		mmPut.inspectFuncPut(ctx, pp1)
	}

	mm_params := &FileServiceClientMockPutParams{ctx, pp1}

	// Record call args
	mmPut.PutMock.mutex.Lock()
	mmPut.PutMock.callArgs = append(mmPut.PutMock.callArgs, mm_params)
	mmPut.PutMock.mutex.Unlock()

	for _, e := range mmPut.PutMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmPut.PutMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPut.PutMock.defaultExpectation.Counter, 1)
		mm_want := mmPut.PutMock.defaultExpectation.params
		mm_got := FileServiceClientMockPutParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPut.t.Errorf("FileServiceClientMock.Put got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPut.PutMock.defaultExpectation.results
		if mm_results == nil {
			mmPut.t.Fatal("No results are set for the FileServiceClientMock.Put")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmPut.funcPut != nil {
		return mmPut.funcPut(ctx, pp1)
	}
	mmPut.t.Fatalf("Unexpected call to FileServiceClientMock.Put. %v %v", ctx, pp1)
	return
}

// PutAfterCounter returns a count of finished FileServiceClientMock.Put invocations
func (mmPut *FileServiceClientMock) PutAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPut.afterPutCounter)
}

// PutBeforeCounter returns a count of FileServiceClientMock.Put invocations
func (mmPut *FileServiceClientMock) PutBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPut.beforePutCounter)
}

// Calls returns a list of arguments used in each call to FileServiceClientMock.Put.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPut *mFileServiceClientMockPut) Calls() []*FileServiceClientMockPutParams {
	mmPut.mutex.RLock()

	argCopy := make([]*FileServiceClientMockPutParams, len(mmPut.callArgs))
	copy(argCopy, mmPut.callArgs)

	mmPut.mutex.RUnlock()

	return argCopy
}

// MinimockPutDone returns true if the count of the Put invocations corresponds
// the number of defined expectations
func (m *FileServiceClientMock) MinimockPutDone() bool {
	for _, e := range m.PutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPut != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		return false
	}
	return true
}

// MinimockPutInspect logs each unmet expectation
func (m *FileServiceClientMock) MinimockPutInspect() {
	for _, e := range m.PutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileServiceClientMock.Put with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		if m.PutMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileServiceClientMock.Put")
		} else {
			m.t.Errorf("Expected call to FileServiceClientMock.Put with params: %#v", *m.PutMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPut != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		m.t.Error("Expected call to FileServiceClientMock.Put")
	}
}

type mFileServiceClientMockUpload struct {
	mock               *FileServiceClientMock
	defaultExpectation *FileServiceClientMockUploadExpectation
	expectations       []*FileServiceClientMockUploadExpectation

	callArgs []*FileServiceClientMockUploadParams
	mutex    sync.RWMutex
}

// FileServiceClientMockUploadExpectation specifies expectation struct of the FileServiceClient.Upload
type FileServiceClientMockUploadExpectation struct {
	mock    *FileServiceClientMock
	params  *FileServiceClientMockUploadParams
	results *FileServiceClientMockUploadResults
	Counter uint64
}

// FileServiceClientMockUploadParams contains parameters of the FileServiceClient.Upload
type FileServiceClientMockUploadParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FileServiceUploadRequest]
}

// FileServiceClientMockUploadResults contains results of the FileServiceClient.Upload
type FileServiceClientMockUploadResults struct {
	pp2 *connect_go.Response[v1.FileServiceUploadResponse]
	err error
}

// Expect sets up expected params for FileServiceClient.Upload
func (mmUpload *mFileServiceClientMockUpload) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest]) *mFileServiceClientMockUpload {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("FileServiceClientMock.Upload mock is already set by Set")
	}

	if mmUpload.defaultExpectation == nil {
		mmUpload.defaultExpectation = &FileServiceClientMockUploadExpectation{}
	}

	mmUpload.defaultExpectation.params = &FileServiceClientMockUploadParams{ctx, pp1}
	for _, e := range mmUpload.expectations {
		if minimock.Equal(e.params, mmUpload.defaultExpectation.params) {
			mmUpload.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpload.defaultExpectation.params)
		}
	}

	return mmUpload
}

// Inspect accepts an inspector function that has same arguments as the FileServiceClient.Upload
func (mmUpload *mFileServiceClientMockUpload) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest])) *mFileServiceClientMockUpload {
	if mmUpload.mock.inspectFuncUpload != nil {
		mmUpload.mock.t.Fatalf("Inspect function is already set for FileServiceClientMock.Upload")
	}

	mmUpload.mock.inspectFuncUpload = f

	return mmUpload
}

// Return sets up results that will be returned by FileServiceClient.Upload
func (mmUpload *mFileServiceClientMockUpload) Return(pp2 *connect_go.Response[v1.FileServiceUploadResponse], err error) *FileServiceClientMock {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("FileServiceClientMock.Upload mock is already set by Set")
	}

	if mmUpload.defaultExpectation == nil {
		mmUpload.defaultExpectation = &FileServiceClientMockUploadExpectation{mock: mmUpload.mock}
	}
	mmUpload.defaultExpectation.results = &FileServiceClientMockUploadResults{pp2, err}
	return mmUpload.mock
}

// Set uses given function f to mock the FileServiceClient.Upload method
func (mmUpload *mFileServiceClientMockUpload) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadResponse], err error)) *FileServiceClientMock {
	if mmUpload.defaultExpectation != nil {
		mmUpload.mock.t.Fatalf("Default expectation is already set for the FileServiceClient.Upload method")
	}

	if len(mmUpload.expectations) > 0 {
		mmUpload.mock.t.Fatalf("Some expectations are already set for the FileServiceClient.Upload method")
	}

	mmUpload.mock.funcUpload = f
	return mmUpload.mock
}

// When sets expectation for the FileServiceClient.Upload which will trigger the result defined by the following
// Then helper
func (mmUpload *mFileServiceClientMockUpload) When(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest]) *FileServiceClientMockUploadExpectation {
	if mmUpload.mock.funcUpload != nil {
		mmUpload.mock.t.Fatalf("FileServiceClientMock.Upload mock is already set by Set")
	}

	expectation := &FileServiceClientMockUploadExpectation{
		mock:   mmUpload.mock,
		params: &FileServiceClientMockUploadParams{ctx, pp1},
	}
	mmUpload.expectations = append(mmUpload.expectations, expectation)
	return expectation
}

// Then sets up FileServiceClient.Upload return parameters for the expectation previously defined by the When method
func (e *FileServiceClientMockUploadExpectation) Then(pp2 *connect_go.Response[v1.FileServiceUploadResponse], err error) *FileServiceClientMock {
	e.results = &FileServiceClientMockUploadResults{pp2, err}
	return e.mock
}

// Upload implements FileServiceClient
func (mmUpload *FileServiceClientMock) Upload(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadResponse], err error) {
	mm_atomic.AddUint64(&mmUpload.beforeUploadCounter, 1)
	defer mm_atomic.AddUint64(&mmUpload.afterUploadCounter, 1)

	if mmUpload.inspectFuncUpload != nil {
		mmUpload.inspectFuncUpload(ctx, pp1)
	}

	mm_params := &FileServiceClientMockUploadParams{ctx, pp1}

	// Record call args
	mmUpload.UploadMock.mutex.Lock()
	mmUpload.UploadMock.callArgs = append(mmUpload.UploadMock.callArgs, mm_params)
	mmUpload.UploadMock.mutex.Unlock()

	for _, e := range mmUpload.UploadMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmUpload.UploadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpload.UploadMock.defaultExpectation.Counter, 1)
		mm_want := mmUpload.UploadMock.defaultExpectation.params
		mm_got := FileServiceClientMockUploadParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpload.t.Errorf("FileServiceClientMock.Upload got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpload.UploadMock.defaultExpectation.results
		if mm_results == nil {
			mmUpload.t.Fatal("No results are set for the FileServiceClientMock.Upload")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmUpload.funcUpload != nil {
		return mmUpload.funcUpload(ctx, pp1)
	}
	mmUpload.t.Fatalf("Unexpected call to FileServiceClientMock.Upload. %v %v", ctx, pp1)
	return
}

// UploadAfterCounter returns a count of finished FileServiceClientMock.Upload invocations
func (mmUpload *FileServiceClientMock) UploadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpload.afterUploadCounter)
}

// UploadBeforeCounter returns a count of FileServiceClientMock.Upload invocations
func (mmUpload *FileServiceClientMock) UploadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpload.beforeUploadCounter)
}

// Calls returns a list of arguments used in each call to FileServiceClientMock.Upload.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpload *mFileServiceClientMockUpload) Calls() []*FileServiceClientMockUploadParams {
	mmUpload.mutex.RLock()

	argCopy := make([]*FileServiceClientMockUploadParams, len(mmUpload.callArgs))
	copy(argCopy, mmUpload.callArgs)

	mmUpload.mutex.RUnlock()

	return argCopy
}

// MinimockUploadDone returns true if the count of the Upload invocations corresponds
// the number of defined expectations
func (m *FileServiceClientMock) MinimockUploadDone() bool {
	for _, e := range m.UploadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UploadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUploadCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpload != nil && mm_atomic.LoadUint64(&m.afterUploadCounter) < 1 {
		return false
	}
	return true
}

// MinimockUploadInspect logs each unmet expectation
func (m *FileServiceClientMock) MinimockUploadInspect() {
	for _, e := range m.UploadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileServiceClientMock.Upload with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UploadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUploadCounter) < 1 {
		if m.UploadMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileServiceClientMock.Upload")
		} else {
			m.t.Errorf("Expected call to FileServiceClientMock.Upload with params: %#v", *m.UploadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpload != nil && mm_atomic.LoadUint64(&m.afterUploadCounter) < 1 {
		m.t.Error("Expected call to FileServiceClientMock.Upload")
	}
}

type mFileServiceClientMockUploadUrl struct {
	mock               *FileServiceClientMock
	defaultExpectation *FileServiceClientMockUploadUrlExpectation
	expectations       []*FileServiceClientMockUploadUrlExpectation

	callArgs []*FileServiceClientMockUploadUrlParams
	mutex    sync.RWMutex
}

// FileServiceClientMockUploadUrlExpectation specifies expectation struct of the FileServiceClient.UploadUrl
type FileServiceClientMockUploadUrlExpectation struct {
	mock    *FileServiceClientMock
	params  *FileServiceClientMockUploadUrlParams
	results *FileServiceClientMockUploadUrlResults
	Counter uint64
}

// FileServiceClientMockUploadUrlParams contains parameters of the FileServiceClient.UploadUrl
type FileServiceClientMockUploadUrlParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]
}

// FileServiceClientMockUploadUrlResults contains results of the FileServiceClient.UploadUrl
type FileServiceClientMockUploadUrlResults struct {
	pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse]
	err error
}

// Expect sets up expected params for FileServiceClient.UploadUrl
func (mmUploadUrl *mFileServiceClientMockUploadUrl) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]) *mFileServiceClientMockUploadUrl {
	if mmUploadUrl.mock.funcUploadUrl != nil {
		mmUploadUrl.mock.t.Fatalf("FileServiceClientMock.UploadUrl mock is already set by Set")
	}

	if mmUploadUrl.defaultExpectation == nil {
		mmUploadUrl.defaultExpectation = &FileServiceClientMockUploadUrlExpectation{}
	}

	mmUploadUrl.defaultExpectation.params = &FileServiceClientMockUploadUrlParams{ctx, pp1}
	for _, e := range mmUploadUrl.expectations {
		if minimock.Equal(e.params, mmUploadUrl.defaultExpectation.params) {
			mmUploadUrl.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUploadUrl.defaultExpectation.params)
		}
	}

	return mmUploadUrl
}

// Inspect accepts an inspector function that has same arguments as the FileServiceClient.UploadUrl
func (mmUploadUrl *mFileServiceClientMockUploadUrl) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest])) *mFileServiceClientMockUploadUrl {
	if mmUploadUrl.mock.inspectFuncUploadUrl != nil {
		mmUploadUrl.mock.t.Fatalf("Inspect function is already set for FileServiceClientMock.UploadUrl")
	}

	mmUploadUrl.mock.inspectFuncUploadUrl = f

	return mmUploadUrl
}

// Return sets up results that will be returned by FileServiceClient.UploadUrl
func (mmUploadUrl *mFileServiceClientMockUploadUrl) Return(pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse], err error) *FileServiceClientMock {
	if mmUploadUrl.mock.funcUploadUrl != nil {
		mmUploadUrl.mock.t.Fatalf("FileServiceClientMock.UploadUrl mock is already set by Set")
	}

	if mmUploadUrl.defaultExpectation == nil {
		mmUploadUrl.defaultExpectation = &FileServiceClientMockUploadUrlExpectation{mock: mmUploadUrl.mock}
	}
	mmUploadUrl.defaultExpectation.results = &FileServiceClientMockUploadUrlResults{pp2, err}
	return mmUploadUrl.mock
}

// Set uses given function f to mock the FileServiceClient.UploadUrl method
func (mmUploadUrl *mFileServiceClientMockUploadUrl) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse], err error)) *FileServiceClientMock {
	if mmUploadUrl.defaultExpectation != nil {
		mmUploadUrl.mock.t.Fatalf("Default expectation is already set for the FileServiceClient.UploadUrl method")
	}

	if len(mmUploadUrl.expectations) > 0 {
		mmUploadUrl.mock.t.Fatalf("Some expectations are already set for the FileServiceClient.UploadUrl method")
	}

	mmUploadUrl.mock.funcUploadUrl = f
	return mmUploadUrl.mock
}

// When sets expectation for the FileServiceClient.UploadUrl which will trigger the result defined by the following
// Then helper
func (mmUploadUrl *mFileServiceClientMockUploadUrl) When(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]) *FileServiceClientMockUploadUrlExpectation {
	if mmUploadUrl.mock.funcUploadUrl != nil {
		mmUploadUrl.mock.t.Fatalf("FileServiceClientMock.UploadUrl mock is already set by Set")
	}

	expectation := &FileServiceClientMockUploadUrlExpectation{
		mock:   mmUploadUrl.mock,
		params: &FileServiceClientMockUploadUrlParams{ctx, pp1},
	}
	mmUploadUrl.expectations = append(mmUploadUrl.expectations, expectation)
	return expectation
}

// Then sets up FileServiceClient.UploadUrl return parameters for the expectation previously defined by the When method
func (e *FileServiceClientMockUploadUrlExpectation) Then(pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse], err error) *FileServiceClientMock {
	e.results = &FileServiceClientMockUploadUrlResults{pp2, err}
	return e.mock
}

// UploadUrl implements FileServiceClient
func (mmUploadUrl *FileServiceClientMock) UploadUrl(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceUploadUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceUploadUrlResponse], err error) {
	mm_atomic.AddUint64(&mmUploadUrl.beforeUploadUrlCounter, 1)
	defer mm_atomic.AddUint64(&mmUploadUrl.afterUploadUrlCounter, 1)

	if mmUploadUrl.inspectFuncUploadUrl != nil {
		mmUploadUrl.inspectFuncUploadUrl(ctx, pp1)
	}

	mm_params := &FileServiceClientMockUploadUrlParams{ctx, pp1}

	// Record call args
	mmUploadUrl.UploadUrlMock.mutex.Lock()
	mmUploadUrl.UploadUrlMock.callArgs = append(mmUploadUrl.UploadUrlMock.callArgs, mm_params)
	mmUploadUrl.UploadUrlMock.mutex.Unlock()

	for _, e := range mmUploadUrl.UploadUrlMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmUploadUrl.UploadUrlMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUploadUrl.UploadUrlMock.defaultExpectation.Counter, 1)
		mm_want := mmUploadUrl.UploadUrlMock.defaultExpectation.params
		mm_got := FileServiceClientMockUploadUrlParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUploadUrl.t.Errorf("FileServiceClientMock.UploadUrl got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUploadUrl.UploadUrlMock.defaultExpectation.results
		if mm_results == nil {
			mmUploadUrl.t.Fatal("No results are set for the FileServiceClientMock.UploadUrl")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmUploadUrl.funcUploadUrl != nil {
		return mmUploadUrl.funcUploadUrl(ctx, pp1)
	}
	mmUploadUrl.t.Fatalf("Unexpected call to FileServiceClientMock.UploadUrl. %v %v", ctx, pp1)
	return
}

// UploadUrlAfterCounter returns a count of finished FileServiceClientMock.UploadUrl invocations
func (mmUploadUrl *FileServiceClientMock) UploadUrlAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUploadUrl.afterUploadUrlCounter)
}

// UploadUrlBeforeCounter returns a count of FileServiceClientMock.UploadUrl invocations
func (mmUploadUrl *FileServiceClientMock) UploadUrlBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUploadUrl.beforeUploadUrlCounter)
}

// Calls returns a list of arguments used in each call to FileServiceClientMock.UploadUrl.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUploadUrl *mFileServiceClientMockUploadUrl) Calls() []*FileServiceClientMockUploadUrlParams {
	mmUploadUrl.mutex.RLock()

	argCopy := make([]*FileServiceClientMockUploadUrlParams, len(mmUploadUrl.callArgs))
	copy(argCopy, mmUploadUrl.callArgs)

	mmUploadUrl.mutex.RUnlock()

	return argCopy
}

// MinimockUploadUrlDone returns true if the count of the UploadUrl invocations corresponds
// the number of defined expectations
func (m *FileServiceClientMock) MinimockUploadUrlDone() bool {
	for _, e := range m.UploadUrlMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UploadUrlMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUploadUrlCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUploadUrl != nil && mm_atomic.LoadUint64(&m.afterUploadUrlCounter) < 1 {
		return false
	}
	return true
}

// MinimockUploadUrlInspect logs each unmet expectation
func (m *FileServiceClientMock) MinimockUploadUrlInspect() {
	for _, e := range m.UploadUrlMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileServiceClientMock.UploadUrl with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UploadUrlMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUploadUrlCounter) < 1 {
		if m.UploadUrlMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileServiceClientMock.UploadUrl")
		} else {
			m.t.Errorf("Expected call to FileServiceClientMock.UploadUrl with params: %#v", *m.UploadUrlMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUploadUrl != nil && mm_atomic.LoadUint64(&m.afterUploadUrlCounter) < 1 {
		m.t.Error("Expected call to FileServiceClientMock.UploadUrl")
	}
}

type mFileServiceClientMockVerifyUrl struct {
	mock               *FileServiceClientMock
	defaultExpectation *FileServiceClientMockVerifyUrlExpectation
	expectations       []*FileServiceClientMockVerifyUrlExpectation

	callArgs []*FileServiceClientMockVerifyUrlParams
	mutex    sync.RWMutex
}

// FileServiceClientMockVerifyUrlExpectation specifies expectation struct of the FileServiceClient.VerifyUrl
type FileServiceClientMockVerifyUrlExpectation struct {
	mock    *FileServiceClientMock
	params  *FileServiceClientMockVerifyUrlParams
	results *FileServiceClientMockVerifyUrlResults
	Counter uint64
}

// FileServiceClientMockVerifyUrlParams contains parameters of the FileServiceClient.VerifyUrl
type FileServiceClientMockVerifyUrlParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]
}

// FileServiceClientMockVerifyUrlResults contains results of the FileServiceClient.VerifyUrl
type FileServiceClientMockVerifyUrlResults struct {
	pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse]
	err error
}

// Expect sets up expected params for FileServiceClient.VerifyUrl
func (mmVerifyUrl *mFileServiceClientMockVerifyUrl) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]) *mFileServiceClientMockVerifyUrl {
	if mmVerifyUrl.mock.funcVerifyUrl != nil {
		mmVerifyUrl.mock.t.Fatalf("FileServiceClientMock.VerifyUrl mock is already set by Set")
	}

	if mmVerifyUrl.defaultExpectation == nil {
		mmVerifyUrl.defaultExpectation = &FileServiceClientMockVerifyUrlExpectation{}
	}

	mmVerifyUrl.defaultExpectation.params = &FileServiceClientMockVerifyUrlParams{ctx, pp1}
	for _, e := range mmVerifyUrl.expectations {
		if minimock.Equal(e.params, mmVerifyUrl.defaultExpectation.params) {
			mmVerifyUrl.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVerifyUrl.defaultExpectation.params)
		}
	}

	return mmVerifyUrl
}

// Inspect accepts an inspector function that has same arguments as the FileServiceClient.VerifyUrl
func (mmVerifyUrl *mFileServiceClientMockVerifyUrl) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest])) *mFileServiceClientMockVerifyUrl {
	if mmVerifyUrl.mock.inspectFuncVerifyUrl != nil {
		mmVerifyUrl.mock.t.Fatalf("Inspect function is already set for FileServiceClientMock.VerifyUrl")
	}

	mmVerifyUrl.mock.inspectFuncVerifyUrl = f

	return mmVerifyUrl
}

// Return sets up results that will be returned by FileServiceClient.VerifyUrl
func (mmVerifyUrl *mFileServiceClientMockVerifyUrl) Return(pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse], err error) *FileServiceClientMock {
	if mmVerifyUrl.mock.funcVerifyUrl != nil {
		mmVerifyUrl.mock.t.Fatalf("FileServiceClientMock.VerifyUrl mock is already set by Set")
	}

	if mmVerifyUrl.defaultExpectation == nil {
		mmVerifyUrl.defaultExpectation = &FileServiceClientMockVerifyUrlExpectation{mock: mmVerifyUrl.mock}
	}
	mmVerifyUrl.defaultExpectation.results = &FileServiceClientMockVerifyUrlResults{pp2, err}
	return mmVerifyUrl.mock
}

// Set uses given function f to mock the FileServiceClient.VerifyUrl method
func (mmVerifyUrl *mFileServiceClientMockVerifyUrl) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse], err error)) *FileServiceClientMock {
	if mmVerifyUrl.defaultExpectation != nil {
		mmVerifyUrl.mock.t.Fatalf("Default expectation is already set for the FileServiceClient.VerifyUrl method")
	}

	if len(mmVerifyUrl.expectations) > 0 {
		mmVerifyUrl.mock.t.Fatalf("Some expectations are already set for the FileServiceClient.VerifyUrl method")
	}

	mmVerifyUrl.mock.funcVerifyUrl = f
	return mmVerifyUrl.mock
}

// When sets expectation for the FileServiceClient.VerifyUrl which will trigger the result defined by the following
// Then helper
func (mmVerifyUrl *mFileServiceClientMockVerifyUrl) When(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]) *FileServiceClientMockVerifyUrlExpectation {
	if mmVerifyUrl.mock.funcVerifyUrl != nil {
		mmVerifyUrl.mock.t.Fatalf("FileServiceClientMock.VerifyUrl mock is already set by Set")
	}

	expectation := &FileServiceClientMockVerifyUrlExpectation{
		mock:   mmVerifyUrl.mock,
		params: &FileServiceClientMockVerifyUrlParams{ctx, pp1},
	}
	mmVerifyUrl.expectations = append(mmVerifyUrl.expectations, expectation)
	return expectation
}

// Then sets up FileServiceClient.VerifyUrl return parameters for the expectation previously defined by the When method
func (e *FileServiceClientMockVerifyUrlExpectation) Then(pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse], err error) *FileServiceClientMock {
	e.results = &FileServiceClientMockVerifyUrlResults{pp2, err}
	return e.mock
}

// VerifyUrl implements FileServiceClient
func (mmVerifyUrl *FileServiceClientMock) VerifyUrl(ctx context.Context, pp1 *connect_go.Request[v1.FileServiceVerifyUrlRequest]) (pp2 *connect_go.Response[v1.FileServiceVerifyUrlResponse], err error) {
	mm_atomic.AddUint64(&mmVerifyUrl.beforeVerifyUrlCounter, 1)
	defer mm_atomic.AddUint64(&mmVerifyUrl.afterVerifyUrlCounter, 1)

	if mmVerifyUrl.inspectFuncVerifyUrl != nil {
		mmVerifyUrl.inspectFuncVerifyUrl(ctx, pp1)
	}

	mm_params := &FileServiceClientMockVerifyUrlParams{ctx, pp1}

	// Record call args
	mmVerifyUrl.VerifyUrlMock.mutex.Lock()
	mmVerifyUrl.VerifyUrlMock.callArgs = append(mmVerifyUrl.VerifyUrlMock.callArgs, mm_params)
	mmVerifyUrl.VerifyUrlMock.mutex.Unlock()

	for _, e := range mmVerifyUrl.VerifyUrlMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmVerifyUrl.VerifyUrlMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVerifyUrl.VerifyUrlMock.defaultExpectation.Counter, 1)
		mm_want := mmVerifyUrl.VerifyUrlMock.defaultExpectation.params
		mm_got := FileServiceClientMockVerifyUrlParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVerifyUrl.t.Errorf("FileServiceClientMock.VerifyUrl got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVerifyUrl.VerifyUrlMock.defaultExpectation.results
		if mm_results == nil {
			mmVerifyUrl.t.Fatal("No results are set for the FileServiceClientMock.VerifyUrl")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmVerifyUrl.funcVerifyUrl != nil {
		return mmVerifyUrl.funcVerifyUrl(ctx, pp1)
	}
	mmVerifyUrl.t.Fatalf("Unexpected call to FileServiceClientMock.VerifyUrl. %v %v", ctx, pp1)
	return
}

// VerifyUrlAfterCounter returns a count of finished FileServiceClientMock.VerifyUrl invocations
func (mmVerifyUrl *FileServiceClientMock) VerifyUrlAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerifyUrl.afterVerifyUrlCounter)
}

// VerifyUrlBeforeCounter returns a count of FileServiceClientMock.VerifyUrl invocations
func (mmVerifyUrl *FileServiceClientMock) VerifyUrlBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerifyUrl.beforeVerifyUrlCounter)
}

// Calls returns a list of arguments used in each call to FileServiceClientMock.VerifyUrl.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVerifyUrl *mFileServiceClientMockVerifyUrl) Calls() []*FileServiceClientMockVerifyUrlParams {
	mmVerifyUrl.mutex.RLock()

	argCopy := make([]*FileServiceClientMockVerifyUrlParams, len(mmVerifyUrl.callArgs))
	copy(argCopy, mmVerifyUrl.callArgs)

	mmVerifyUrl.mutex.RUnlock()

	return argCopy
}

// MinimockVerifyUrlDone returns true if the count of the VerifyUrl invocations corresponds
// the number of defined expectations
func (m *FileServiceClientMock) MinimockVerifyUrlDone() bool {
	for _, e := range m.VerifyUrlMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VerifyUrlMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVerifyUrlCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerifyUrl != nil && mm_atomic.LoadUint64(&m.afterVerifyUrlCounter) < 1 {
		return false
	}
	return true
}

// MinimockVerifyUrlInspect logs each unmet expectation
func (m *FileServiceClientMock) MinimockVerifyUrlInspect() {
	for _, e := range m.VerifyUrlMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileServiceClientMock.VerifyUrl with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VerifyUrlMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVerifyUrlCounter) < 1 {
		if m.VerifyUrlMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileServiceClientMock.VerifyUrl")
		} else {
			m.t.Errorf("Expected call to FileServiceClientMock.VerifyUrl with params: %#v", *m.VerifyUrlMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerifyUrl != nil && mm_atomic.LoadUint64(&m.afterVerifyUrlCounter) < 1 {
		m.t.Error("Expected call to FileServiceClientMock.VerifyUrl")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FileServiceClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetInspect()

		m.MinimockPutInspect()

		m.MinimockUploadInspect()

		m.MinimockUploadUrlInspect()

		m.MinimockVerifyUrlInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FileServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FileServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone() &&
		m.MinimockPutDone() &&
		m.MinimockUploadDone() &&
		m.MinimockUploadUrlDone() &&
		m.MinimockVerifyUrlDone()
}
