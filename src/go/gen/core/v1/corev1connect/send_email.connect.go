// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/send_email.proto

package corev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/koblas/grpc-todo/gen/core/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SendEmailServiceName is the fully-qualified name of the SendEmailService service.
	SendEmailServiceName = "core.v1.SendEmailService"
	// SendEmailEventsServiceName is the fully-qualified name of the SendEmailEventsService service.
	SendEmailEventsServiceName = "core.v1.SendEmailEventsService"
)

// SendEmailServiceClient is a client for the core.v1.SendEmailService service.
type SendEmailServiceClient interface {
	RegisterMessage(context.Context, *connect_go.Request[v1.RegisterMessageRequest]) (*connect_go.Response[v1.RegisterMessageResponse], error)
	PasswordChangeMessage(context.Context, *connect_go.Request[v1.PasswordChangeMessageRequest]) (*connect_go.Response[v1.PasswordChangeMessageResponse], error)
	PasswordRecoveryMessage(context.Context, *connect_go.Request[v1.PasswordRecoveryMessageRequest]) (*connect_go.Response[v1.PasswordRecoveryMessageResponse], error)
	InviteUserMessage(context.Context, *connect_go.Request[v1.InviteUserMessageRequest]) (*connect_go.Response[v1.InviteUserMessageResponse], error)
}

// NewSendEmailServiceClient constructs a client for the core.v1.SendEmailService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSendEmailServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SendEmailServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sendEmailServiceClient{
		registerMessage: connect_go.NewClient[v1.RegisterMessageRequest, v1.RegisterMessageResponse](
			httpClient,
			baseURL+"/core.v1.SendEmailService/RegisterMessage",
			opts...,
		),
		passwordChangeMessage: connect_go.NewClient[v1.PasswordChangeMessageRequest, v1.PasswordChangeMessageResponse](
			httpClient,
			baseURL+"/core.v1.SendEmailService/PasswordChangeMessage",
			opts...,
		),
		passwordRecoveryMessage: connect_go.NewClient[v1.PasswordRecoveryMessageRequest, v1.PasswordRecoveryMessageResponse](
			httpClient,
			baseURL+"/core.v1.SendEmailService/PasswordRecoveryMessage",
			opts...,
		),
		inviteUserMessage: connect_go.NewClient[v1.InviteUserMessageRequest, v1.InviteUserMessageResponse](
			httpClient,
			baseURL+"/core.v1.SendEmailService/InviteUserMessage",
			opts...,
		),
	}
}

// sendEmailServiceClient implements SendEmailServiceClient.
type sendEmailServiceClient struct {
	registerMessage         *connect_go.Client[v1.RegisterMessageRequest, v1.RegisterMessageResponse]
	passwordChangeMessage   *connect_go.Client[v1.PasswordChangeMessageRequest, v1.PasswordChangeMessageResponse]
	passwordRecoveryMessage *connect_go.Client[v1.PasswordRecoveryMessageRequest, v1.PasswordRecoveryMessageResponse]
	inviteUserMessage       *connect_go.Client[v1.InviteUserMessageRequest, v1.InviteUserMessageResponse]
}

// RegisterMessage calls core.v1.SendEmailService.RegisterMessage.
func (c *sendEmailServiceClient) RegisterMessage(ctx context.Context, req *connect_go.Request[v1.RegisterMessageRequest]) (*connect_go.Response[v1.RegisterMessageResponse], error) {
	return c.registerMessage.CallUnary(ctx, req)
}

// PasswordChangeMessage calls core.v1.SendEmailService.PasswordChangeMessage.
func (c *sendEmailServiceClient) PasswordChangeMessage(ctx context.Context, req *connect_go.Request[v1.PasswordChangeMessageRequest]) (*connect_go.Response[v1.PasswordChangeMessageResponse], error) {
	return c.passwordChangeMessage.CallUnary(ctx, req)
}

// PasswordRecoveryMessage calls core.v1.SendEmailService.PasswordRecoveryMessage.
func (c *sendEmailServiceClient) PasswordRecoveryMessage(ctx context.Context, req *connect_go.Request[v1.PasswordRecoveryMessageRequest]) (*connect_go.Response[v1.PasswordRecoveryMessageResponse], error) {
	return c.passwordRecoveryMessage.CallUnary(ctx, req)
}

// InviteUserMessage calls core.v1.SendEmailService.InviteUserMessage.
func (c *sendEmailServiceClient) InviteUserMessage(ctx context.Context, req *connect_go.Request[v1.InviteUserMessageRequest]) (*connect_go.Response[v1.InviteUserMessageResponse], error) {
	return c.inviteUserMessage.CallUnary(ctx, req)
}

// SendEmailServiceHandler is an implementation of the core.v1.SendEmailService service.
type SendEmailServiceHandler interface {
	RegisterMessage(context.Context, *connect_go.Request[v1.RegisterMessageRequest]) (*connect_go.Response[v1.RegisterMessageResponse], error)
	PasswordChangeMessage(context.Context, *connect_go.Request[v1.PasswordChangeMessageRequest]) (*connect_go.Response[v1.PasswordChangeMessageResponse], error)
	PasswordRecoveryMessage(context.Context, *connect_go.Request[v1.PasswordRecoveryMessageRequest]) (*connect_go.Response[v1.PasswordRecoveryMessageResponse], error)
	InviteUserMessage(context.Context, *connect_go.Request[v1.InviteUserMessageRequest]) (*connect_go.Response[v1.InviteUserMessageResponse], error)
}

// NewSendEmailServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSendEmailServiceHandler(svc SendEmailServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.SendEmailService/RegisterMessage", connect_go.NewUnaryHandler(
		"/core.v1.SendEmailService/RegisterMessage",
		svc.RegisterMessage,
		opts...,
	))
	mux.Handle("/core.v1.SendEmailService/PasswordChangeMessage", connect_go.NewUnaryHandler(
		"/core.v1.SendEmailService/PasswordChangeMessage",
		svc.PasswordChangeMessage,
		opts...,
	))
	mux.Handle("/core.v1.SendEmailService/PasswordRecoveryMessage", connect_go.NewUnaryHandler(
		"/core.v1.SendEmailService/PasswordRecoveryMessage",
		svc.PasswordRecoveryMessage,
		opts...,
	))
	mux.Handle("/core.v1.SendEmailService/InviteUserMessage", connect_go.NewUnaryHandler(
		"/core.v1.SendEmailService/InviteUserMessage",
		svc.InviteUserMessage,
		opts...,
	))
	return "/core.v1.SendEmailService/", mux
}

// UnimplementedSendEmailServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSendEmailServiceHandler struct{}

func (UnimplementedSendEmailServiceHandler) RegisterMessage(context.Context, *connect_go.Request[v1.RegisterMessageRequest]) (*connect_go.Response[v1.RegisterMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.SendEmailService.RegisterMessage is not implemented"))
}

func (UnimplementedSendEmailServiceHandler) PasswordChangeMessage(context.Context, *connect_go.Request[v1.PasswordChangeMessageRequest]) (*connect_go.Response[v1.PasswordChangeMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.SendEmailService.PasswordChangeMessage is not implemented"))
}

func (UnimplementedSendEmailServiceHandler) PasswordRecoveryMessage(context.Context, *connect_go.Request[v1.PasswordRecoveryMessageRequest]) (*connect_go.Response[v1.PasswordRecoveryMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.SendEmailService.PasswordRecoveryMessage is not implemented"))
}

func (UnimplementedSendEmailServiceHandler) InviteUserMessage(context.Context, *connect_go.Request[v1.InviteUserMessageRequest]) (*connect_go.Response[v1.InviteUserMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.SendEmailService.InviteUserMessage is not implemented"))
}

// SendEmailEventsServiceClient is a client for the core.v1.SendEmailEventsService service.
type SendEmailEventsServiceClient interface {
	// The notification channel
	NotifyEmailSent(context.Context, *connect_go.Request[v1.NotifyEmailSentRequest]) (*connect_go.Response[v1.NotifyEmailSentResponse], error)
}

// NewSendEmailEventsServiceClient constructs a client for the core.v1.SendEmailEventsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSendEmailEventsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SendEmailEventsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sendEmailEventsServiceClient{
		notifyEmailSent: connect_go.NewClient[v1.NotifyEmailSentRequest, v1.NotifyEmailSentResponse](
			httpClient,
			baseURL+"/core.v1.SendEmailEventsService/NotifyEmailSent",
			opts...,
		),
	}
}

// sendEmailEventsServiceClient implements SendEmailEventsServiceClient.
type sendEmailEventsServiceClient struct {
	notifyEmailSent *connect_go.Client[v1.NotifyEmailSentRequest, v1.NotifyEmailSentResponse]
}

// NotifyEmailSent calls core.v1.SendEmailEventsService.NotifyEmailSent.
func (c *sendEmailEventsServiceClient) NotifyEmailSent(ctx context.Context, req *connect_go.Request[v1.NotifyEmailSentRequest]) (*connect_go.Response[v1.NotifyEmailSentResponse], error) {
	return c.notifyEmailSent.CallUnary(ctx, req)
}

// SendEmailEventsServiceHandler is an implementation of the core.v1.SendEmailEventsService service.
type SendEmailEventsServiceHandler interface {
	// The notification channel
	NotifyEmailSent(context.Context, *connect_go.Request[v1.NotifyEmailSentRequest]) (*connect_go.Response[v1.NotifyEmailSentResponse], error)
}

// NewSendEmailEventsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSendEmailEventsServiceHandler(svc SendEmailEventsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.SendEmailEventsService/NotifyEmailSent", connect_go.NewUnaryHandler(
		"/core.v1.SendEmailEventsService/NotifyEmailSent",
		svc.NotifyEmailSent,
		opts...,
	))
	return "/core.v1.SendEmailEventsService/", mux
}

// UnimplementedSendEmailEventsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSendEmailEventsServiceHandler struct{}

func (UnimplementedSendEmailEventsServiceHandler) NotifyEmailSent(context.Context, *connect_go.Request[v1.NotifyEmailSentRequest]) (*connect_go.Response[v1.NotifyEmailSentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.SendEmailEventsService.NotifyEmailSent is not implemented"))
}
