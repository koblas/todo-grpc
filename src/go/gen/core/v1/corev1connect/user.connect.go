// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/user.proto

package corev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/koblas/grpc-todo/gen/core/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "core.v1.UserService"
)

// UserServiceClient is a client for the core.v1.UserService service.
type UserServiceClient interface {
	FindBy(context.Context, *connect_go.Request[v1.FindByRequest]) (*connect_go.Response[v1.FindByResponse], error)
	Create(context.Context, *connect_go.Request[v1.UserServiceCreateRequest]) (*connect_go.Response[v1.UserServiceCreateResponse], error)
	Update(context.Context, *connect_go.Request[v1.UserServiceUpdateRequest]) (*connect_go.Response[v1.UserServiceUpdateResponse], error)
	ComparePassword(context.Context, *connect_go.Request[v1.ComparePasswordRequest]) (*connect_go.Response[v1.ComparePasswordResponse], error)
	AuthAssociate(context.Context, *connect_go.Request[v1.AuthAssociateRequest]) (*connect_go.Response[v1.AuthAssociateResponse], error)
	GetSettings(context.Context, *connect_go.Request[v1.UserServiceGetSettingsRequest]) (*connect_go.Response[v1.UserServiceGetSettingsResponse], error)
	SetSettings(context.Context, *connect_go.Request[v1.UserServiceSetSettingsRequest]) (*connect_go.Response[v1.UserServiceSetSettingsResponse], error)
	// Email address verification
	VerificationVerify(context.Context, *connect_go.Request[v1.VerificationVerifyRequest]) (*connect_go.Response[v1.VerificationVerifyResponse], error)
	// Forgot password flow
	ForgotSend(context.Context, *connect_go.Request[v1.ForgotSendRequest]) (*connect_go.Response[v1.ForgotSendResponse], error)
	ForgotVerify(context.Context, *connect_go.Request[v1.ForgotVerifyRequest]) (*connect_go.Response[v1.ForgotVerifyResponse], error)
	ForgotUpdate(context.Context, *connect_go.Request[v1.ForgotUpdateRequest]) (*connect_go.Response[v1.ForgotUpdateResponse], error)
}

// NewUserServiceClient constructs a client for the core.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		findBy: connect_go.NewClient[v1.FindByRequest, v1.FindByResponse](
			httpClient,
			baseURL+"/core.v1.UserService/FindBy",
			opts...,
		),
		create: connect_go.NewClient[v1.UserServiceCreateRequest, v1.UserServiceCreateResponse](
			httpClient,
			baseURL+"/core.v1.UserService/Create",
			opts...,
		),
		update: connect_go.NewClient[v1.UserServiceUpdateRequest, v1.UserServiceUpdateResponse](
			httpClient,
			baseURL+"/core.v1.UserService/Update",
			opts...,
		),
		comparePassword: connect_go.NewClient[v1.ComparePasswordRequest, v1.ComparePasswordResponse](
			httpClient,
			baseURL+"/core.v1.UserService/ComparePassword",
			opts...,
		),
		authAssociate: connect_go.NewClient[v1.AuthAssociateRequest, v1.AuthAssociateResponse](
			httpClient,
			baseURL+"/core.v1.UserService/AuthAssociate",
			opts...,
		),
		getSettings: connect_go.NewClient[v1.UserServiceGetSettingsRequest, v1.UserServiceGetSettingsResponse](
			httpClient,
			baseURL+"/core.v1.UserService/GetSettings",
			opts...,
		),
		setSettings: connect_go.NewClient[v1.UserServiceSetSettingsRequest, v1.UserServiceSetSettingsResponse](
			httpClient,
			baseURL+"/core.v1.UserService/SetSettings",
			opts...,
		),
		verificationVerify: connect_go.NewClient[v1.VerificationVerifyRequest, v1.VerificationVerifyResponse](
			httpClient,
			baseURL+"/core.v1.UserService/VerificationVerify",
			opts...,
		),
		forgotSend: connect_go.NewClient[v1.ForgotSendRequest, v1.ForgotSendResponse](
			httpClient,
			baseURL+"/core.v1.UserService/ForgotSend",
			opts...,
		),
		forgotVerify: connect_go.NewClient[v1.ForgotVerifyRequest, v1.ForgotVerifyResponse](
			httpClient,
			baseURL+"/core.v1.UserService/ForgotVerify",
			opts...,
		),
		forgotUpdate: connect_go.NewClient[v1.ForgotUpdateRequest, v1.ForgotUpdateResponse](
			httpClient,
			baseURL+"/core.v1.UserService/ForgotUpdate",
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	findBy             *connect_go.Client[v1.FindByRequest, v1.FindByResponse]
	create             *connect_go.Client[v1.UserServiceCreateRequest, v1.UserServiceCreateResponse]
	update             *connect_go.Client[v1.UserServiceUpdateRequest, v1.UserServiceUpdateResponse]
	comparePassword    *connect_go.Client[v1.ComparePasswordRequest, v1.ComparePasswordResponse]
	authAssociate      *connect_go.Client[v1.AuthAssociateRequest, v1.AuthAssociateResponse]
	getSettings        *connect_go.Client[v1.UserServiceGetSettingsRequest, v1.UserServiceGetSettingsResponse]
	setSettings        *connect_go.Client[v1.UserServiceSetSettingsRequest, v1.UserServiceSetSettingsResponse]
	verificationVerify *connect_go.Client[v1.VerificationVerifyRequest, v1.VerificationVerifyResponse]
	forgotSend         *connect_go.Client[v1.ForgotSendRequest, v1.ForgotSendResponse]
	forgotVerify       *connect_go.Client[v1.ForgotVerifyRequest, v1.ForgotVerifyResponse]
	forgotUpdate       *connect_go.Client[v1.ForgotUpdateRequest, v1.ForgotUpdateResponse]
}

// FindBy calls core.v1.UserService.FindBy.
func (c *userServiceClient) FindBy(ctx context.Context, req *connect_go.Request[v1.FindByRequest]) (*connect_go.Response[v1.FindByResponse], error) {
	return c.findBy.CallUnary(ctx, req)
}

// Create calls core.v1.UserService.Create.
func (c *userServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.UserServiceCreateRequest]) (*connect_go.Response[v1.UserServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls core.v1.UserService.Update.
func (c *userServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.UserServiceUpdateRequest]) (*connect_go.Response[v1.UserServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// ComparePassword calls core.v1.UserService.ComparePassword.
func (c *userServiceClient) ComparePassword(ctx context.Context, req *connect_go.Request[v1.ComparePasswordRequest]) (*connect_go.Response[v1.ComparePasswordResponse], error) {
	return c.comparePassword.CallUnary(ctx, req)
}

// AuthAssociate calls core.v1.UserService.AuthAssociate.
func (c *userServiceClient) AuthAssociate(ctx context.Context, req *connect_go.Request[v1.AuthAssociateRequest]) (*connect_go.Response[v1.AuthAssociateResponse], error) {
	return c.authAssociate.CallUnary(ctx, req)
}

// GetSettings calls core.v1.UserService.GetSettings.
func (c *userServiceClient) GetSettings(ctx context.Context, req *connect_go.Request[v1.UserServiceGetSettingsRequest]) (*connect_go.Response[v1.UserServiceGetSettingsResponse], error) {
	return c.getSettings.CallUnary(ctx, req)
}

// SetSettings calls core.v1.UserService.SetSettings.
func (c *userServiceClient) SetSettings(ctx context.Context, req *connect_go.Request[v1.UserServiceSetSettingsRequest]) (*connect_go.Response[v1.UserServiceSetSettingsResponse], error) {
	return c.setSettings.CallUnary(ctx, req)
}

// VerificationVerify calls core.v1.UserService.VerificationVerify.
func (c *userServiceClient) VerificationVerify(ctx context.Context, req *connect_go.Request[v1.VerificationVerifyRequest]) (*connect_go.Response[v1.VerificationVerifyResponse], error) {
	return c.verificationVerify.CallUnary(ctx, req)
}

// ForgotSend calls core.v1.UserService.ForgotSend.
func (c *userServiceClient) ForgotSend(ctx context.Context, req *connect_go.Request[v1.ForgotSendRequest]) (*connect_go.Response[v1.ForgotSendResponse], error) {
	return c.forgotSend.CallUnary(ctx, req)
}

// ForgotVerify calls core.v1.UserService.ForgotVerify.
func (c *userServiceClient) ForgotVerify(ctx context.Context, req *connect_go.Request[v1.ForgotVerifyRequest]) (*connect_go.Response[v1.ForgotVerifyResponse], error) {
	return c.forgotVerify.CallUnary(ctx, req)
}

// ForgotUpdate calls core.v1.UserService.ForgotUpdate.
func (c *userServiceClient) ForgotUpdate(ctx context.Context, req *connect_go.Request[v1.ForgotUpdateRequest]) (*connect_go.Response[v1.ForgotUpdateResponse], error) {
	return c.forgotUpdate.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the core.v1.UserService service.
type UserServiceHandler interface {
	FindBy(context.Context, *connect_go.Request[v1.FindByRequest]) (*connect_go.Response[v1.FindByResponse], error)
	Create(context.Context, *connect_go.Request[v1.UserServiceCreateRequest]) (*connect_go.Response[v1.UserServiceCreateResponse], error)
	Update(context.Context, *connect_go.Request[v1.UserServiceUpdateRequest]) (*connect_go.Response[v1.UserServiceUpdateResponse], error)
	ComparePassword(context.Context, *connect_go.Request[v1.ComparePasswordRequest]) (*connect_go.Response[v1.ComparePasswordResponse], error)
	AuthAssociate(context.Context, *connect_go.Request[v1.AuthAssociateRequest]) (*connect_go.Response[v1.AuthAssociateResponse], error)
	GetSettings(context.Context, *connect_go.Request[v1.UserServiceGetSettingsRequest]) (*connect_go.Response[v1.UserServiceGetSettingsResponse], error)
	SetSettings(context.Context, *connect_go.Request[v1.UserServiceSetSettingsRequest]) (*connect_go.Response[v1.UserServiceSetSettingsResponse], error)
	// Email address verification
	VerificationVerify(context.Context, *connect_go.Request[v1.VerificationVerifyRequest]) (*connect_go.Response[v1.VerificationVerifyResponse], error)
	// Forgot password flow
	ForgotSend(context.Context, *connect_go.Request[v1.ForgotSendRequest]) (*connect_go.Response[v1.ForgotSendResponse], error)
	ForgotVerify(context.Context, *connect_go.Request[v1.ForgotVerifyRequest]) (*connect_go.Response[v1.ForgotVerifyResponse], error)
	ForgotUpdate(context.Context, *connect_go.Request[v1.ForgotUpdateRequest]) (*connect_go.Response[v1.ForgotUpdateResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.UserService/FindBy", connect_go.NewUnaryHandler(
		"/core.v1.UserService/FindBy",
		svc.FindBy,
		opts...,
	))
	mux.Handle("/core.v1.UserService/Create", connect_go.NewUnaryHandler(
		"/core.v1.UserService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/core.v1.UserService/Update", connect_go.NewUnaryHandler(
		"/core.v1.UserService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/core.v1.UserService/ComparePassword", connect_go.NewUnaryHandler(
		"/core.v1.UserService/ComparePassword",
		svc.ComparePassword,
		opts...,
	))
	mux.Handle("/core.v1.UserService/AuthAssociate", connect_go.NewUnaryHandler(
		"/core.v1.UserService/AuthAssociate",
		svc.AuthAssociate,
		opts...,
	))
	mux.Handle("/core.v1.UserService/GetSettings", connect_go.NewUnaryHandler(
		"/core.v1.UserService/GetSettings",
		svc.GetSettings,
		opts...,
	))
	mux.Handle("/core.v1.UserService/SetSettings", connect_go.NewUnaryHandler(
		"/core.v1.UserService/SetSettings",
		svc.SetSettings,
		opts...,
	))
	mux.Handle("/core.v1.UserService/VerificationVerify", connect_go.NewUnaryHandler(
		"/core.v1.UserService/VerificationVerify",
		svc.VerificationVerify,
		opts...,
	))
	mux.Handle("/core.v1.UserService/ForgotSend", connect_go.NewUnaryHandler(
		"/core.v1.UserService/ForgotSend",
		svc.ForgotSend,
		opts...,
	))
	mux.Handle("/core.v1.UserService/ForgotVerify", connect_go.NewUnaryHandler(
		"/core.v1.UserService/ForgotVerify",
		svc.ForgotVerify,
		opts...,
	))
	mux.Handle("/core.v1.UserService/ForgotUpdate", connect_go.NewUnaryHandler(
		"/core.v1.UserService/ForgotUpdate",
		svc.ForgotUpdate,
		opts...,
	))
	return "/core.v1.UserService/", mux
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) FindBy(context.Context, *connect_go.Request[v1.FindByRequest]) (*connect_go.Response[v1.FindByResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.FindBy is not implemented"))
}

func (UnimplementedUserServiceHandler) Create(context.Context, *connect_go.Request[v1.UserServiceCreateRequest]) (*connect_go.Response[v1.UserServiceCreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.Create is not implemented"))
}

func (UnimplementedUserServiceHandler) Update(context.Context, *connect_go.Request[v1.UserServiceUpdateRequest]) (*connect_go.Response[v1.UserServiceUpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.Update is not implemented"))
}

func (UnimplementedUserServiceHandler) ComparePassword(context.Context, *connect_go.Request[v1.ComparePasswordRequest]) (*connect_go.Response[v1.ComparePasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.ComparePassword is not implemented"))
}

func (UnimplementedUserServiceHandler) AuthAssociate(context.Context, *connect_go.Request[v1.AuthAssociateRequest]) (*connect_go.Response[v1.AuthAssociateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.AuthAssociate is not implemented"))
}

func (UnimplementedUserServiceHandler) GetSettings(context.Context, *connect_go.Request[v1.UserServiceGetSettingsRequest]) (*connect_go.Response[v1.UserServiceGetSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.GetSettings is not implemented"))
}

func (UnimplementedUserServiceHandler) SetSettings(context.Context, *connect_go.Request[v1.UserServiceSetSettingsRequest]) (*connect_go.Response[v1.UserServiceSetSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.SetSettings is not implemented"))
}

func (UnimplementedUserServiceHandler) VerificationVerify(context.Context, *connect_go.Request[v1.VerificationVerifyRequest]) (*connect_go.Response[v1.VerificationVerifyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.VerificationVerify is not implemented"))
}

func (UnimplementedUserServiceHandler) ForgotSend(context.Context, *connect_go.Request[v1.ForgotSendRequest]) (*connect_go.Response[v1.ForgotSendResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.ForgotSend is not implemented"))
}

func (UnimplementedUserServiceHandler) ForgotVerify(context.Context, *connect_go.Request[v1.ForgotVerifyRequest]) (*connect_go.Response[v1.ForgotVerifyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.ForgotVerify is not implemented"))
}

func (UnimplementedUserServiceHandler) ForgotUpdate(context.Context, *connect_go.Request[v1.ForgotUpdateRequest]) (*connect_go.Response[v1.ForgotUpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.UserService.ForgotUpdate is not implemented"))
}
