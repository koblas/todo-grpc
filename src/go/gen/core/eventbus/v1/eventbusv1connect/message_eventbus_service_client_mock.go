package eventbusv1connect

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/koblas/grpc-todo/gen/core/eventbus/v1/eventbusv1connect.MessageEventbusServiceClient -o ./message_eventbus_service_client_mock.go -n MessageEventbusServiceClientMock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	connect_go "github.com/bufbuild/connect-go"
	"github.com/gojuno/minimock/v3"
	v11 "github.com/koblas/grpc-todo/gen/core/eventbus/v1"
	v12 "github.com/koblas/grpc-todo/gen/core/message/v1"
)

// MessageEventbusServiceClientMock implements MessageEventbusServiceClient
type MessageEventbusServiceClientMock struct {
	t minimock.Tester

	funcChange          func(ctx context.Context, pp1 *connect_go.Request[v12.MessageChangeEvent]) (pp2 *connect_go.Response[v11.MessageEventbusServiceChangeResponse], err error)
	inspectFuncChange   func(ctx context.Context, pp1 *connect_go.Request[v12.MessageChangeEvent])
	afterChangeCounter  uint64
	beforeChangeCounter uint64
	ChangeMock          mMessageEventbusServiceClientMockChange
}

// NewMessageEventbusServiceClientMock returns a mock for MessageEventbusServiceClient
func NewMessageEventbusServiceClientMock(t minimock.Tester) *MessageEventbusServiceClientMock {
	m := &MessageEventbusServiceClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ChangeMock = mMessageEventbusServiceClientMockChange{mock: m}
	m.ChangeMock.callArgs = []*MessageEventbusServiceClientMockChangeParams{}

	return m
}

type mMessageEventbusServiceClientMockChange struct {
	mock               *MessageEventbusServiceClientMock
	defaultExpectation *MessageEventbusServiceClientMockChangeExpectation
	expectations       []*MessageEventbusServiceClientMockChangeExpectation

	callArgs []*MessageEventbusServiceClientMockChangeParams
	mutex    sync.RWMutex
}

// MessageEventbusServiceClientMockChangeExpectation specifies expectation struct of the MessageEventbusServiceClient.Change
type MessageEventbusServiceClientMockChangeExpectation struct {
	mock    *MessageEventbusServiceClientMock
	params  *MessageEventbusServiceClientMockChangeParams
	results *MessageEventbusServiceClientMockChangeResults
	Counter uint64
}

// MessageEventbusServiceClientMockChangeParams contains parameters of the MessageEventbusServiceClient.Change
type MessageEventbusServiceClientMockChangeParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v12.MessageChangeEvent]
}

// MessageEventbusServiceClientMockChangeResults contains results of the MessageEventbusServiceClient.Change
type MessageEventbusServiceClientMockChangeResults struct {
	pp2 *connect_go.Response[v11.MessageEventbusServiceChangeResponse]
	err error
}

// Expect sets up expected params for MessageEventbusServiceClient.Change
func (mmChange *mMessageEventbusServiceClientMockChange) Expect(ctx context.Context, pp1 *connect_go.Request[v12.MessageChangeEvent]) *mMessageEventbusServiceClientMockChange {
	if mmChange.mock.funcChange != nil {
		mmChange.mock.t.Fatalf("MessageEventbusServiceClientMock.Change mock is already set by Set")
	}

	if mmChange.defaultExpectation == nil {
		mmChange.defaultExpectation = &MessageEventbusServiceClientMockChangeExpectation{}
	}

	mmChange.defaultExpectation.params = &MessageEventbusServiceClientMockChangeParams{ctx, pp1}
	for _, e := range mmChange.expectations {
		if minimock.Equal(e.params, mmChange.defaultExpectation.params) {
			mmChange.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmChange.defaultExpectation.params)
		}
	}

	return mmChange
}

// Inspect accepts an inspector function that has same arguments as the MessageEventbusServiceClient.Change
func (mmChange *mMessageEventbusServiceClientMockChange) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v12.MessageChangeEvent])) *mMessageEventbusServiceClientMockChange {
	if mmChange.mock.inspectFuncChange != nil {
		mmChange.mock.t.Fatalf("Inspect function is already set for MessageEventbusServiceClientMock.Change")
	}

	mmChange.mock.inspectFuncChange = f

	return mmChange
}

// Return sets up results that will be returned by MessageEventbusServiceClient.Change
func (mmChange *mMessageEventbusServiceClientMockChange) Return(pp2 *connect_go.Response[v11.MessageEventbusServiceChangeResponse], err error) *MessageEventbusServiceClientMock {
	if mmChange.mock.funcChange != nil {
		mmChange.mock.t.Fatalf("MessageEventbusServiceClientMock.Change mock is already set by Set")
	}

	if mmChange.defaultExpectation == nil {
		mmChange.defaultExpectation = &MessageEventbusServiceClientMockChangeExpectation{mock: mmChange.mock}
	}
	mmChange.defaultExpectation.results = &MessageEventbusServiceClientMockChangeResults{pp2, err}
	return mmChange.mock
}

// Set uses given function f to mock the MessageEventbusServiceClient.Change method
func (mmChange *mMessageEventbusServiceClientMockChange) Set(f func(ctx context.Context, pp1 *connect_go.Request[v12.MessageChangeEvent]) (pp2 *connect_go.Response[v11.MessageEventbusServiceChangeResponse], err error)) *MessageEventbusServiceClientMock {
	if mmChange.defaultExpectation != nil {
		mmChange.mock.t.Fatalf("Default expectation is already set for the MessageEventbusServiceClient.Change method")
	}

	if len(mmChange.expectations) > 0 {
		mmChange.mock.t.Fatalf("Some expectations are already set for the MessageEventbusServiceClient.Change method")
	}

	mmChange.mock.funcChange = f
	return mmChange.mock
}

// When sets expectation for the MessageEventbusServiceClient.Change which will trigger the result defined by the following
// Then helper
func (mmChange *mMessageEventbusServiceClientMockChange) When(ctx context.Context, pp1 *connect_go.Request[v12.MessageChangeEvent]) *MessageEventbusServiceClientMockChangeExpectation {
	if mmChange.mock.funcChange != nil {
		mmChange.mock.t.Fatalf("MessageEventbusServiceClientMock.Change mock is already set by Set")
	}

	expectation := &MessageEventbusServiceClientMockChangeExpectation{
		mock:   mmChange.mock,
		params: &MessageEventbusServiceClientMockChangeParams{ctx, pp1},
	}
	mmChange.expectations = append(mmChange.expectations, expectation)
	return expectation
}

// Then sets up MessageEventbusServiceClient.Change return parameters for the expectation previously defined by the When method
func (e *MessageEventbusServiceClientMockChangeExpectation) Then(pp2 *connect_go.Response[v11.MessageEventbusServiceChangeResponse], err error) *MessageEventbusServiceClientMock {
	e.results = &MessageEventbusServiceClientMockChangeResults{pp2, err}
	return e.mock
}

// Change implements MessageEventbusServiceClient
func (mmChange *MessageEventbusServiceClientMock) Change(ctx context.Context, pp1 *connect_go.Request[v12.MessageChangeEvent]) (pp2 *connect_go.Response[v11.MessageEventbusServiceChangeResponse], err error) {
	mm_atomic.AddUint64(&mmChange.beforeChangeCounter, 1)
	defer mm_atomic.AddUint64(&mmChange.afterChangeCounter, 1)

	if mmChange.inspectFuncChange != nil {
		mmChange.inspectFuncChange(ctx, pp1)
	}

	mm_params := &MessageEventbusServiceClientMockChangeParams{ctx, pp1}

	// Record call args
	mmChange.ChangeMock.mutex.Lock()
	mmChange.ChangeMock.callArgs = append(mmChange.ChangeMock.callArgs, mm_params)
	mmChange.ChangeMock.mutex.Unlock()

	for _, e := range mmChange.ChangeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmChange.ChangeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChange.ChangeMock.defaultExpectation.Counter, 1)
		mm_want := mmChange.ChangeMock.defaultExpectation.params
		mm_got := MessageEventbusServiceClientMockChangeParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmChange.t.Errorf("MessageEventbusServiceClientMock.Change got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmChange.ChangeMock.defaultExpectation.results
		if mm_results == nil {
			mmChange.t.Fatal("No results are set for the MessageEventbusServiceClientMock.Change")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmChange.funcChange != nil {
		return mmChange.funcChange(ctx, pp1)
	}
	mmChange.t.Fatalf("Unexpected call to MessageEventbusServiceClientMock.Change. %v %v", ctx, pp1)
	return
}

// ChangeAfterCounter returns a count of finished MessageEventbusServiceClientMock.Change invocations
func (mmChange *MessageEventbusServiceClientMock) ChangeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChange.afterChangeCounter)
}

// ChangeBeforeCounter returns a count of MessageEventbusServiceClientMock.Change invocations
func (mmChange *MessageEventbusServiceClientMock) ChangeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChange.beforeChangeCounter)
}

// Calls returns a list of arguments used in each call to MessageEventbusServiceClientMock.Change.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmChange *mMessageEventbusServiceClientMockChange) Calls() []*MessageEventbusServiceClientMockChangeParams {
	mmChange.mutex.RLock()

	argCopy := make([]*MessageEventbusServiceClientMockChangeParams, len(mmChange.callArgs))
	copy(argCopy, mmChange.callArgs)

	mmChange.mutex.RUnlock()

	return argCopy
}

// MinimockChangeDone returns true if the count of the Change invocations corresponds
// the number of defined expectations
func (m *MessageEventbusServiceClientMock) MinimockChangeDone() bool {
	for _, e := range m.ChangeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ChangeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterChangeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChange != nil && mm_atomic.LoadUint64(&m.afterChangeCounter) < 1 {
		return false
	}
	return true
}

// MinimockChangeInspect logs each unmet expectation
func (m *MessageEventbusServiceClientMock) MinimockChangeInspect() {
	for _, e := range m.ChangeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessageEventbusServiceClientMock.Change with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ChangeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterChangeCounter) < 1 {
		if m.ChangeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessageEventbusServiceClientMock.Change")
		} else {
			m.t.Errorf("Expected call to MessageEventbusServiceClientMock.Change with params: %#v", *m.ChangeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChange != nil && mm_atomic.LoadUint64(&m.afterChangeCounter) < 1 {
		m.t.Error("Expected call to MessageEventbusServiceClientMock.Change")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MessageEventbusServiceClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockChangeInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MessageEventbusServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MessageEventbusServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockChangeDone()
}
