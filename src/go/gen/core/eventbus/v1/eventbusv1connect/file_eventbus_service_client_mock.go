package eventbusv1connect

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/koblas/grpc-todo/gen/core/eventbus/v1/eventbusv1connect.FileEventbusServiceClient -o ./file_eventbus_service_client_mock.go -n FileEventbusServiceClientMock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	connect_go "github.com/bufbuild/connect-go"
	"github.com/gojuno/minimock/v3"
	v11 "github.com/koblas/grpc-todo/gen/core/eventbus/v1"
	v14 "github.com/koblas/grpc-todo/gen/core/file/v1"
)

// FileEventbusServiceClientMock implements FileEventbusServiceClient
type FileEventbusServiceClientMock struct {
	t minimock.Tester

	funcFileComplete          func(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceCompleteEvent]) (pp2 *connect_go.Response[v11.FileEventbusFileCompleteResponse], err error)
	inspectFuncFileComplete   func(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceCompleteEvent])
	afterFileCompleteCounter  uint64
	beforeFileCompleteCounter uint64
	FileCompleteMock          mFileEventbusServiceClientMockFileComplete

	funcFileUploaded          func(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceUploadEvent]) (pp2 *connect_go.Response[v11.FileEventbusFileUploadedResponse], err error)
	inspectFuncFileUploaded   func(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceUploadEvent])
	afterFileUploadedCounter  uint64
	beforeFileUploadedCounter uint64
	FileUploadedMock          mFileEventbusServiceClientMockFileUploaded
}

// NewFileEventbusServiceClientMock returns a mock for FileEventbusServiceClient
func NewFileEventbusServiceClientMock(t minimock.Tester) *FileEventbusServiceClientMock {
	m := &FileEventbusServiceClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FileCompleteMock = mFileEventbusServiceClientMockFileComplete{mock: m}
	m.FileCompleteMock.callArgs = []*FileEventbusServiceClientMockFileCompleteParams{}

	m.FileUploadedMock = mFileEventbusServiceClientMockFileUploaded{mock: m}
	m.FileUploadedMock.callArgs = []*FileEventbusServiceClientMockFileUploadedParams{}

	return m
}

type mFileEventbusServiceClientMockFileComplete struct {
	mock               *FileEventbusServiceClientMock
	defaultExpectation *FileEventbusServiceClientMockFileCompleteExpectation
	expectations       []*FileEventbusServiceClientMockFileCompleteExpectation

	callArgs []*FileEventbusServiceClientMockFileCompleteParams
	mutex    sync.RWMutex
}

// FileEventbusServiceClientMockFileCompleteExpectation specifies expectation struct of the FileEventbusServiceClient.FileComplete
type FileEventbusServiceClientMockFileCompleteExpectation struct {
	mock    *FileEventbusServiceClientMock
	params  *FileEventbusServiceClientMockFileCompleteParams
	results *FileEventbusServiceClientMockFileCompleteResults
	Counter uint64
}

// FileEventbusServiceClientMockFileCompleteParams contains parameters of the FileEventbusServiceClient.FileComplete
type FileEventbusServiceClientMockFileCompleteParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v14.FileServiceCompleteEvent]
}

// FileEventbusServiceClientMockFileCompleteResults contains results of the FileEventbusServiceClient.FileComplete
type FileEventbusServiceClientMockFileCompleteResults struct {
	pp2 *connect_go.Response[v11.FileEventbusFileCompleteResponse]
	err error
}

// Expect sets up expected params for FileEventbusServiceClient.FileComplete
func (mmFileComplete *mFileEventbusServiceClientMockFileComplete) Expect(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceCompleteEvent]) *mFileEventbusServiceClientMockFileComplete {
	if mmFileComplete.mock.funcFileComplete != nil {
		mmFileComplete.mock.t.Fatalf("FileEventbusServiceClientMock.FileComplete mock is already set by Set")
	}

	if mmFileComplete.defaultExpectation == nil {
		mmFileComplete.defaultExpectation = &FileEventbusServiceClientMockFileCompleteExpectation{}
	}

	mmFileComplete.defaultExpectation.params = &FileEventbusServiceClientMockFileCompleteParams{ctx, pp1}
	for _, e := range mmFileComplete.expectations {
		if minimock.Equal(e.params, mmFileComplete.defaultExpectation.params) {
			mmFileComplete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFileComplete.defaultExpectation.params)
		}
	}

	return mmFileComplete
}

// Inspect accepts an inspector function that has same arguments as the FileEventbusServiceClient.FileComplete
func (mmFileComplete *mFileEventbusServiceClientMockFileComplete) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceCompleteEvent])) *mFileEventbusServiceClientMockFileComplete {
	if mmFileComplete.mock.inspectFuncFileComplete != nil {
		mmFileComplete.mock.t.Fatalf("Inspect function is already set for FileEventbusServiceClientMock.FileComplete")
	}

	mmFileComplete.mock.inspectFuncFileComplete = f

	return mmFileComplete
}

// Return sets up results that will be returned by FileEventbusServiceClient.FileComplete
func (mmFileComplete *mFileEventbusServiceClientMockFileComplete) Return(pp2 *connect_go.Response[v11.FileEventbusFileCompleteResponse], err error) *FileEventbusServiceClientMock {
	if mmFileComplete.mock.funcFileComplete != nil {
		mmFileComplete.mock.t.Fatalf("FileEventbusServiceClientMock.FileComplete mock is already set by Set")
	}

	if mmFileComplete.defaultExpectation == nil {
		mmFileComplete.defaultExpectation = &FileEventbusServiceClientMockFileCompleteExpectation{mock: mmFileComplete.mock}
	}
	mmFileComplete.defaultExpectation.results = &FileEventbusServiceClientMockFileCompleteResults{pp2, err}
	return mmFileComplete.mock
}

// Set uses given function f to mock the FileEventbusServiceClient.FileComplete method
func (mmFileComplete *mFileEventbusServiceClientMockFileComplete) Set(f func(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceCompleteEvent]) (pp2 *connect_go.Response[v11.FileEventbusFileCompleteResponse], err error)) *FileEventbusServiceClientMock {
	if mmFileComplete.defaultExpectation != nil {
		mmFileComplete.mock.t.Fatalf("Default expectation is already set for the FileEventbusServiceClient.FileComplete method")
	}

	if len(mmFileComplete.expectations) > 0 {
		mmFileComplete.mock.t.Fatalf("Some expectations are already set for the FileEventbusServiceClient.FileComplete method")
	}

	mmFileComplete.mock.funcFileComplete = f
	return mmFileComplete.mock
}

// When sets expectation for the FileEventbusServiceClient.FileComplete which will trigger the result defined by the following
// Then helper
func (mmFileComplete *mFileEventbusServiceClientMockFileComplete) When(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceCompleteEvent]) *FileEventbusServiceClientMockFileCompleteExpectation {
	if mmFileComplete.mock.funcFileComplete != nil {
		mmFileComplete.mock.t.Fatalf("FileEventbusServiceClientMock.FileComplete mock is already set by Set")
	}

	expectation := &FileEventbusServiceClientMockFileCompleteExpectation{
		mock:   mmFileComplete.mock,
		params: &FileEventbusServiceClientMockFileCompleteParams{ctx, pp1},
	}
	mmFileComplete.expectations = append(mmFileComplete.expectations, expectation)
	return expectation
}

// Then sets up FileEventbusServiceClient.FileComplete return parameters for the expectation previously defined by the When method
func (e *FileEventbusServiceClientMockFileCompleteExpectation) Then(pp2 *connect_go.Response[v11.FileEventbusFileCompleteResponse], err error) *FileEventbusServiceClientMock {
	e.results = &FileEventbusServiceClientMockFileCompleteResults{pp2, err}
	return e.mock
}

// FileComplete implements FileEventbusServiceClient
func (mmFileComplete *FileEventbusServiceClientMock) FileComplete(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceCompleteEvent]) (pp2 *connect_go.Response[v11.FileEventbusFileCompleteResponse], err error) {
	mm_atomic.AddUint64(&mmFileComplete.beforeFileCompleteCounter, 1)
	defer mm_atomic.AddUint64(&mmFileComplete.afterFileCompleteCounter, 1)

	if mmFileComplete.inspectFuncFileComplete != nil {
		mmFileComplete.inspectFuncFileComplete(ctx, pp1)
	}

	mm_params := &FileEventbusServiceClientMockFileCompleteParams{ctx, pp1}

	// Record call args
	mmFileComplete.FileCompleteMock.mutex.Lock()
	mmFileComplete.FileCompleteMock.callArgs = append(mmFileComplete.FileCompleteMock.callArgs, mm_params)
	mmFileComplete.FileCompleteMock.mutex.Unlock()

	for _, e := range mmFileComplete.FileCompleteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmFileComplete.FileCompleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFileComplete.FileCompleteMock.defaultExpectation.Counter, 1)
		mm_want := mmFileComplete.FileCompleteMock.defaultExpectation.params
		mm_got := FileEventbusServiceClientMockFileCompleteParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFileComplete.t.Errorf("FileEventbusServiceClientMock.FileComplete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFileComplete.FileCompleteMock.defaultExpectation.results
		if mm_results == nil {
			mmFileComplete.t.Fatal("No results are set for the FileEventbusServiceClientMock.FileComplete")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmFileComplete.funcFileComplete != nil {
		return mmFileComplete.funcFileComplete(ctx, pp1)
	}
	mmFileComplete.t.Fatalf("Unexpected call to FileEventbusServiceClientMock.FileComplete. %v %v", ctx, pp1)
	return
}

// FileCompleteAfterCounter returns a count of finished FileEventbusServiceClientMock.FileComplete invocations
func (mmFileComplete *FileEventbusServiceClientMock) FileCompleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFileComplete.afterFileCompleteCounter)
}

// FileCompleteBeforeCounter returns a count of FileEventbusServiceClientMock.FileComplete invocations
func (mmFileComplete *FileEventbusServiceClientMock) FileCompleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFileComplete.beforeFileCompleteCounter)
}

// Calls returns a list of arguments used in each call to FileEventbusServiceClientMock.FileComplete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFileComplete *mFileEventbusServiceClientMockFileComplete) Calls() []*FileEventbusServiceClientMockFileCompleteParams {
	mmFileComplete.mutex.RLock()

	argCopy := make([]*FileEventbusServiceClientMockFileCompleteParams, len(mmFileComplete.callArgs))
	copy(argCopy, mmFileComplete.callArgs)

	mmFileComplete.mutex.RUnlock()

	return argCopy
}

// MinimockFileCompleteDone returns true if the count of the FileComplete invocations corresponds
// the number of defined expectations
func (m *FileEventbusServiceClientMock) MinimockFileCompleteDone() bool {
	for _, e := range m.FileCompleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FileCompleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFileCompleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFileComplete != nil && mm_atomic.LoadUint64(&m.afterFileCompleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockFileCompleteInspect logs each unmet expectation
func (m *FileEventbusServiceClientMock) MinimockFileCompleteInspect() {
	for _, e := range m.FileCompleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileEventbusServiceClientMock.FileComplete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FileCompleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFileCompleteCounter) < 1 {
		if m.FileCompleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileEventbusServiceClientMock.FileComplete")
		} else {
			m.t.Errorf("Expected call to FileEventbusServiceClientMock.FileComplete with params: %#v", *m.FileCompleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFileComplete != nil && mm_atomic.LoadUint64(&m.afterFileCompleteCounter) < 1 {
		m.t.Error("Expected call to FileEventbusServiceClientMock.FileComplete")
	}
}

type mFileEventbusServiceClientMockFileUploaded struct {
	mock               *FileEventbusServiceClientMock
	defaultExpectation *FileEventbusServiceClientMockFileUploadedExpectation
	expectations       []*FileEventbusServiceClientMockFileUploadedExpectation

	callArgs []*FileEventbusServiceClientMockFileUploadedParams
	mutex    sync.RWMutex
}

// FileEventbusServiceClientMockFileUploadedExpectation specifies expectation struct of the FileEventbusServiceClient.FileUploaded
type FileEventbusServiceClientMockFileUploadedExpectation struct {
	mock    *FileEventbusServiceClientMock
	params  *FileEventbusServiceClientMockFileUploadedParams
	results *FileEventbusServiceClientMockFileUploadedResults
	Counter uint64
}

// FileEventbusServiceClientMockFileUploadedParams contains parameters of the FileEventbusServiceClient.FileUploaded
type FileEventbusServiceClientMockFileUploadedParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v14.FileServiceUploadEvent]
}

// FileEventbusServiceClientMockFileUploadedResults contains results of the FileEventbusServiceClient.FileUploaded
type FileEventbusServiceClientMockFileUploadedResults struct {
	pp2 *connect_go.Response[v11.FileEventbusFileUploadedResponse]
	err error
}

// Expect sets up expected params for FileEventbusServiceClient.FileUploaded
func (mmFileUploaded *mFileEventbusServiceClientMockFileUploaded) Expect(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceUploadEvent]) *mFileEventbusServiceClientMockFileUploaded {
	if mmFileUploaded.mock.funcFileUploaded != nil {
		mmFileUploaded.mock.t.Fatalf("FileEventbusServiceClientMock.FileUploaded mock is already set by Set")
	}

	if mmFileUploaded.defaultExpectation == nil {
		mmFileUploaded.defaultExpectation = &FileEventbusServiceClientMockFileUploadedExpectation{}
	}

	mmFileUploaded.defaultExpectation.params = &FileEventbusServiceClientMockFileUploadedParams{ctx, pp1}
	for _, e := range mmFileUploaded.expectations {
		if minimock.Equal(e.params, mmFileUploaded.defaultExpectation.params) {
			mmFileUploaded.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFileUploaded.defaultExpectation.params)
		}
	}

	return mmFileUploaded
}

// Inspect accepts an inspector function that has same arguments as the FileEventbusServiceClient.FileUploaded
func (mmFileUploaded *mFileEventbusServiceClientMockFileUploaded) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceUploadEvent])) *mFileEventbusServiceClientMockFileUploaded {
	if mmFileUploaded.mock.inspectFuncFileUploaded != nil {
		mmFileUploaded.mock.t.Fatalf("Inspect function is already set for FileEventbusServiceClientMock.FileUploaded")
	}

	mmFileUploaded.mock.inspectFuncFileUploaded = f

	return mmFileUploaded
}

// Return sets up results that will be returned by FileEventbusServiceClient.FileUploaded
func (mmFileUploaded *mFileEventbusServiceClientMockFileUploaded) Return(pp2 *connect_go.Response[v11.FileEventbusFileUploadedResponse], err error) *FileEventbusServiceClientMock {
	if mmFileUploaded.mock.funcFileUploaded != nil {
		mmFileUploaded.mock.t.Fatalf("FileEventbusServiceClientMock.FileUploaded mock is already set by Set")
	}

	if mmFileUploaded.defaultExpectation == nil {
		mmFileUploaded.defaultExpectation = &FileEventbusServiceClientMockFileUploadedExpectation{mock: mmFileUploaded.mock}
	}
	mmFileUploaded.defaultExpectation.results = &FileEventbusServiceClientMockFileUploadedResults{pp2, err}
	return mmFileUploaded.mock
}

// Set uses given function f to mock the FileEventbusServiceClient.FileUploaded method
func (mmFileUploaded *mFileEventbusServiceClientMockFileUploaded) Set(f func(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceUploadEvent]) (pp2 *connect_go.Response[v11.FileEventbusFileUploadedResponse], err error)) *FileEventbusServiceClientMock {
	if mmFileUploaded.defaultExpectation != nil {
		mmFileUploaded.mock.t.Fatalf("Default expectation is already set for the FileEventbusServiceClient.FileUploaded method")
	}

	if len(mmFileUploaded.expectations) > 0 {
		mmFileUploaded.mock.t.Fatalf("Some expectations are already set for the FileEventbusServiceClient.FileUploaded method")
	}

	mmFileUploaded.mock.funcFileUploaded = f
	return mmFileUploaded.mock
}

// When sets expectation for the FileEventbusServiceClient.FileUploaded which will trigger the result defined by the following
// Then helper
func (mmFileUploaded *mFileEventbusServiceClientMockFileUploaded) When(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceUploadEvent]) *FileEventbusServiceClientMockFileUploadedExpectation {
	if mmFileUploaded.mock.funcFileUploaded != nil {
		mmFileUploaded.mock.t.Fatalf("FileEventbusServiceClientMock.FileUploaded mock is already set by Set")
	}

	expectation := &FileEventbusServiceClientMockFileUploadedExpectation{
		mock:   mmFileUploaded.mock,
		params: &FileEventbusServiceClientMockFileUploadedParams{ctx, pp1},
	}
	mmFileUploaded.expectations = append(mmFileUploaded.expectations, expectation)
	return expectation
}

// Then sets up FileEventbusServiceClient.FileUploaded return parameters for the expectation previously defined by the When method
func (e *FileEventbusServiceClientMockFileUploadedExpectation) Then(pp2 *connect_go.Response[v11.FileEventbusFileUploadedResponse], err error) *FileEventbusServiceClientMock {
	e.results = &FileEventbusServiceClientMockFileUploadedResults{pp2, err}
	return e.mock
}

// FileUploaded implements FileEventbusServiceClient
func (mmFileUploaded *FileEventbusServiceClientMock) FileUploaded(ctx context.Context, pp1 *connect_go.Request[v14.FileServiceUploadEvent]) (pp2 *connect_go.Response[v11.FileEventbusFileUploadedResponse], err error) {
	mm_atomic.AddUint64(&mmFileUploaded.beforeFileUploadedCounter, 1)
	defer mm_atomic.AddUint64(&mmFileUploaded.afterFileUploadedCounter, 1)

	if mmFileUploaded.inspectFuncFileUploaded != nil {
		mmFileUploaded.inspectFuncFileUploaded(ctx, pp1)
	}

	mm_params := &FileEventbusServiceClientMockFileUploadedParams{ctx, pp1}

	// Record call args
	mmFileUploaded.FileUploadedMock.mutex.Lock()
	mmFileUploaded.FileUploadedMock.callArgs = append(mmFileUploaded.FileUploadedMock.callArgs, mm_params)
	mmFileUploaded.FileUploadedMock.mutex.Unlock()

	for _, e := range mmFileUploaded.FileUploadedMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmFileUploaded.FileUploadedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFileUploaded.FileUploadedMock.defaultExpectation.Counter, 1)
		mm_want := mmFileUploaded.FileUploadedMock.defaultExpectation.params
		mm_got := FileEventbusServiceClientMockFileUploadedParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFileUploaded.t.Errorf("FileEventbusServiceClientMock.FileUploaded got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFileUploaded.FileUploadedMock.defaultExpectation.results
		if mm_results == nil {
			mmFileUploaded.t.Fatal("No results are set for the FileEventbusServiceClientMock.FileUploaded")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmFileUploaded.funcFileUploaded != nil {
		return mmFileUploaded.funcFileUploaded(ctx, pp1)
	}
	mmFileUploaded.t.Fatalf("Unexpected call to FileEventbusServiceClientMock.FileUploaded. %v %v", ctx, pp1)
	return
}

// FileUploadedAfterCounter returns a count of finished FileEventbusServiceClientMock.FileUploaded invocations
func (mmFileUploaded *FileEventbusServiceClientMock) FileUploadedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFileUploaded.afterFileUploadedCounter)
}

// FileUploadedBeforeCounter returns a count of FileEventbusServiceClientMock.FileUploaded invocations
func (mmFileUploaded *FileEventbusServiceClientMock) FileUploadedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFileUploaded.beforeFileUploadedCounter)
}

// Calls returns a list of arguments used in each call to FileEventbusServiceClientMock.FileUploaded.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFileUploaded *mFileEventbusServiceClientMockFileUploaded) Calls() []*FileEventbusServiceClientMockFileUploadedParams {
	mmFileUploaded.mutex.RLock()

	argCopy := make([]*FileEventbusServiceClientMockFileUploadedParams, len(mmFileUploaded.callArgs))
	copy(argCopy, mmFileUploaded.callArgs)

	mmFileUploaded.mutex.RUnlock()

	return argCopy
}

// MinimockFileUploadedDone returns true if the count of the FileUploaded invocations corresponds
// the number of defined expectations
func (m *FileEventbusServiceClientMock) MinimockFileUploadedDone() bool {
	for _, e := range m.FileUploadedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FileUploadedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFileUploadedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFileUploaded != nil && mm_atomic.LoadUint64(&m.afterFileUploadedCounter) < 1 {
		return false
	}
	return true
}

// MinimockFileUploadedInspect logs each unmet expectation
func (m *FileEventbusServiceClientMock) MinimockFileUploadedInspect() {
	for _, e := range m.FileUploadedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileEventbusServiceClientMock.FileUploaded with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FileUploadedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFileUploadedCounter) < 1 {
		if m.FileUploadedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FileEventbusServiceClientMock.FileUploaded")
		} else {
			m.t.Errorf("Expected call to FileEventbusServiceClientMock.FileUploaded with params: %#v", *m.FileUploadedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFileUploaded != nil && mm_atomic.LoadUint64(&m.afterFileUploadedCounter) < 1 {
		m.t.Error("Expected call to FileEventbusServiceClientMock.FileUploaded")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FileEventbusServiceClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockFileCompleteInspect()

		m.MinimockFileUploadedInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FileEventbusServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FileEventbusServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFileCompleteDone() &&
		m.MinimockFileUploadedDone()
}
