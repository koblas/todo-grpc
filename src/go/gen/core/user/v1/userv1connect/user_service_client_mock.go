package userv1connect

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/koblas/grpc-todo/gen/core/user/v1/userv1connect.UserServiceClient -o ./user_service_client_mock.go -n UserServiceClientMock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	connect_go "github.com/bufbuild/connect-go"
	"github.com/gojuno/minimock/v3"
	v1 "github.com/koblas/grpc-todo/gen/core/user/v1"
)

// UserServiceClientMock implements UserServiceClient
type UserServiceClientMock struct {
	t minimock.Tester

	funcAuthAssociate          func(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest]) (pp2 *connect_go.Response[v1.AuthAssociateResponse], err error)
	inspectFuncAuthAssociate   func(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest])
	afterAuthAssociateCounter  uint64
	beforeAuthAssociateCounter uint64
	AuthAssociateMock          mUserServiceClientMockAuthAssociate

	funcComparePassword          func(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest]) (pp2 *connect_go.Response[v1.ComparePasswordResponse], err error)
	inspectFuncComparePassword   func(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest])
	afterComparePasswordCounter  uint64
	beforeComparePasswordCounter uint64
	ComparePasswordMock          mUserServiceClientMockComparePassword

	funcCreate          func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceCreateRequest]) (pp2 *connect_go.Response[v1.UserServiceCreateResponse], err error)
	inspectFuncCreate   func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceCreateRequest])
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mUserServiceClientMockCreate

	funcFindBy          func(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest]) (pp2 *connect_go.Response[v1.FindByResponse], err error)
	inspectFuncFindBy   func(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest])
	afterFindByCounter  uint64
	beforeFindByCounter uint64
	FindByMock          mUserServiceClientMockFindBy

	funcForgotSend          func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest]) (pp2 *connect_go.Response[v1.ForgotSendResponse], err error)
	inspectFuncForgotSend   func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest])
	afterForgotSendCounter  uint64
	beforeForgotSendCounter uint64
	ForgotSendMock          mUserServiceClientMockForgotSend

	funcForgotUpdate          func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest]) (pp2 *connect_go.Response[v1.ForgotUpdateResponse], err error)
	inspectFuncForgotUpdate   func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest])
	afterForgotUpdateCounter  uint64
	beforeForgotUpdateCounter uint64
	ForgotUpdateMock          mUserServiceClientMockForgotUpdate

	funcForgotVerify          func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest]) (pp2 *connect_go.Response[v1.ForgotVerifyResponse], err error)
	inspectFuncForgotVerify   func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest])
	afterForgotVerifyCounter  uint64
	beforeForgotVerifyCounter uint64
	ForgotVerifyMock          mUserServiceClientMockForgotVerify

	funcGetSettings          func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse], err error)
	inspectFuncGetSettings   func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest])
	afterGetSettingsCounter  uint64
	beforeGetSettingsCounter uint64
	GetSettingsMock          mUserServiceClientMockGetSettings

	funcSetSettings          func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse], err error)
	inspectFuncSetSettings   func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest])
	afterSetSettingsCounter  uint64
	beforeSetSettingsCounter uint64
	SetSettingsMock          mUserServiceClientMockSetSettings

	funcUpdate          func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceUpdateRequest]) (pp2 *connect_go.Response[v1.UserServiceUpdateResponse], err error)
	inspectFuncUpdate   func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceUpdateRequest])
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mUserServiceClientMockUpdate

	funcVerificationVerify          func(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest]) (pp2 *connect_go.Response[v1.VerificationVerifyResponse], err error)
	inspectFuncVerificationVerify   func(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest])
	afterVerificationVerifyCounter  uint64
	beforeVerificationVerifyCounter uint64
	VerificationVerifyMock          mUserServiceClientMockVerificationVerify
}

// NewUserServiceClientMock returns a mock for UserServiceClient
func NewUserServiceClientMock(t minimock.Tester) *UserServiceClientMock {
	m := &UserServiceClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AuthAssociateMock = mUserServiceClientMockAuthAssociate{mock: m}
	m.AuthAssociateMock.callArgs = []*UserServiceClientMockAuthAssociateParams{}

	m.ComparePasswordMock = mUserServiceClientMockComparePassword{mock: m}
	m.ComparePasswordMock.callArgs = []*UserServiceClientMockComparePasswordParams{}

	m.CreateMock = mUserServiceClientMockCreate{mock: m}
	m.CreateMock.callArgs = []*UserServiceClientMockCreateParams{}

	m.FindByMock = mUserServiceClientMockFindBy{mock: m}
	m.FindByMock.callArgs = []*UserServiceClientMockFindByParams{}

	m.ForgotSendMock = mUserServiceClientMockForgotSend{mock: m}
	m.ForgotSendMock.callArgs = []*UserServiceClientMockForgotSendParams{}

	m.ForgotUpdateMock = mUserServiceClientMockForgotUpdate{mock: m}
	m.ForgotUpdateMock.callArgs = []*UserServiceClientMockForgotUpdateParams{}

	m.ForgotVerifyMock = mUserServiceClientMockForgotVerify{mock: m}
	m.ForgotVerifyMock.callArgs = []*UserServiceClientMockForgotVerifyParams{}

	m.GetSettingsMock = mUserServiceClientMockGetSettings{mock: m}
	m.GetSettingsMock.callArgs = []*UserServiceClientMockGetSettingsParams{}

	m.SetSettingsMock = mUserServiceClientMockSetSettings{mock: m}
	m.SetSettingsMock.callArgs = []*UserServiceClientMockSetSettingsParams{}

	m.UpdateMock = mUserServiceClientMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*UserServiceClientMockUpdateParams{}

	m.VerificationVerifyMock = mUserServiceClientMockVerificationVerify{mock: m}
	m.VerificationVerifyMock.callArgs = []*UserServiceClientMockVerificationVerifyParams{}

	return m
}

type mUserServiceClientMockAuthAssociate struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockAuthAssociateExpectation
	expectations       []*UserServiceClientMockAuthAssociateExpectation

	callArgs []*UserServiceClientMockAuthAssociateParams
	mutex    sync.RWMutex
}

// UserServiceClientMockAuthAssociateExpectation specifies expectation struct of the UserServiceClient.AuthAssociate
type UserServiceClientMockAuthAssociateExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockAuthAssociateParams
	results *UserServiceClientMockAuthAssociateResults
	Counter uint64
}

// UserServiceClientMockAuthAssociateParams contains parameters of the UserServiceClient.AuthAssociate
type UserServiceClientMockAuthAssociateParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.AuthAssociateRequest]
}

// UserServiceClientMockAuthAssociateResults contains results of the UserServiceClient.AuthAssociate
type UserServiceClientMockAuthAssociateResults struct {
	pp2 *connect_go.Response[v1.AuthAssociateResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.AuthAssociate
func (mmAuthAssociate *mUserServiceClientMockAuthAssociate) Expect(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest]) *mUserServiceClientMockAuthAssociate {
	if mmAuthAssociate.mock.funcAuthAssociate != nil {
		mmAuthAssociate.mock.t.Fatalf("UserServiceClientMock.AuthAssociate mock is already set by Set")
	}

	if mmAuthAssociate.defaultExpectation == nil {
		mmAuthAssociate.defaultExpectation = &UserServiceClientMockAuthAssociateExpectation{}
	}

	mmAuthAssociate.defaultExpectation.params = &UserServiceClientMockAuthAssociateParams{ctx, pp1}
	for _, e := range mmAuthAssociate.expectations {
		if minimock.Equal(e.params, mmAuthAssociate.defaultExpectation.params) {
			mmAuthAssociate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAuthAssociate.defaultExpectation.params)
		}
	}

	return mmAuthAssociate
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.AuthAssociate
func (mmAuthAssociate *mUserServiceClientMockAuthAssociate) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest])) *mUserServiceClientMockAuthAssociate {
	if mmAuthAssociate.mock.inspectFuncAuthAssociate != nil {
		mmAuthAssociate.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.AuthAssociate")
	}

	mmAuthAssociate.mock.inspectFuncAuthAssociate = f

	return mmAuthAssociate
}

// Return sets up results that will be returned by UserServiceClient.AuthAssociate
func (mmAuthAssociate *mUserServiceClientMockAuthAssociate) Return(pp2 *connect_go.Response[v1.AuthAssociateResponse], err error) *UserServiceClientMock {
	if mmAuthAssociate.mock.funcAuthAssociate != nil {
		mmAuthAssociate.mock.t.Fatalf("UserServiceClientMock.AuthAssociate mock is already set by Set")
	}

	if mmAuthAssociate.defaultExpectation == nil {
		mmAuthAssociate.defaultExpectation = &UserServiceClientMockAuthAssociateExpectation{mock: mmAuthAssociate.mock}
	}
	mmAuthAssociate.defaultExpectation.results = &UserServiceClientMockAuthAssociateResults{pp2, err}
	return mmAuthAssociate.mock
}

// Set uses given function f to mock the UserServiceClient.AuthAssociate method
func (mmAuthAssociate *mUserServiceClientMockAuthAssociate) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest]) (pp2 *connect_go.Response[v1.AuthAssociateResponse], err error)) *UserServiceClientMock {
	if mmAuthAssociate.defaultExpectation != nil {
		mmAuthAssociate.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.AuthAssociate method")
	}

	if len(mmAuthAssociate.expectations) > 0 {
		mmAuthAssociate.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.AuthAssociate method")
	}

	mmAuthAssociate.mock.funcAuthAssociate = f
	return mmAuthAssociate.mock
}

// When sets expectation for the UserServiceClient.AuthAssociate which will trigger the result defined by the following
// Then helper
func (mmAuthAssociate *mUserServiceClientMockAuthAssociate) When(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest]) *UserServiceClientMockAuthAssociateExpectation {
	if mmAuthAssociate.mock.funcAuthAssociate != nil {
		mmAuthAssociate.mock.t.Fatalf("UserServiceClientMock.AuthAssociate mock is already set by Set")
	}

	expectation := &UserServiceClientMockAuthAssociateExpectation{
		mock:   mmAuthAssociate.mock,
		params: &UserServiceClientMockAuthAssociateParams{ctx, pp1},
	}
	mmAuthAssociate.expectations = append(mmAuthAssociate.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.AuthAssociate return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockAuthAssociateExpectation) Then(pp2 *connect_go.Response[v1.AuthAssociateResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockAuthAssociateResults{pp2, err}
	return e.mock
}

// AuthAssociate implements UserServiceClient
func (mmAuthAssociate *UserServiceClientMock) AuthAssociate(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest]) (pp2 *connect_go.Response[v1.AuthAssociateResponse], err error) {
	mm_atomic.AddUint64(&mmAuthAssociate.beforeAuthAssociateCounter, 1)
	defer mm_atomic.AddUint64(&mmAuthAssociate.afterAuthAssociateCounter, 1)

	if mmAuthAssociate.inspectFuncAuthAssociate != nil {
		mmAuthAssociate.inspectFuncAuthAssociate(ctx, pp1)
	}

	mm_params := &UserServiceClientMockAuthAssociateParams{ctx, pp1}

	// Record call args
	mmAuthAssociate.AuthAssociateMock.mutex.Lock()
	mmAuthAssociate.AuthAssociateMock.callArgs = append(mmAuthAssociate.AuthAssociateMock.callArgs, mm_params)
	mmAuthAssociate.AuthAssociateMock.mutex.Unlock()

	for _, e := range mmAuthAssociate.AuthAssociateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmAuthAssociate.AuthAssociateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAuthAssociate.AuthAssociateMock.defaultExpectation.Counter, 1)
		mm_want := mmAuthAssociate.AuthAssociateMock.defaultExpectation.params
		mm_got := UserServiceClientMockAuthAssociateParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAuthAssociate.t.Errorf("UserServiceClientMock.AuthAssociate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAuthAssociate.AuthAssociateMock.defaultExpectation.results
		if mm_results == nil {
			mmAuthAssociate.t.Fatal("No results are set for the UserServiceClientMock.AuthAssociate")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmAuthAssociate.funcAuthAssociate != nil {
		return mmAuthAssociate.funcAuthAssociate(ctx, pp1)
	}
	mmAuthAssociate.t.Fatalf("Unexpected call to UserServiceClientMock.AuthAssociate. %v %v", ctx, pp1)
	return
}

// AuthAssociateAfterCounter returns a count of finished UserServiceClientMock.AuthAssociate invocations
func (mmAuthAssociate *UserServiceClientMock) AuthAssociateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuthAssociate.afterAuthAssociateCounter)
}

// AuthAssociateBeforeCounter returns a count of UserServiceClientMock.AuthAssociate invocations
func (mmAuthAssociate *UserServiceClientMock) AuthAssociateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuthAssociate.beforeAuthAssociateCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.AuthAssociate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAuthAssociate *mUserServiceClientMockAuthAssociate) Calls() []*UserServiceClientMockAuthAssociateParams {
	mmAuthAssociate.mutex.RLock()

	argCopy := make([]*UserServiceClientMockAuthAssociateParams, len(mmAuthAssociate.callArgs))
	copy(argCopy, mmAuthAssociate.callArgs)

	mmAuthAssociate.mutex.RUnlock()

	return argCopy
}

// MinimockAuthAssociateDone returns true if the count of the AuthAssociate invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockAuthAssociateDone() bool {
	for _, e := range m.AuthAssociateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AuthAssociateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAuthAssociateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuthAssociate != nil && mm_atomic.LoadUint64(&m.afterAuthAssociateCounter) < 1 {
		return false
	}
	return true
}

// MinimockAuthAssociateInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockAuthAssociateInspect() {
	for _, e := range m.AuthAssociateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.AuthAssociate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AuthAssociateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAuthAssociateCounter) < 1 {
		if m.AuthAssociateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.AuthAssociate")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.AuthAssociate with params: %#v", *m.AuthAssociateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuthAssociate != nil && mm_atomic.LoadUint64(&m.afterAuthAssociateCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.AuthAssociate")
	}
}

type mUserServiceClientMockComparePassword struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockComparePasswordExpectation
	expectations       []*UserServiceClientMockComparePasswordExpectation

	callArgs []*UserServiceClientMockComparePasswordParams
	mutex    sync.RWMutex
}

// UserServiceClientMockComparePasswordExpectation specifies expectation struct of the UserServiceClient.ComparePassword
type UserServiceClientMockComparePasswordExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockComparePasswordParams
	results *UserServiceClientMockComparePasswordResults
	Counter uint64
}

// UserServiceClientMockComparePasswordParams contains parameters of the UserServiceClient.ComparePassword
type UserServiceClientMockComparePasswordParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.ComparePasswordRequest]
}

// UserServiceClientMockComparePasswordResults contains results of the UserServiceClient.ComparePassword
type UserServiceClientMockComparePasswordResults struct {
	pp2 *connect_go.Response[v1.ComparePasswordResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.ComparePassword
func (mmComparePassword *mUserServiceClientMockComparePassword) Expect(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest]) *mUserServiceClientMockComparePassword {
	if mmComparePassword.mock.funcComparePassword != nil {
		mmComparePassword.mock.t.Fatalf("UserServiceClientMock.ComparePassword mock is already set by Set")
	}

	if mmComparePassword.defaultExpectation == nil {
		mmComparePassword.defaultExpectation = &UserServiceClientMockComparePasswordExpectation{}
	}

	mmComparePassword.defaultExpectation.params = &UserServiceClientMockComparePasswordParams{ctx, pp1}
	for _, e := range mmComparePassword.expectations {
		if minimock.Equal(e.params, mmComparePassword.defaultExpectation.params) {
			mmComparePassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmComparePassword.defaultExpectation.params)
		}
	}

	return mmComparePassword
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.ComparePassword
func (mmComparePassword *mUserServiceClientMockComparePassword) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest])) *mUserServiceClientMockComparePassword {
	if mmComparePassword.mock.inspectFuncComparePassword != nil {
		mmComparePassword.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.ComparePassword")
	}

	mmComparePassword.mock.inspectFuncComparePassword = f

	return mmComparePassword
}

// Return sets up results that will be returned by UserServiceClient.ComparePassword
func (mmComparePassword *mUserServiceClientMockComparePassword) Return(pp2 *connect_go.Response[v1.ComparePasswordResponse], err error) *UserServiceClientMock {
	if mmComparePassword.mock.funcComparePassword != nil {
		mmComparePassword.mock.t.Fatalf("UserServiceClientMock.ComparePassword mock is already set by Set")
	}

	if mmComparePassword.defaultExpectation == nil {
		mmComparePassword.defaultExpectation = &UserServiceClientMockComparePasswordExpectation{mock: mmComparePassword.mock}
	}
	mmComparePassword.defaultExpectation.results = &UserServiceClientMockComparePasswordResults{pp2, err}
	return mmComparePassword.mock
}

// Set uses given function f to mock the UserServiceClient.ComparePassword method
func (mmComparePassword *mUserServiceClientMockComparePassword) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest]) (pp2 *connect_go.Response[v1.ComparePasswordResponse], err error)) *UserServiceClientMock {
	if mmComparePassword.defaultExpectation != nil {
		mmComparePassword.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.ComparePassword method")
	}

	if len(mmComparePassword.expectations) > 0 {
		mmComparePassword.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.ComparePassword method")
	}

	mmComparePassword.mock.funcComparePassword = f
	return mmComparePassword.mock
}

// When sets expectation for the UserServiceClient.ComparePassword which will trigger the result defined by the following
// Then helper
func (mmComparePassword *mUserServiceClientMockComparePassword) When(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest]) *UserServiceClientMockComparePasswordExpectation {
	if mmComparePassword.mock.funcComparePassword != nil {
		mmComparePassword.mock.t.Fatalf("UserServiceClientMock.ComparePassword mock is already set by Set")
	}

	expectation := &UserServiceClientMockComparePasswordExpectation{
		mock:   mmComparePassword.mock,
		params: &UserServiceClientMockComparePasswordParams{ctx, pp1},
	}
	mmComparePassword.expectations = append(mmComparePassword.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.ComparePassword return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockComparePasswordExpectation) Then(pp2 *connect_go.Response[v1.ComparePasswordResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockComparePasswordResults{pp2, err}
	return e.mock
}

// ComparePassword implements UserServiceClient
func (mmComparePassword *UserServiceClientMock) ComparePassword(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest]) (pp2 *connect_go.Response[v1.ComparePasswordResponse], err error) {
	mm_atomic.AddUint64(&mmComparePassword.beforeComparePasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmComparePassword.afterComparePasswordCounter, 1)

	if mmComparePassword.inspectFuncComparePassword != nil {
		mmComparePassword.inspectFuncComparePassword(ctx, pp1)
	}

	mm_params := &UserServiceClientMockComparePasswordParams{ctx, pp1}

	// Record call args
	mmComparePassword.ComparePasswordMock.mutex.Lock()
	mmComparePassword.ComparePasswordMock.callArgs = append(mmComparePassword.ComparePasswordMock.callArgs, mm_params)
	mmComparePassword.ComparePasswordMock.mutex.Unlock()

	for _, e := range mmComparePassword.ComparePasswordMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmComparePassword.ComparePasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmComparePassword.ComparePasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmComparePassword.ComparePasswordMock.defaultExpectation.params
		mm_got := UserServiceClientMockComparePasswordParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmComparePassword.t.Errorf("UserServiceClientMock.ComparePassword got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmComparePassword.ComparePasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmComparePassword.t.Fatal("No results are set for the UserServiceClientMock.ComparePassword")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmComparePassword.funcComparePassword != nil {
		return mmComparePassword.funcComparePassword(ctx, pp1)
	}
	mmComparePassword.t.Fatalf("Unexpected call to UserServiceClientMock.ComparePassword. %v %v", ctx, pp1)
	return
}

// ComparePasswordAfterCounter returns a count of finished UserServiceClientMock.ComparePassword invocations
func (mmComparePassword *UserServiceClientMock) ComparePasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmComparePassword.afterComparePasswordCounter)
}

// ComparePasswordBeforeCounter returns a count of UserServiceClientMock.ComparePassword invocations
func (mmComparePassword *UserServiceClientMock) ComparePasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmComparePassword.beforeComparePasswordCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.ComparePassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmComparePassword *mUserServiceClientMockComparePassword) Calls() []*UserServiceClientMockComparePasswordParams {
	mmComparePassword.mutex.RLock()

	argCopy := make([]*UserServiceClientMockComparePasswordParams, len(mmComparePassword.callArgs))
	copy(argCopy, mmComparePassword.callArgs)

	mmComparePassword.mutex.RUnlock()

	return argCopy
}

// MinimockComparePasswordDone returns true if the count of the ComparePassword invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockComparePasswordDone() bool {
	for _, e := range m.ComparePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ComparePasswordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterComparePasswordCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcComparePassword != nil && mm_atomic.LoadUint64(&m.afterComparePasswordCounter) < 1 {
		return false
	}
	return true
}

// MinimockComparePasswordInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockComparePasswordInspect() {
	for _, e := range m.ComparePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.ComparePassword with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ComparePasswordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterComparePasswordCounter) < 1 {
		if m.ComparePasswordMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.ComparePassword")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.ComparePassword with params: %#v", *m.ComparePasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcComparePassword != nil && mm_atomic.LoadUint64(&m.afterComparePasswordCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.ComparePassword")
	}
}

type mUserServiceClientMockCreate struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockCreateExpectation
	expectations       []*UserServiceClientMockCreateExpectation

	callArgs []*UserServiceClientMockCreateParams
	mutex    sync.RWMutex
}

// UserServiceClientMockCreateExpectation specifies expectation struct of the UserServiceClient.Create
type UserServiceClientMockCreateExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockCreateParams
	results *UserServiceClientMockCreateResults
	Counter uint64
}

// UserServiceClientMockCreateParams contains parameters of the UserServiceClient.Create
type UserServiceClientMockCreateParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.UserServiceCreateRequest]
}

// UserServiceClientMockCreateResults contains results of the UserServiceClient.Create
type UserServiceClientMockCreateResults struct {
	pp2 *connect_go.Response[v1.UserServiceCreateResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.Create
func (mmCreate *mUserServiceClientMockCreate) Expect(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceCreateRequest]) *mUserServiceClientMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserServiceClientMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserServiceClientMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &UserServiceClientMockCreateParams{ctx, pp1}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.Create
func (mmCreate *mUserServiceClientMockCreate) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceCreateRequest])) *mUserServiceClientMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by UserServiceClient.Create
func (mmCreate *mUserServiceClientMockCreate) Return(pp2 *connect_go.Response[v1.UserServiceCreateResponse], err error) *UserServiceClientMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserServiceClientMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserServiceClientMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &UserServiceClientMockCreateResults{pp2, err}
	return mmCreate.mock
}

// Set uses given function f to mock the UserServiceClient.Create method
func (mmCreate *mUserServiceClientMockCreate) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceCreateRequest]) (pp2 *connect_go.Response[v1.UserServiceCreateResponse], err error)) *UserServiceClientMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the UserServiceClient.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mUserServiceClientMockCreate) When(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceCreateRequest]) *UserServiceClientMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserServiceClientMock.Create mock is already set by Set")
	}

	expectation := &UserServiceClientMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &UserServiceClientMockCreateParams{ctx, pp1},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.Create return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockCreateExpectation) Then(pp2 *connect_go.Response[v1.UserServiceCreateResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockCreateResults{pp2, err}
	return e.mock
}

// Create implements UserServiceClient
func (mmCreate *UserServiceClientMock) Create(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceCreateRequest]) (pp2 *connect_go.Response[v1.UserServiceCreateResponse], err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, pp1)
	}

	mm_params := &UserServiceClientMockCreateParams{ctx, pp1}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := UserServiceClientMockCreateParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("UserServiceClientMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the UserServiceClientMock.Create")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, pp1)
	}
	mmCreate.t.Fatalf("Unexpected call to UserServiceClientMock.Create. %v %v", ctx, pp1)
	return
}

// CreateAfterCounter returns a count of finished UserServiceClientMock.Create invocations
func (mmCreate *UserServiceClientMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of UserServiceClientMock.Create invocations
func (mmCreate *UserServiceClientMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mUserServiceClientMockCreate) Calls() []*UserServiceClientMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*UserServiceClientMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.Create")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.Create")
	}
}

type mUserServiceClientMockFindBy struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockFindByExpectation
	expectations       []*UserServiceClientMockFindByExpectation

	callArgs []*UserServiceClientMockFindByParams
	mutex    sync.RWMutex
}

// UserServiceClientMockFindByExpectation specifies expectation struct of the UserServiceClient.FindBy
type UserServiceClientMockFindByExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockFindByParams
	results *UserServiceClientMockFindByResults
	Counter uint64
}

// UserServiceClientMockFindByParams contains parameters of the UserServiceClient.FindBy
type UserServiceClientMockFindByParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FindByRequest]
}

// UserServiceClientMockFindByResults contains results of the UserServiceClient.FindBy
type UserServiceClientMockFindByResults struct {
	pp2 *connect_go.Response[v1.FindByResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.FindBy
func (mmFindBy *mUserServiceClientMockFindBy) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest]) *mUserServiceClientMockFindBy {
	if mmFindBy.mock.funcFindBy != nil {
		mmFindBy.mock.t.Fatalf("UserServiceClientMock.FindBy mock is already set by Set")
	}

	if mmFindBy.defaultExpectation == nil {
		mmFindBy.defaultExpectation = &UserServiceClientMockFindByExpectation{}
	}

	mmFindBy.defaultExpectation.params = &UserServiceClientMockFindByParams{ctx, pp1}
	for _, e := range mmFindBy.expectations {
		if minimock.Equal(e.params, mmFindBy.defaultExpectation.params) {
			mmFindBy.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFindBy.defaultExpectation.params)
		}
	}

	return mmFindBy
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.FindBy
func (mmFindBy *mUserServiceClientMockFindBy) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest])) *mUserServiceClientMockFindBy {
	if mmFindBy.mock.inspectFuncFindBy != nil {
		mmFindBy.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.FindBy")
	}

	mmFindBy.mock.inspectFuncFindBy = f

	return mmFindBy
}

// Return sets up results that will be returned by UserServiceClient.FindBy
func (mmFindBy *mUserServiceClientMockFindBy) Return(pp2 *connect_go.Response[v1.FindByResponse], err error) *UserServiceClientMock {
	if mmFindBy.mock.funcFindBy != nil {
		mmFindBy.mock.t.Fatalf("UserServiceClientMock.FindBy mock is already set by Set")
	}

	if mmFindBy.defaultExpectation == nil {
		mmFindBy.defaultExpectation = &UserServiceClientMockFindByExpectation{mock: mmFindBy.mock}
	}
	mmFindBy.defaultExpectation.results = &UserServiceClientMockFindByResults{pp2, err}
	return mmFindBy.mock
}

// Set uses given function f to mock the UserServiceClient.FindBy method
func (mmFindBy *mUserServiceClientMockFindBy) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest]) (pp2 *connect_go.Response[v1.FindByResponse], err error)) *UserServiceClientMock {
	if mmFindBy.defaultExpectation != nil {
		mmFindBy.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.FindBy method")
	}

	if len(mmFindBy.expectations) > 0 {
		mmFindBy.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.FindBy method")
	}

	mmFindBy.mock.funcFindBy = f
	return mmFindBy.mock
}

// When sets expectation for the UserServiceClient.FindBy which will trigger the result defined by the following
// Then helper
func (mmFindBy *mUserServiceClientMockFindBy) When(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest]) *UserServiceClientMockFindByExpectation {
	if mmFindBy.mock.funcFindBy != nil {
		mmFindBy.mock.t.Fatalf("UserServiceClientMock.FindBy mock is already set by Set")
	}

	expectation := &UserServiceClientMockFindByExpectation{
		mock:   mmFindBy.mock,
		params: &UserServiceClientMockFindByParams{ctx, pp1},
	}
	mmFindBy.expectations = append(mmFindBy.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.FindBy return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockFindByExpectation) Then(pp2 *connect_go.Response[v1.FindByResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockFindByResults{pp2, err}
	return e.mock
}

// FindBy implements UserServiceClient
func (mmFindBy *UserServiceClientMock) FindBy(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest]) (pp2 *connect_go.Response[v1.FindByResponse], err error) {
	mm_atomic.AddUint64(&mmFindBy.beforeFindByCounter, 1)
	defer mm_atomic.AddUint64(&mmFindBy.afterFindByCounter, 1)

	if mmFindBy.inspectFuncFindBy != nil {
		mmFindBy.inspectFuncFindBy(ctx, pp1)
	}

	mm_params := &UserServiceClientMockFindByParams{ctx, pp1}

	// Record call args
	mmFindBy.FindByMock.mutex.Lock()
	mmFindBy.FindByMock.callArgs = append(mmFindBy.FindByMock.callArgs, mm_params)
	mmFindBy.FindByMock.mutex.Unlock()

	for _, e := range mmFindBy.FindByMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmFindBy.FindByMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindBy.FindByMock.defaultExpectation.Counter, 1)
		mm_want := mmFindBy.FindByMock.defaultExpectation.params
		mm_got := UserServiceClientMockFindByParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFindBy.t.Errorf("UserServiceClientMock.FindBy got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFindBy.FindByMock.defaultExpectation.results
		if mm_results == nil {
			mmFindBy.t.Fatal("No results are set for the UserServiceClientMock.FindBy")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmFindBy.funcFindBy != nil {
		return mmFindBy.funcFindBy(ctx, pp1)
	}
	mmFindBy.t.Fatalf("Unexpected call to UserServiceClientMock.FindBy. %v %v", ctx, pp1)
	return
}

// FindByAfterCounter returns a count of finished UserServiceClientMock.FindBy invocations
func (mmFindBy *UserServiceClientMock) FindByAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindBy.afterFindByCounter)
}

// FindByBeforeCounter returns a count of UserServiceClientMock.FindBy invocations
func (mmFindBy *UserServiceClientMock) FindByBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindBy.beforeFindByCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.FindBy.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFindBy *mUserServiceClientMockFindBy) Calls() []*UserServiceClientMockFindByParams {
	mmFindBy.mutex.RLock()

	argCopy := make([]*UserServiceClientMockFindByParams, len(mmFindBy.callArgs))
	copy(argCopy, mmFindBy.callArgs)

	mmFindBy.mutex.RUnlock()

	return argCopy
}

// MinimockFindByDone returns true if the count of the FindBy invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockFindByDone() bool {
	for _, e := range m.FindByMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindByMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindByCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindBy != nil && mm_atomic.LoadUint64(&m.afterFindByCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindByInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockFindByInspect() {
	for _, e := range m.FindByMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.FindBy with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindByMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindByCounter) < 1 {
		if m.FindByMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.FindBy")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.FindBy with params: %#v", *m.FindByMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindBy != nil && mm_atomic.LoadUint64(&m.afterFindByCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.FindBy")
	}
}

type mUserServiceClientMockForgotSend struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockForgotSendExpectation
	expectations       []*UserServiceClientMockForgotSendExpectation

	callArgs []*UserServiceClientMockForgotSendParams
	mutex    sync.RWMutex
}

// UserServiceClientMockForgotSendExpectation specifies expectation struct of the UserServiceClient.ForgotSend
type UserServiceClientMockForgotSendExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockForgotSendParams
	results *UserServiceClientMockForgotSendResults
	Counter uint64
}

// UserServiceClientMockForgotSendParams contains parameters of the UserServiceClient.ForgotSend
type UserServiceClientMockForgotSendParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.ForgotSendRequest]
}

// UserServiceClientMockForgotSendResults contains results of the UserServiceClient.ForgotSend
type UserServiceClientMockForgotSendResults struct {
	pp2 *connect_go.Response[v1.ForgotSendResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.ForgotSend
func (mmForgotSend *mUserServiceClientMockForgotSend) Expect(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest]) *mUserServiceClientMockForgotSend {
	if mmForgotSend.mock.funcForgotSend != nil {
		mmForgotSend.mock.t.Fatalf("UserServiceClientMock.ForgotSend mock is already set by Set")
	}

	if mmForgotSend.defaultExpectation == nil {
		mmForgotSend.defaultExpectation = &UserServiceClientMockForgotSendExpectation{}
	}

	mmForgotSend.defaultExpectation.params = &UserServiceClientMockForgotSendParams{ctx, pp1}
	for _, e := range mmForgotSend.expectations {
		if minimock.Equal(e.params, mmForgotSend.defaultExpectation.params) {
			mmForgotSend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmForgotSend.defaultExpectation.params)
		}
	}

	return mmForgotSend
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.ForgotSend
func (mmForgotSend *mUserServiceClientMockForgotSend) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest])) *mUserServiceClientMockForgotSend {
	if mmForgotSend.mock.inspectFuncForgotSend != nil {
		mmForgotSend.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.ForgotSend")
	}

	mmForgotSend.mock.inspectFuncForgotSend = f

	return mmForgotSend
}

// Return sets up results that will be returned by UserServiceClient.ForgotSend
func (mmForgotSend *mUserServiceClientMockForgotSend) Return(pp2 *connect_go.Response[v1.ForgotSendResponse], err error) *UserServiceClientMock {
	if mmForgotSend.mock.funcForgotSend != nil {
		mmForgotSend.mock.t.Fatalf("UserServiceClientMock.ForgotSend mock is already set by Set")
	}

	if mmForgotSend.defaultExpectation == nil {
		mmForgotSend.defaultExpectation = &UserServiceClientMockForgotSendExpectation{mock: mmForgotSend.mock}
	}
	mmForgotSend.defaultExpectation.results = &UserServiceClientMockForgotSendResults{pp2, err}
	return mmForgotSend.mock
}

// Set uses given function f to mock the UserServiceClient.ForgotSend method
func (mmForgotSend *mUserServiceClientMockForgotSend) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest]) (pp2 *connect_go.Response[v1.ForgotSendResponse], err error)) *UserServiceClientMock {
	if mmForgotSend.defaultExpectation != nil {
		mmForgotSend.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.ForgotSend method")
	}

	if len(mmForgotSend.expectations) > 0 {
		mmForgotSend.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.ForgotSend method")
	}

	mmForgotSend.mock.funcForgotSend = f
	return mmForgotSend.mock
}

// When sets expectation for the UserServiceClient.ForgotSend which will trigger the result defined by the following
// Then helper
func (mmForgotSend *mUserServiceClientMockForgotSend) When(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest]) *UserServiceClientMockForgotSendExpectation {
	if mmForgotSend.mock.funcForgotSend != nil {
		mmForgotSend.mock.t.Fatalf("UserServiceClientMock.ForgotSend mock is already set by Set")
	}

	expectation := &UserServiceClientMockForgotSendExpectation{
		mock:   mmForgotSend.mock,
		params: &UserServiceClientMockForgotSendParams{ctx, pp1},
	}
	mmForgotSend.expectations = append(mmForgotSend.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.ForgotSend return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockForgotSendExpectation) Then(pp2 *connect_go.Response[v1.ForgotSendResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockForgotSendResults{pp2, err}
	return e.mock
}

// ForgotSend implements UserServiceClient
func (mmForgotSend *UserServiceClientMock) ForgotSend(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest]) (pp2 *connect_go.Response[v1.ForgotSendResponse], err error) {
	mm_atomic.AddUint64(&mmForgotSend.beforeForgotSendCounter, 1)
	defer mm_atomic.AddUint64(&mmForgotSend.afterForgotSendCounter, 1)

	if mmForgotSend.inspectFuncForgotSend != nil {
		mmForgotSend.inspectFuncForgotSend(ctx, pp1)
	}

	mm_params := &UserServiceClientMockForgotSendParams{ctx, pp1}

	// Record call args
	mmForgotSend.ForgotSendMock.mutex.Lock()
	mmForgotSend.ForgotSendMock.callArgs = append(mmForgotSend.ForgotSendMock.callArgs, mm_params)
	mmForgotSend.ForgotSendMock.mutex.Unlock()

	for _, e := range mmForgotSend.ForgotSendMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmForgotSend.ForgotSendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmForgotSend.ForgotSendMock.defaultExpectation.Counter, 1)
		mm_want := mmForgotSend.ForgotSendMock.defaultExpectation.params
		mm_got := UserServiceClientMockForgotSendParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmForgotSend.t.Errorf("UserServiceClientMock.ForgotSend got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmForgotSend.ForgotSendMock.defaultExpectation.results
		if mm_results == nil {
			mmForgotSend.t.Fatal("No results are set for the UserServiceClientMock.ForgotSend")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmForgotSend.funcForgotSend != nil {
		return mmForgotSend.funcForgotSend(ctx, pp1)
	}
	mmForgotSend.t.Fatalf("Unexpected call to UserServiceClientMock.ForgotSend. %v %v", ctx, pp1)
	return
}

// ForgotSendAfterCounter returns a count of finished UserServiceClientMock.ForgotSend invocations
func (mmForgotSend *UserServiceClientMock) ForgotSendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotSend.afterForgotSendCounter)
}

// ForgotSendBeforeCounter returns a count of UserServiceClientMock.ForgotSend invocations
func (mmForgotSend *UserServiceClientMock) ForgotSendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotSend.beforeForgotSendCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.ForgotSend.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmForgotSend *mUserServiceClientMockForgotSend) Calls() []*UserServiceClientMockForgotSendParams {
	mmForgotSend.mutex.RLock()

	argCopy := make([]*UserServiceClientMockForgotSendParams, len(mmForgotSend.callArgs))
	copy(argCopy, mmForgotSend.callArgs)

	mmForgotSend.mutex.RUnlock()

	return argCopy
}

// MinimockForgotSendDone returns true if the count of the ForgotSend invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockForgotSendDone() bool {
	for _, e := range m.ForgotSendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotSendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotSendCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotSend != nil && mm_atomic.LoadUint64(&m.afterForgotSendCounter) < 1 {
		return false
	}
	return true
}

// MinimockForgotSendInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockForgotSendInspect() {
	for _, e := range m.ForgotSendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.ForgotSend with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotSendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotSendCounter) < 1 {
		if m.ForgotSendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.ForgotSend")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.ForgotSend with params: %#v", *m.ForgotSendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotSend != nil && mm_atomic.LoadUint64(&m.afterForgotSendCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.ForgotSend")
	}
}

type mUserServiceClientMockForgotUpdate struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockForgotUpdateExpectation
	expectations       []*UserServiceClientMockForgotUpdateExpectation

	callArgs []*UserServiceClientMockForgotUpdateParams
	mutex    sync.RWMutex
}

// UserServiceClientMockForgotUpdateExpectation specifies expectation struct of the UserServiceClient.ForgotUpdate
type UserServiceClientMockForgotUpdateExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockForgotUpdateParams
	results *UserServiceClientMockForgotUpdateResults
	Counter uint64
}

// UserServiceClientMockForgotUpdateParams contains parameters of the UserServiceClient.ForgotUpdate
type UserServiceClientMockForgotUpdateParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.ForgotUpdateRequest]
}

// UserServiceClientMockForgotUpdateResults contains results of the UserServiceClient.ForgotUpdate
type UserServiceClientMockForgotUpdateResults struct {
	pp2 *connect_go.Response[v1.ForgotUpdateResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.ForgotUpdate
func (mmForgotUpdate *mUserServiceClientMockForgotUpdate) Expect(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest]) *mUserServiceClientMockForgotUpdate {
	if mmForgotUpdate.mock.funcForgotUpdate != nil {
		mmForgotUpdate.mock.t.Fatalf("UserServiceClientMock.ForgotUpdate mock is already set by Set")
	}

	if mmForgotUpdate.defaultExpectation == nil {
		mmForgotUpdate.defaultExpectation = &UserServiceClientMockForgotUpdateExpectation{}
	}

	mmForgotUpdate.defaultExpectation.params = &UserServiceClientMockForgotUpdateParams{ctx, pp1}
	for _, e := range mmForgotUpdate.expectations {
		if minimock.Equal(e.params, mmForgotUpdate.defaultExpectation.params) {
			mmForgotUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmForgotUpdate.defaultExpectation.params)
		}
	}

	return mmForgotUpdate
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.ForgotUpdate
func (mmForgotUpdate *mUserServiceClientMockForgotUpdate) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest])) *mUserServiceClientMockForgotUpdate {
	if mmForgotUpdate.mock.inspectFuncForgotUpdate != nil {
		mmForgotUpdate.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.ForgotUpdate")
	}

	mmForgotUpdate.mock.inspectFuncForgotUpdate = f

	return mmForgotUpdate
}

// Return sets up results that will be returned by UserServiceClient.ForgotUpdate
func (mmForgotUpdate *mUserServiceClientMockForgotUpdate) Return(pp2 *connect_go.Response[v1.ForgotUpdateResponse], err error) *UserServiceClientMock {
	if mmForgotUpdate.mock.funcForgotUpdate != nil {
		mmForgotUpdate.mock.t.Fatalf("UserServiceClientMock.ForgotUpdate mock is already set by Set")
	}

	if mmForgotUpdate.defaultExpectation == nil {
		mmForgotUpdate.defaultExpectation = &UserServiceClientMockForgotUpdateExpectation{mock: mmForgotUpdate.mock}
	}
	mmForgotUpdate.defaultExpectation.results = &UserServiceClientMockForgotUpdateResults{pp2, err}
	return mmForgotUpdate.mock
}

// Set uses given function f to mock the UserServiceClient.ForgotUpdate method
func (mmForgotUpdate *mUserServiceClientMockForgotUpdate) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest]) (pp2 *connect_go.Response[v1.ForgotUpdateResponse], err error)) *UserServiceClientMock {
	if mmForgotUpdate.defaultExpectation != nil {
		mmForgotUpdate.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.ForgotUpdate method")
	}

	if len(mmForgotUpdate.expectations) > 0 {
		mmForgotUpdate.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.ForgotUpdate method")
	}

	mmForgotUpdate.mock.funcForgotUpdate = f
	return mmForgotUpdate.mock
}

// When sets expectation for the UserServiceClient.ForgotUpdate which will trigger the result defined by the following
// Then helper
func (mmForgotUpdate *mUserServiceClientMockForgotUpdate) When(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest]) *UserServiceClientMockForgotUpdateExpectation {
	if mmForgotUpdate.mock.funcForgotUpdate != nil {
		mmForgotUpdate.mock.t.Fatalf("UserServiceClientMock.ForgotUpdate mock is already set by Set")
	}

	expectation := &UserServiceClientMockForgotUpdateExpectation{
		mock:   mmForgotUpdate.mock,
		params: &UserServiceClientMockForgotUpdateParams{ctx, pp1},
	}
	mmForgotUpdate.expectations = append(mmForgotUpdate.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.ForgotUpdate return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockForgotUpdateExpectation) Then(pp2 *connect_go.Response[v1.ForgotUpdateResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockForgotUpdateResults{pp2, err}
	return e.mock
}

// ForgotUpdate implements UserServiceClient
func (mmForgotUpdate *UserServiceClientMock) ForgotUpdate(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest]) (pp2 *connect_go.Response[v1.ForgotUpdateResponse], err error) {
	mm_atomic.AddUint64(&mmForgotUpdate.beforeForgotUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmForgotUpdate.afterForgotUpdateCounter, 1)

	if mmForgotUpdate.inspectFuncForgotUpdate != nil {
		mmForgotUpdate.inspectFuncForgotUpdate(ctx, pp1)
	}

	mm_params := &UserServiceClientMockForgotUpdateParams{ctx, pp1}

	// Record call args
	mmForgotUpdate.ForgotUpdateMock.mutex.Lock()
	mmForgotUpdate.ForgotUpdateMock.callArgs = append(mmForgotUpdate.ForgotUpdateMock.callArgs, mm_params)
	mmForgotUpdate.ForgotUpdateMock.mutex.Unlock()

	for _, e := range mmForgotUpdate.ForgotUpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmForgotUpdate.ForgotUpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmForgotUpdate.ForgotUpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmForgotUpdate.ForgotUpdateMock.defaultExpectation.params
		mm_got := UserServiceClientMockForgotUpdateParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmForgotUpdate.t.Errorf("UserServiceClientMock.ForgotUpdate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmForgotUpdate.ForgotUpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmForgotUpdate.t.Fatal("No results are set for the UserServiceClientMock.ForgotUpdate")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmForgotUpdate.funcForgotUpdate != nil {
		return mmForgotUpdate.funcForgotUpdate(ctx, pp1)
	}
	mmForgotUpdate.t.Fatalf("Unexpected call to UserServiceClientMock.ForgotUpdate. %v %v", ctx, pp1)
	return
}

// ForgotUpdateAfterCounter returns a count of finished UserServiceClientMock.ForgotUpdate invocations
func (mmForgotUpdate *UserServiceClientMock) ForgotUpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotUpdate.afterForgotUpdateCounter)
}

// ForgotUpdateBeforeCounter returns a count of UserServiceClientMock.ForgotUpdate invocations
func (mmForgotUpdate *UserServiceClientMock) ForgotUpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotUpdate.beforeForgotUpdateCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.ForgotUpdate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmForgotUpdate *mUserServiceClientMockForgotUpdate) Calls() []*UserServiceClientMockForgotUpdateParams {
	mmForgotUpdate.mutex.RLock()

	argCopy := make([]*UserServiceClientMockForgotUpdateParams, len(mmForgotUpdate.callArgs))
	copy(argCopy, mmForgotUpdate.callArgs)

	mmForgotUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockForgotUpdateDone returns true if the count of the ForgotUpdate invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockForgotUpdateDone() bool {
	for _, e := range m.ForgotUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotUpdate != nil && mm_atomic.LoadUint64(&m.afterForgotUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockForgotUpdateInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockForgotUpdateInspect() {
	for _, e := range m.ForgotUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.ForgotUpdate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotUpdateCounter) < 1 {
		if m.ForgotUpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.ForgotUpdate")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.ForgotUpdate with params: %#v", *m.ForgotUpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotUpdate != nil && mm_atomic.LoadUint64(&m.afterForgotUpdateCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.ForgotUpdate")
	}
}

type mUserServiceClientMockForgotVerify struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockForgotVerifyExpectation
	expectations       []*UserServiceClientMockForgotVerifyExpectation

	callArgs []*UserServiceClientMockForgotVerifyParams
	mutex    sync.RWMutex
}

// UserServiceClientMockForgotVerifyExpectation specifies expectation struct of the UserServiceClient.ForgotVerify
type UserServiceClientMockForgotVerifyExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockForgotVerifyParams
	results *UserServiceClientMockForgotVerifyResults
	Counter uint64
}

// UserServiceClientMockForgotVerifyParams contains parameters of the UserServiceClient.ForgotVerify
type UserServiceClientMockForgotVerifyParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.ForgotVerifyRequest]
}

// UserServiceClientMockForgotVerifyResults contains results of the UserServiceClient.ForgotVerify
type UserServiceClientMockForgotVerifyResults struct {
	pp2 *connect_go.Response[v1.ForgotVerifyResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.ForgotVerify
func (mmForgotVerify *mUserServiceClientMockForgotVerify) Expect(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest]) *mUserServiceClientMockForgotVerify {
	if mmForgotVerify.mock.funcForgotVerify != nil {
		mmForgotVerify.mock.t.Fatalf("UserServiceClientMock.ForgotVerify mock is already set by Set")
	}

	if mmForgotVerify.defaultExpectation == nil {
		mmForgotVerify.defaultExpectation = &UserServiceClientMockForgotVerifyExpectation{}
	}

	mmForgotVerify.defaultExpectation.params = &UserServiceClientMockForgotVerifyParams{ctx, pp1}
	for _, e := range mmForgotVerify.expectations {
		if minimock.Equal(e.params, mmForgotVerify.defaultExpectation.params) {
			mmForgotVerify.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmForgotVerify.defaultExpectation.params)
		}
	}

	return mmForgotVerify
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.ForgotVerify
func (mmForgotVerify *mUserServiceClientMockForgotVerify) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest])) *mUserServiceClientMockForgotVerify {
	if mmForgotVerify.mock.inspectFuncForgotVerify != nil {
		mmForgotVerify.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.ForgotVerify")
	}

	mmForgotVerify.mock.inspectFuncForgotVerify = f

	return mmForgotVerify
}

// Return sets up results that will be returned by UserServiceClient.ForgotVerify
func (mmForgotVerify *mUserServiceClientMockForgotVerify) Return(pp2 *connect_go.Response[v1.ForgotVerifyResponse], err error) *UserServiceClientMock {
	if mmForgotVerify.mock.funcForgotVerify != nil {
		mmForgotVerify.mock.t.Fatalf("UserServiceClientMock.ForgotVerify mock is already set by Set")
	}

	if mmForgotVerify.defaultExpectation == nil {
		mmForgotVerify.defaultExpectation = &UserServiceClientMockForgotVerifyExpectation{mock: mmForgotVerify.mock}
	}
	mmForgotVerify.defaultExpectation.results = &UserServiceClientMockForgotVerifyResults{pp2, err}
	return mmForgotVerify.mock
}

// Set uses given function f to mock the UserServiceClient.ForgotVerify method
func (mmForgotVerify *mUserServiceClientMockForgotVerify) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest]) (pp2 *connect_go.Response[v1.ForgotVerifyResponse], err error)) *UserServiceClientMock {
	if mmForgotVerify.defaultExpectation != nil {
		mmForgotVerify.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.ForgotVerify method")
	}

	if len(mmForgotVerify.expectations) > 0 {
		mmForgotVerify.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.ForgotVerify method")
	}

	mmForgotVerify.mock.funcForgotVerify = f
	return mmForgotVerify.mock
}

// When sets expectation for the UserServiceClient.ForgotVerify which will trigger the result defined by the following
// Then helper
func (mmForgotVerify *mUserServiceClientMockForgotVerify) When(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest]) *UserServiceClientMockForgotVerifyExpectation {
	if mmForgotVerify.mock.funcForgotVerify != nil {
		mmForgotVerify.mock.t.Fatalf("UserServiceClientMock.ForgotVerify mock is already set by Set")
	}

	expectation := &UserServiceClientMockForgotVerifyExpectation{
		mock:   mmForgotVerify.mock,
		params: &UserServiceClientMockForgotVerifyParams{ctx, pp1},
	}
	mmForgotVerify.expectations = append(mmForgotVerify.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.ForgotVerify return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockForgotVerifyExpectation) Then(pp2 *connect_go.Response[v1.ForgotVerifyResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockForgotVerifyResults{pp2, err}
	return e.mock
}

// ForgotVerify implements UserServiceClient
func (mmForgotVerify *UserServiceClientMock) ForgotVerify(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest]) (pp2 *connect_go.Response[v1.ForgotVerifyResponse], err error) {
	mm_atomic.AddUint64(&mmForgotVerify.beforeForgotVerifyCounter, 1)
	defer mm_atomic.AddUint64(&mmForgotVerify.afterForgotVerifyCounter, 1)

	if mmForgotVerify.inspectFuncForgotVerify != nil {
		mmForgotVerify.inspectFuncForgotVerify(ctx, pp1)
	}

	mm_params := &UserServiceClientMockForgotVerifyParams{ctx, pp1}

	// Record call args
	mmForgotVerify.ForgotVerifyMock.mutex.Lock()
	mmForgotVerify.ForgotVerifyMock.callArgs = append(mmForgotVerify.ForgotVerifyMock.callArgs, mm_params)
	mmForgotVerify.ForgotVerifyMock.mutex.Unlock()

	for _, e := range mmForgotVerify.ForgotVerifyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmForgotVerify.ForgotVerifyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmForgotVerify.ForgotVerifyMock.defaultExpectation.Counter, 1)
		mm_want := mmForgotVerify.ForgotVerifyMock.defaultExpectation.params
		mm_got := UserServiceClientMockForgotVerifyParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmForgotVerify.t.Errorf("UserServiceClientMock.ForgotVerify got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmForgotVerify.ForgotVerifyMock.defaultExpectation.results
		if mm_results == nil {
			mmForgotVerify.t.Fatal("No results are set for the UserServiceClientMock.ForgotVerify")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmForgotVerify.funcForgotVerify != nil {
		return mmForgotVerify.funcForgotVerify(ctx, pp1)
	}
	mmForgotVerify.t.Fatalf("Unexpected call to UserServiceClientMock.ForgotVerify. %v %v", ctx, pp1)
	return
}

// ForgotVerifyAfterCounter returns a count of finished UserServiceClientMock.ForgotVerify invocations
func (mmForgotVerify *UserServiceClientMock) ForgotVerifyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotVerify.afterForgotVerifyCounter)
}

// ForgotVerifyBeforeCounter returns a count of UserServiceClientMock.ForgotVerify invocations
func (mmForgotVerify *UserServiceClientMock) ForgotVerifyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotVerify.beforeForgotVerifyCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.ForgotVerify.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmForgotVerify *mUserServiceClientMockForgotVerify) Calls() []*UserServiceClientMockForgotVerifyParams {
	mmForgotVerify.mutex.RLock()

	argCopy := make([]*UserServiceClientMockForgotVerifyParams, len(mmForgotVerify.callArgs))
	copy(argCopy, mmForgotVerify.callArgs)

	mmForgotVerify.mutex.RUnlock()

	return argCopy
}

// MinimockForgotVerifyDone returns true if the count of the ForgotVerify invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockForgotVerifyDone() bool {
	for _, e := range m.ForgotVerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotVerifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotVerifyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotVerify != nil && mm_atomic.LoadUint64(&m.afterForgotVerifyCounter) < 1 {
		return false
	}
	return true
}

// MinimockForgotVerifyInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockForgotVerifyInspect() {
	for _, e := range m.ForgotVerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.ForgotVerify with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotVerifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotVerifyCounter) < 1 {
		if m.ForgotVerifyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.ForgotVerify")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.ForgotVerify with params: %#v", *m.ForgotVerifyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotVerify != nil && mm_atomic.LoadUint64(&m.afterForgotVerifyCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.ForgotVerify")
	}
}

type mUserServiceClientMockGetSettings struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockGetSettingsExpectation
	expectations       []*UserServiceClientMockGetSettingsExpectation

	callArgs []*UserServiceClientMockGetSettingsParams
	mutex    sync.RWMutex
}

// UserServiceClientMockGetSettingsExpectation specifies expectation struct of the UserServiceClient.GetSettings
type UserServiceClientMockGetSettingsExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockGetSettingsParams
	results *UserServiceClientMockGetSettingsResults
	Counter uint64
}

// UserServiceClientMockGetSettingsParams contains parameters of the UserServiceClient.GetSettings
type UserServiceClientMockGetSettingsParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]
}

// UserServiceClientMockGetSettingsResults contains results of the UserServiceClient.GetSettings
type UserServiceClientMockGetSettingsResults struct {
	pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.GetSettings
func (mmGetSettings *mUserServiceClientMockGetSettings) Expect(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]) *mUserServiceClientMockGetSettings {
	if mmGetSettings.mock.funcGetSettings != nil {
		mmGetSettings.mock.t.Fatalf("UserServiceClientMock.GetSettings mock is already set by Set")
	}

	if mmGetSettings.defaultExpectation == nil {
		mmGetSettings.defaultExpectation = &UserServiceClientMockGetSettingsExpectation{}
	}

	mmGetSettings.defaultExpectation.params = &UserServiceClientMockGetSettingsParams{ctx, pp1}
	for _, e := range mmGetSettings.expectations {
		if minimock.Equal(e.params, mmGetSettings.defaultExpectation.params) {
			mmGetSettings.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSettings.defaultExpectation.params)
		}
	}

	return mmGetSettings
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.GetSettings
func (mmGetSettings *mUserServiceClientMockGetSettings) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest])) *mUserServiceClientMockGetSettings {
	if mmGetSettings.mock.inspectFuncGetSettings != nil {
		mmGetSettings.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.GetSettings")
	}

	mmGetSettings.mock.inspectFuncGetSettings = f

	return mmGetSettings
}

// Return sets up results that will be returned by UserServiceClient.GetSettings
func (mmGetSettings *mUserServiceClientMockGetSettings) Return(pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse], err error) *UserServiceClientMock {
	if mmGetSettings.mock.funcGetSettings != nil {
		mmGetSettings.mock.t.Fatalf("UserServiceClientMock.GetSettings mock is already set by Set")
	}

	if mmGetSettings.defaultExpectation == nil {
		mmGetSettings.defaultExpectation = &UserServiceClientMockGetSettingsExpectation{mock: mmGetSettings.mock}
	}
	mmGetSettings.defaultExpectation.results = &UserServiceClientMockGetSettingsResults{pp2, err}
	return mmGetSettings.mock
}

// Set uses given function f to mock the UserServiceClient.GetSettings method
func (mmGetSettings *mUserServiceClientMockGetSettings) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse], err error)) *UserServiceClientMock {
	if mmGetSettings.defaultExpectation != nil {
		mmGetSettings.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.GetSettings method")
	}

	if len(mmGetSettings.expectations) > 0 {
		mmGetSettings.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.GetSettings method")
	}

	mmGetSettings.mock.funcGetSettings = f
	return mmGetSettings.mock
}

// When sets expectation for the UserServiceClient.GetSettings which will trigger the result defined by the following
// Then helper
func (mmGetSettings *mUserServiceClientMockGetSettings) When(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]) *UserServiceClientMockGetSettingsExpectation {
	if mmGetSettings.mock.funcGetSettings != nil {
		mmGetSettings.mock.t.Fatalf("UserServiceClientMock.GetSettings mock is already set by Set")
	}

	expectation := &UserServiceClientMockGetSettingsExpectation{
		mock:   mmGetSettings.mock,
		params: &UserServiceClientMockGetSettingsParams{ctx, pp1},
	}
	mmGetSettings.expectations = append(mmGetSettings.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.GetSettings return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockGetSettingsExpectation) Then(pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockGetSettingsResults{pp2, err}
	return e.mock
}

// GetSettings implements UserServiceClient
func (mmGetSettings *UserServiceClientMock) GetSettings(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse], err error) {
	mm_atomic.AddUint64(&mmGetSettings.beforeGetSettingsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSettings.afterGetSettingsCounter, 1)

	if mmGetSettings.inspectFuncGetSettings != nil {
		mmGetSettings.inspectFuncGetSettings(ctx, pp1)
	}

	mm_params := &UserServiceClientMockGetSettingsParams{ctx, pp1}

	// Record call args
	mmGetSettings.GetSettingsMock.mutex.Lock()
	mmGetSettings.GetSettingsMock.callArgs = append(mmGetSettings.GetSettingsMock.callArgs, mm_params)
	mmGetSettings.GetSettingsMock.mutex.Unlock()

	for _, e := range mmGetSettings.GetSettingsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmGetSettings.GetSettingsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSettings.GetSettingsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSettings.GetSettingsMock.defaultExpectation.params
		mm_got := UserServiceClientMockGetSettingsParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSettings.t.Errorf("UserServiceClientMock.GetSettings got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSettings.GetSettingsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSettings.t.Fatal("No results are set for the UserServiceClientMock.GetSettings")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmGetSettings.funcGetSettings != nil {
		return mmGetSettings.funcGetSettings(ctx, pp1)
	}
	mmGetSettings.t.Fatalf("Unexpected call to UserServiceClientMock.GetSettings. %v %v", ctx, pp1)
	return
}

// GetSettingsAfterCounter returns a count of finished UserServiceClientMock.GetSettings invocations
func (mmGetSettings *UserServiceClientMock) GetSettingsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSettings.afterGetSettingsCounter)
}

// GetSettingsBeforeCounter returns a count of UserServiceClientMock.GetSettings invocations
func (mmGetSettings *UserServiceClientMock) GetSettingsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSettings.beforeGetSettingsCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.GetSettings.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSettings *mUserServiceClientMockGetSettings) Calls() []*UserServiceClientMockGetSettingsParams {
	mmGetSettings.mutex.RLock()

	argCopy := make([]*UserServiceClientMockGetSettingsParams, len(mmGetSettings.callArgs))
	copy(argCopy, mmGetSettings.callArgs)

	mmGetSettings.mutex.RUnlock()

	return argCopy
}

// MinimockGetSettingsDone returns true if the count of the GetSettings invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockGetSettingsDone() bool {
	for _, e := range m.GetSettingsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSettingsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSettingsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSettings != nil && mm_atomic.LoadUint64(&m.afterGetSettingsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSettingsInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockGetSettingsInspect() {
	for _, e := range m.GetSettingsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.GetSettings with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSettingsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSettingsCounter) < 1 {
		if m.GetSettingsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.GetSettings")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.GetSettings with params: %#v", *m.GetSettingsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSettings != nil && mm_atomic.LoadUint64(&m.afterGetSettingsCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.GetSettings")
	}
}

type mUserServiceClientMockSetSettings struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockSetSettingsExpectation
	expectations       []*UserServiceClientMockSetSettingsExpectation

	callArgs []*UserServiceClientMockSetSettingsParams
	mutex    sync.RWMutex
}

// UserServiceClientMockSetSettingsExpectation specifies expectation struct of the UserServiceClient.SetSettings
type UserServiceClientMockSetSettingsExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockSetSettingsParams
	results *UserServiceClientMockSetSettingsResults
	Counter uint64
}

// UserServiceClientMockSetSettingsParams contains parameters of the UserServiceClient.SetSettings
type UserServiceClientMockSetSettingsParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]
}

// UserServiceClientMockSetSettingsResults contains results of the UserServiceClient.SetSettings
type UserServiceClientMockSetSettingsResults struct {
	pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.SetSettings
func (mmSetSettings *mUserServiceClientMockSetSettings) Expect(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]) *mUserServiceClientMockSetSettings {
	if mmSetSettings.mock.funcSetSettings != nil {
		mmSetSettings.mock.t.Fatalf("UserServiceClientMock.SetSettings mock is already set by Set")
	}

	if mmSetSettings.defaultExpectation == nil {
		mmSetSettings.defaultExpectation = &UserServiceClientMockSetSettingsExpectation{}
	}

	mmSetSettings.defaultExpectation.params = &UserServiceClientMockSetSettingsParams{ctx, pp1}
	for _, e := range mmSetSettings.expectations {
		if minimock.Equal(e.params, mmSetSettings.defaultExpectation.params) {
			mmSetSettings.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetSettings.defaultExpectation.params)
		}
	}

	return mmSetSettings
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.SetSettings
func (mmSetSettings *mUserServiceClientMockSetSettings) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest])) *mUserServiceClientMockSetSettings {
	if mmSetSettings.mock.inspectFuncSetSettings != nil {
		mmSetSettings.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.SetSettings")
	}

	mmSetSettings.mock.inspectFuncSetSettings = f

	return mmSetSettings
}

// Return sets up results that will be returned by UserServiceClient.SetSettings
func (mmSetSettings *mUserServiceClientMockSetSettings) Return(pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse], err error) *UserServiceClientMock {
	if mmSetSettings.mock.funcSetSettings != nil {
		mmSetSettings.mock.t.Fatalf("UserServiceClientMock.SetSettings mock is already set by Set")
	}

	if mmSetSettings.defaultExpectation == nil {
		mmSetSettings.defaultExpectation = &UserServiceClientMockSetSettingsExpectation{mock: mmSetSettings.mock}
	}
	mmSetSettings.defaultExpectation.results = &UserServiceClientMockSetSettingsResults{pp2, err}
	return mmSetSettings.mock
}

// Set uses given function f to mock the UserServiceClient.SetSettings method
func (mmSetSettings *mUserServiceClientMockSetSettings) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse], err error)) *UserServiceClientMock {
	if mmSetSettings.defaultExpectation != nil {
		mmSetSettings.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.SetSettings method")
	}

	if len(mmSetSettings.expectations) > 0 {
		mmSetSettings.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.SetSettings method")
	}

	mmSetSettings.mock.funcSetSettings = f
	return mmSetSettings.mock
}

// When sets expectation for the UserServiceClient.SetSettings which will trigger the result defined by the following
// Then helper
func (mmSetSettings *mUserServiceClientMockSetSettings) When(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]) *UserServiceClientMockSetSettingsExpectation {
	if mmSetSettings.mock.funcSetSettings != nil {
		mmSetSettings.mock.t.Fatalf("UserServiceClientMock.SetSettings mock is already set by Set")
	}

	expectation := &UserServiceClientMockSetSettingsExpectation{
		mock:   mmSetSettings.mock,
		params: &UserServiceClientMockSetSettingsParams{ctx, pp1},
	}
	mmSetSettings.expectations = append(mmSetSettings.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.SetSettings return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockSetSettingsExpectation) Then(pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockSetSettingsResults{pp2, err}
	return e.mock
}

// SetSettings implements UserServiceClient
func (mmSetSettings *UserServiceClientMock) SetSettings(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse], err error) {
	mm_atomic.AddUint64(&mmSetSettings.beforeSetSettingsCounter, 1)
	defer mm_atomic.AddUint64(&mmSetSettings.afterSetSettingsCounter, 1)

	if mmSetSettings.inspectFuncSetSettings != nil {
		mmSetSettings.inspectFuncSetSettings(ctx, pp1)
	}

	mm_params := &UserServiceClientMockSetSettingsParams{ctx, pp1}

	// Record call args
	mmSetSettings.SetSettingsMock.mutex.Lock()
	mmSetSettings.SetSettingsMock.callArgs = append(mmSetSettings.SetSettingsMock.callArgs, mm_params)
	mmSetSettings.SetSettingsMock.mutex.Unlock()

	for _, e := range mmSetSettings.SetSettingsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmSetSettings.SetSettingsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetSettings.SetSettingsMock.defaultExpectation.Counter, 1)
		mm_want := mmSetSettings.SetSettingsMock.defaultExpectation.params
		mm_got := UserServiceClientMockSetSettingsParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetSettings.t.Errorf("UserServiceClientMock.SetSettings got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetSettings.SetSettingsMock.defaultExpectation.results
		if mm_results == nil {
			mmSetSettings.t.Fatal("No results are set for the UserServiceClientMock.SetSettings")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmSetSettings.funcSetSettings != nil {
		return mmSetSettings.funcSetSettings(ctx, pp1)
	}
	mmSetSettings.t.Fatalf("Unexpected call to UserServiceClientMock.SetSettings. %v %v", ctx, pp1)
	return
}

// SetSettingsAfterCounter returns a count of finished UserServiceClientMock.SetSettings invocations
func (mmSetSettings *UserServiceClientMock) SetSettingsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetSettings.afterSetSettingsCounter)
}

// SetSettingsBeforeCounter returns a count of UserServiceClientMock.SetSettings invocations
func (mmSetSettings *UserServiceClientMock) SetSettingsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetSettings.beforeSetSettingsCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.SetSettings.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetSettings *mUserServiceClientMockSetSettings) Calls() []*UserServiceClientMockSetSettingsParams {
	mmSetSettings.mutex.RLock()

	argCopy := make([]*UserServiceClientMockSetSettingsParams, len(mmSetSettings.callArgs))
	copy(argCopy, mmSetSettings.callArgs)

	mmSetSettings.mutex.RUnlock()

	return argCopy
}

// MinimockSetSettingsDone returns true if the count of the SetSettings invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockSetSettingsDone() bool {
	for _, e := range m.SetSettingsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetSettingsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetSettingsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetSettings != nil && mm_atomic.LoadUint64(&m.afterSetSettingsCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetSettingsInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockSetSettingsInspect() {
	for _, e := range m.SetSettingsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.SetSettings with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetSettingsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetSettingsCounter) < 1 {
		if m.SetSettingsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.SetSettings")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.SetSettings with params: %#v", *m.SetSettingsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetSettings != nil && mm_atomic.LoadUint64(&m.afterSetSettingsCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.SetSettings")
	}
}

type mUserServiceClientMockUpdate struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockUpdateExpectation
	expectations       []*UserServiceClientMockUpdateExpectation

	callArgs []*UserServiceClientMockUpdateParams
	mutex    sync.RWMutex
}

// UserServiceClientMockUpdateExpectation specifies expectation struct of the UserServiceClient.Update
type UserServiceClientMockUpdateExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockUpdateParams
	results *UserServiceClientMockUpdateResults
	Counter uint64
}

// UserServiceClientMockUpdateParams contains parameters of the UserServiceClient.Update
type UserServiceClientMockUpdateParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.UserServiceUpdateRequest]
}

// UserServiceClientMockUpdateResults contains results of the UserServiceClient.Update
type UserServiceClientMockUpdateResults struct {
	pp2 *connect_go.Response[v1.UserServiceUpdateResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.Update
func (mmUpdate *mUserServiceClientMockUpdate) Expect(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceUpdateRequest]) *mUserServiceClientMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserServiceClientMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserServiceClientMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &UserServiceClientMockUpdateParams{ctx, pp1}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.Update
func (mmUpdate *mUserServiceClientMockUpdate) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceUpdateRequest])) *mUserServiceClientMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by UserServiceClient.Update
func (mmUpdate *mUserServiceClientMockUpdate) Return(pp2 *connect_go.Response[v1.UserServiceUpdateResponse], err error) *UserServiceClientMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserServiceClientMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserServiceClientMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &UserServiceClientMockUpdateResults{pp2, err}
	return mmUpdate.mock
}

// Set uses given function f to mock the UserServiceClient.Update method
func (mmUpdate *mUserServiceClientMockUpdate) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceUpdateRequest]) (pp2 *connect_go.Response[v1.UserServiceUpdateResponse], err error)) *UserServiceClientMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the UserServiceClient.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mUserServiceClientMockUpdate) When(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceUpdateRequest]) *UserServiceClientMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserServiceClientMock.Update mock is already set by Set")
	}

	expectation := &UserServiceClientMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &UserServiceClientMockUpdateParams{ctx, pp1},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.Update return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockUpdateExpectation) Then(pp2 *connect_go.Response[v1.UserServiceUpdateResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockUpdateResults{pp2, err}
	return e.mock
}

// Update implements UserServiceClient
func (mmUpdate *UserServiceClientMock) Update(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceUpdateRequest]) (pp2 *connect_go.Response[v1.UserServiceUpdateResponse], err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, pp1)
	}

	mm_params := &UserServiceClientMockUpdateParams{ctx, pp1}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := UserServiceClientMockUpdateParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("UserServiceClientMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the UserServiceClientMock.Update")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, pp1)
	}
	mmUpdate.t.Fatalf("Unexpected call to UserServiceClientMock.Update. %v %v", ctx, pp1)
	return
}

// UpdateAfterCounter returns a count of finished UserServiceClientMock.Update invocations
func (mmUpdate *UserServiceClientMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of UserServiceClientMock.Update invocations
func (mmUpdate *UserServiceClientMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mUserServiceClientMockUpdate) Calls() []*UserServiceClientMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*UserServiceClientMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.Update")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.Update")
	}
}

type mUserServiceClientMockVerificationVerify struct {
	mock               *UserServiceClientMock
	defaultExpectation *UserServiceClientMockVerificationVerifyExpectation
	expectations       []*UserServiceClientMockVerificationVerifyExpectation

	callArgs []*UserServiceClientMockVerificationVerifyParams
	mutex    sync.RWMutex
}

// UserServiceClientMockVerificationVerifyExpectation specifies expectation struct of the UserServiceClient.VerificationVerify
type UserServiceClientMockVerificationVerifyExpectation struct {
	mock    *UserServiceClientMock
	params  *UserServiceClientMockVerificationVerifyParams
	results *UserServiceClientMockVerificationVerifyResults
	Counter uint64
}

// UserServiceClientMockVerificationVerifyParams contains parameters of the UserServiceClient.VerificationVerify
type UserServiceClientMockVerificationVerifyParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.VerificationVerifyRequest]
}

// UserServiceClientMockVerificationVerifyResults contains results of the UserServiceClient.VerificationVerify
type UserServiceClientMockVerificationVerifyResults struct {
	pp2 *connect_go.Response[v1.VerificationVerifyResponse]
	err error
}

// Expect sets up expected params for UserServiceClient.VerificationVerify
func (mmVerificationVerify *mUserServiceClientMockVerificationVerify) Expect(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest]) *mUserServiceClientMockVerificationVerify {
	if mmVerificationVerify.mock.funcVerificationVerify != nil {
		mmVerificationVerify.mock.t.Fatalf("UserServiceClientMock.VerificationVerify mock is already set by Set")
	}

	if mmVerificationVerify.defaultExpectation == nil {
		mmVerificationVerify.defaultExpectation = &UserServiceClientMockVerificationVerifyExpectation{}
	}

	mmVerificationVerify.defaultExpectation.params = &UserServiceClientMockVerificationVerifyParams{ctx, pp1}
	for _, e := range mmVerificationVerify.expectations {
		if minimock.Equal(e.params, mmVerificationVerify.defaultExpectation.params) {
			mmVerificationVerify.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVerificationVerify.defaultExpectation.params)
		}
	}

	return mmVerificationVerify
}

// Inspect accepts an inspector function that has same arguments as the UserServiceClient.VerificationVerify
func (mmVerificationVerify *mUserServiceClientMockVerificationVerify) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest])) *mUserServiceClientMockVerificationVerify {
	if mmVerificationVerify.mock.inspectFuncVerificationVerify != nil {
		mmVerificationVerify.mock.t.Fatalf("Inspect function is already set for UserServiceClientMock.VerificationVerify")
	}

	mmVerificationVerify.mock.inspectFuncVerificationVerify = f

	return mmVerificationVerify
}

// Return sets up results that will be returned by UserServiceClient.VerificationVerify
func (mmVerificationVerify *mUserServiceClientMockVerificationVerify) Return(pp2 *connect_go.Response[v1.VerificationVerifyResponse], err error) *UserServiceClientMock {
	if mmVerificationVerify.mock.funcVerificationVerify != nil {
		mmVerificationVerify.mock.t.Fatalf("UserServiceClientMock.VerificationVerify mock is already set by Set")
	}

	if mmVerificationVerify.defaultExpectation == nil {
		mmVerificationVerify.defaultExpectation = &UserServiceClientMockVerificationVerifyExpectation{mock: mmVerificationVerify.mock}
	}
	mmVerificationVerify.defaultExpectation.results = &UserServiceClientMockVerificationVerifyResults{pp2, err}
	return mmVerificationVerify.mock
}

// Set uses given function f to mock the UserServiceClient.VerificationVerify method
func (mmVerificationVerify *mUserServiceClientMockVerificationVerify) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest]) (pp2 *connect_go.Response[v1.VerificationVerifyResponse], err error)) *UserServiceClientMock {
	if mmVerificationVerify.defaultExpectation != nil {
		mmVerificationVerify.mock.t.Fatalf("Default expectation is already set for the UserServiceClient.VerificationVerify method")
	}

	if len(mmVerificationVerify.expectations) > 0 {
		mmVerificationVerify.mock.t.Fatalf("Some expectations are already set for the UserServiceClient.VerificationVerify method")
	}

	mmVerificationVerify.mock.funcVerificationVerify = f
	return mmVerificationVerify.mock
}

// When sets expectation for the UserServiceClient.VerificationVerify which will trigger the result defined by the following
// Then helper
func (mmVerificationVerify *mUserServiceClientMockVerificationVerify) When(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest]) *UserServiceClientMockVerificationVerifyExpectation {
	if mmVerificationVerify.mock.funcVerificationVerify != nil {
		mmVerificationVerify.mock.t.Fatalf("UserServiceClientMock.VerificationVerify mock is already set by Set")
	}

	expectation := &UserServiceClientMockVerificationVerifyExpectation{
		mock:   mmVerificationVerify.mock,
		params: &UserServiceClientMockVerificationVerifyParams{ctx, pp1},
	}
	mmVerificationVerify.expectations = append(mmVerificationVerify.expectations, expectation)
	return expectation
}

// Then sets up UserServiceClient.VerificationVerify return parameters for the expectation previously defined by the When method
func (e *UserServiceClientMockVerificationVerifyExpectation) Then(pp2 *connect_go.Response[v1.VerificationVerifyResponse], err error) *UserServiceClientMock {
	e.results = &UserServiceClientMockVerificationVerifyResults{pp2, err}
	return e.mock
}

// VerificationVerify implements UserServiceClient
func (mmVerificationVerify *UserServiceClientMock) VerificationVerify(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest]) (pp2 *connect_go.Response[v1.VerificationVerifyResponse], err error) {
	mm_atomic.AddUint64(&mmVerificationVerify.beforeVerificationVerifyCounter, 1)
	defer mm_atomic.AddUint64(&mmVerificationVerify.afterVerificationVerifyCounter, 1)

	if mmVerificationVerify.inspectFuncVerificationVerify != nil {
		mmVerificationVerify.inspectFuncVerificationVerify(ctx, pp1)
	}

	mm_params := &UserServiceClientMockVerificationVerifyParams{ctx, pp1}

	// Record call args
	mmVerificationVerify.VerificationVerifyMock.mutex.Lock()
	mmVerificationVerify.VerificationVerifyMock.callArgs = append(mmVerificationVerify.VerificationVerifyMock.callArgs, mm_params)
	mmVerificationVerify.VerificationVerifyMock.mutex.Unlock()

	for _, e := range mmVerificationVerify.VerificationVerifyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmVerificationVerify.VerificationVerifyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVerificationVerify.VerificationVerifyMock.defaultExpectation.Counter, 1)
		mm_want := mmVerificationVerify.VerificationVerifyMock.defaultExpectation.params
		mm_got := UserServiceClientMockVerificationVerifyParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVerificationVerify.t.Errorf("UserServiceClientMock.VerificationVerify got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVerificationVerify.VerificationVerifyMock.defaultExpectation.results
		if mm_results == nil {
			mmVerificationVerify.t.Fatal("No results are set for the UserServiceClientMock.VerificationVerify")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmVerificationVerify.funcVerificationVerify != nil {
		return mmVerificationVerify.funcVerificationVerify(ctx, pp1)
	}
	mmVerificationVerify.t.Fatalf("Unexpected call to UserServiceClientMock.VerificationVerify. %v %v", ctx, pp1)
	return
}

// VerificationVerifyAfterCounter returns a count of finished UserServiceClientMock.VerificationVerify invocations
func (mmVerificationVerify *UserServiceClientMock) VerificationVerifyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerificationVerify.afterVerificationVerifyCounter)
}

// VerificationVerifyBeforeCounter returns a count of UserServiceClientMock.VerificationVerify invocations
func (mmVerificationVerify *UserServiceClientMock) VerificationVerifyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerificationVerify.beforeVerificationVerifyCounter)
}

// Calls returns a list of arguments used in each call to UserServiceClientMock.VerificationVerify.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVerificationVerify *mUserServiceClientMockVerificationVerify) Calls() []*UserServiceClientMockVerificationVerifyParams {
	mmVerificationVerify.mutex.RLock()

	argCopy := make([]*UserServiceClientMockVerificationVerifyParams, len(mmVerificationVerify.callArgs))
	copy(argCopy, mmVerificationVerify.callArgs)

	mmVerificationVerify.mutex.RUnlock()

	return argCopy
}

// MinimockVerificationVerifyDone returns true if the count of the VerificationVerify invocations corresponds
// the number of defined expectations
func (m *UserServiceClientMock) MinimockVerificationVerifyDone() bool {
	for _, e := range m.VerificationVerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VerificationVerifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVerificationVerifyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerificationVerify != nil && mm_atomic.LoadUint64(&m.afterVerificationVerifyCounter) < 1 {
		return false
	}
	return true
}

// MinimockVerificationVerifyInspect logs each unmet expectation
func (m *UserServiceClientMock) MinimockVerificationVerifyInspect() {
	for _, e := range m.VerificationVerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceClientMock.VerificationVerify with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VerificationVerifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVerificationVerifyCounter) < 1 {
		if m.VerificationVerifyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceClientMock.VerificationVerify")
		} else {
			m.t.Errorf("Expected call to UserServiceClientMock.VerificationVerify with params: %#v", *m.VerificationVerifyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerificationVerify != nil && mm_atomic.LoadUint64(&m.afterVerificationVerifyCounter) < 1 {
		m.t.Error("Expected call to UserServiceClientMock.VerificationVerify")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserServiceClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAuthAssociateInspect()

		m.MinimockComparePasswordInspect()

		m.MinimockCreateInspect()

		m.MinimockFindByInspect()

		m.MinimockForgotSendInspect()

		m.MinimockForgotUpdateInspect()

		m.MinimockForgotVerifyInspect()

		m.MinimockGetSettingsInspect()

		m.MinimockSetSettingsInspect()

		m.MinimockUpdateInspect()

		m.MinimockVerificationVerifyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAuthAssociateDone() &&
		m.MinimockComparePasswordDone() &&
		m.MinimockCreateDone() &&
		m.MinimockFindByDone() &&
		m.MinimockForgotSendDone() &&
		m.MinimockForgotUpdateDone() &&
		m.MinimockForgotVerifyDone() &&
		m.MinimockGetSettingsDone() &&
		m.MinimockSetSettingsDone() &&
		m.MinimockUpdateDone() &&
		m.MinimockVerificationVerifyDone()
}
