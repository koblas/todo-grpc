package userv1connect

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/koblas/grpc-todo/gen/core/user/v1/userv1connect.UserServiceHandler -o ./user_service_handler_mock.go -n UserServiceHandlerMock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	connect_go "github.com/bufbuild/connect-go"
	"github.com/gojuno/minimock/v3"
	v1 "github.com/koblas/grpc-todo/gen/core/user/v1"
)

// UserServiceHandlerMock implements UserServiceHandler
type UserServiceHandlerMock struct {
	t minimock.Tester

	funcAuthAssociate          func(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest]) (pp2 *connect_go.Response[v1.AuthAssociateResponse], err error)
	inspectFuncAuthAssociate   func(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest])
	afterAuthAssociateCounter  uint64
	beforeAuthAssociateCounter uint64
	AuthAssociateMock          mUserServiceHandlerMockAuthAssociate

	funcComparePassword          func(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest]) (pp2 *connect_go.Response[v1.ComparePasswordResponse], err error)
	inspectFuncComparePassword   func(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest])
	afterComparePasswordCounter  uint64
	beforeComparePasswordCounter uint64
	ComparePasswordMock          mUserServiceHandlerMockComparePassword

	funcCreate          func(ctx context.Context, pp1 *connect_go.Request[v1.CreateRequest]) (pp2 *connect_go.Response[v1.CreateResponse], err error)
	inspectFuncCreate   func(ctx context.Context, pp1 *connect_go.Request[v1.CreateRequest])
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mUserServiceHandlerMockCreate

	funcFindBy          func(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest]) (pp2 *connect_go.Response[v1.FindByResponse], err error)
	inspectFuncFindBy   func(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest])
	afterFindByCounter  uint64
	beforeFindByCounter uint64
	FindByMock          mUserServiceHandlerMockFindBy

	funcForgotSend          func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest]) (pp2 *connect_go.Response[v1.ForgotSendResponse], err error)
	inspectFuncForgotSend   func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest])
	afterForgotSendCounter  uint64
	beforeForgotSendCounter uint64
	ForgotSendMock          mUserServiceHandlerMockForgotSend

	funcForgotUpdate          func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest]) (pp2 *connect_go.Response[v1.ForgotUpdateResponse], err error)
	inspectFuncForgotUpdate   func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest])
	afterForgotUpdateCounter  uint64
	beforeForgotUpdateCounter uint64
	ForgotUpdateMock          mUserServiceHandlerMockForgotUpdate

	funcForgotVerify          func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest]) (pp2 *connect_go.Response[v1.ForgotVerifyResponse], err error)
	inspectFuncForgotVerify   func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest])
	afterForgotVerifyCounter  uint64
	beforeForgotVerifyCounter uint64
	ForgotVerifyMock          mUserServiceHandlerMockForgotVerify

	funcGetSettings          func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse], err error)
	inspectFuncGetSettings   func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest])
	afterGetSettingsCounter  uint64
	beforeGetSettingsCounter uint64
	GetSettingsMock          mUserServiceHandlerMockGetSettings

	funcSetSettings          func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse], err error)
	inspectFuncSetSettings   func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest])
	afterSetSettingsCounter  uint64
	beforeSetSettingsCounter uint64
	SetSettingsMock          mUserServiceHandlerMockSetSettings

	funcTeamAcceptInvite          func(ctx context.Context, pp1 *connect_go.Request[v1.TeamAcceptInviteRequest]) (pp2 *connect_go.Response[v1.TeamAcceptInviteResponse], err error)
	inspectFuncTeamAcceptInvite   func(ctx context.Context, pp1 *connect_go.Request[v1.TeamAcceptInviteRequest])
	afterTeamAcceptInviteCounter  uint64
	beforeTeamAcceptInviteCounter uint64
	TeamAcceptInviteMock          mUserServiceHandlerMockTeamAcceptInvite

	funcTeamAddMembers          func(ctx context.Context, pp1 *connect_go.Request[v1.TeamAddMembersRequest]) (pp2 *connect_go.Response[v1.TeamAddMembersResponse], err error)
	inspectFuncTeamAddMembers   func(ctx context.Context, pp1 *connect_go.Request[v1.TeamAddMembersRequest])
	afterTeamAddMembersCounter  uint64
	beforeTeamAddMembersCounter uint64
	TeamAddMembersMock          mUserServiceHandlerMockTeamAddMembers

	funcTeamCreate          func(ctx context.Context, pp1 *connect_go.Request[v1.TeamCreateRequest]) (pp2 *connect_go.Response[v1.TeamCreateResponse], err error)
	inspectFuncTeamCreate   func(ctx context.Context, pp1 *connect_go.Request[v1.TeamCreateRequest])
	afterTeamCreateCounter  uint64
	beforeTeamCreateCounter uint64
	TeamCreateMock          mUserServiceHandlerMockTeamCreate

	funcTeamDelete          func(ctx context.Context, pp1 *connect_go.Request[v1.TeamDeleteRequest]) (pp2 *connect_go.Response[v1.TeamDeleteResponse], err error)
	inspectFuncTeamDelete   func(ctx context.Context, pp1 *connect_go.Request[v1.TeamDeleteRequest])
	afterTeamDeleteCounter  uint64
	beforeTeamDeleteCounter uint64
	TeamDeleteMock          mUserServiceHandlerMockTeamDelete

	funcTeamList          func(ctx context.Context, pp1 *connect_go.Request[v1.TeamListRequest]) (pp2 *connect_go.Response[v1.TeamListResponse], err error)
	inspectFuncTeamList   func(ctx context.Context, pp1 *connect_go.Request[v1.TeamListRequest])
	afterTeamListCounter  uint64
	beforeTeamListCounter uint64
	TeamListMock          mUserServiceHandlerMockTeamList

	funcTeamListMembers          func(ctx context.Context, pp1 *connect_go.Request[v1.TeamListMembersRequest]) (pp2 *connect_go.Response[v1.TeamListMembersResponse], err error)
	inspectFuncTeamListMembers   func(ctx context.Context, pp1 *connect_go.Request[v1.TeamListMembersRequest])
	afterTeamListMembersCounter  uint64
	beforeTeamListMembersCounter uint64
	TeamListMembersMock          mUserServiceHandlerMockTeamListMembers

	funcTeamRemoveMembers          func(ctx context.Context, pp1 *connect_go.Request[v1.TeamRemoveMembersRequest]) (pp2 *connect_go.Response[v1.TeamRemoveMembersResponse], err error)
	inspectFuncTeamRemoveMembers   func(ctx context.Context, pp1 *connect_go.Request[v1.TeamRemoveMembersRequest])
	afterTeamRemoveMembersCounter  uint64
	beforeTeamRemoveMembersCounter uint64
	TeamRemoveMembersMock          mUserServiceHandlerMockTeamRemoveMembers

	funcUpdate          func(ctx context.Context, pp1 *connect_go.Request[v1.UpdateRequest]) (pp2 *connect_go.Response[v1.UpdateResponse], err error)
	inspectFuncUpdate   func(ctx context.Context, pp1 *connect_go.Request[v1.UpdateRequest])
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mUserServiceHandlerMockUpdate

	funcVerificationVerify          func(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest]) (pp2 *connect_go.Response[v1.VerificationVerifyResponse], err error)
	inspectFuncVerificationVerify   func(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest])
	afterVerificationVerifyCounter  uint64
	beforeVerificationVerifyCounter uint64
	VerificationVerifyMock          mUserServiceHandlerMockVerificationVerify
}

// NewUserServiceHandlerMock returns a mock for UserServiceHandler
func NewUserServiceHandlerMock(t minimock.Tester) *UserServiceHandlerMock {
	m := &UserServiceHandlerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AuthAssociateMock = mUserServiceHandlerMockAuthAssociate{mock: m}
	m.AuthAssociateMock.callArgs = []*UserServiceHandlerMockAuthAssociateParams{}

	m.ComparePasswordMock = mUserServiceHandlerMockComparePassword{mock: m}
	m.ComparePasswordMock.callArgs = []*UserServiceHandlerMockComparePasswordParams{}

	m.CreateMock = mUserServiceHandlerMockCreate{mock: m}
	m.CreateMock.callArgs = []*UserServiceHandlerMockCreateParams{}

	m.FindByMock = mUserServiceHandlerMockFindBy{mock: m}
	m.FindByMock.callArgs = []*UserServiceHandlerMockFindByParams{}

	m.ForgotSendMock = mUserServiceHandlerMockForgotSend{mock: m}
	m.ForgotSendMock.callArgs = []*UserServiceHandlerMockForgotSendParams{}

	m.ForgotUpdateMock = mUserServiceHandlerMockForgotUpdate{mock: m}
	m.ForgotUpdateMock.callArgs = []*UserServiceHandlerMockForgotUpdateParams{}

	m.ForgotVerifyMock = mUserServiceHandlerMockForgotVerify{mock: m}
	m.ForgotVerifyMock.callArgs = []*UserServiceHandlerMockForgotVerifyParams{}

	m.GetSettingsMock = mUserServiceHandlerMockGetSettings{mock: m}
	m.GetSettingsMock.callArgs = []*UserServiceHandlerMockGetSettingsParams{}

	m.SetSettingsMock = mUserServiceHandlerMockSetSettings{mock: m}
	m.SetSettingsMock.callArgs = []*UserServiceHandlerMockSetSettingsParams{}

	m.TeamAcceptInviteMock = mUserServiceHandlerMockTeamAcceptInvite{mock: m}
	m.TeamAcceptInviteMock.callArgs = []*UserServiceHandlerMockTeamAcceptInviteParams{}

	m.TeamAddMembersMock = mUserServiceHandlerMockTeamAddMembers{mock: m}
	m.TeamAddMembersMock.callArgs = []*UserServiceHandlerMockTeamAddMembersParams{}

	m.TeamCreateMock = mUserServiceHandlerMockTeamCreate{mock: m}
	m.TeamCreateMock.callArgs = []*UserServiceHandlerMockTeamCreateParams{}

	m.TeamDeleteMock = mUserServiceHandlerMockTeamDelete{mock: m}
	m.TeamDeleteMock.callArgs = []*UserServiceHandlerMockTeamDeleteParams{}

	m.TeamListMock = mUserServiceHandlerMockTeamList{mock: m}
	m.TeamListMock.callArgs = []*UserServiceHandlerMockTeamListParams{}

	m.TeamListMembersMock = mUserServiceHandlerMockTeamListMembers{mock: m}
	m.TeamListMembersMock.callArgs = []*UserServiceHandlerMockTeamListMembersParams{}

	m.TeamRemoveMembersMock = mUserServiceHandlerMockTeamRemoveMembers{mock: m}
	m.TeamRemoveMembersMock.callArgs = []*UserServiceHandlerMockTeamRemoveMembersParams{}

	m.UpdateMock = mUserServiceHandlerMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*UserServiceHandlerMockUpdateParams{}

	m.VerificationVerifyMock = mUserServiceHandlerMockVerificationVerify{mock: m}
	m.VerificationVerifyMock.callArgs = []*UserServiceHandlerMockVerificationVerifyParams{}

	return m
}

type mUserServiceHandlerMockAuthAssociate struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockAuthAssociateExpectation
	expectations       []*UserServiceHandlerMockAuthAssociateExpectation

	callArgs []*UserServiceHandlerMockAuthAssociateParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockAuthAssociateExpectation specifies expectation struct of the UserServiceHandler.AuthAssociate
type UserServiceHandlerMockAuthAssociateExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockAuthAssociateParams
	results *UserServiceHandlerMockAuthAssociateResults
	Counter uint64
}

// UserServiceHandlerMockAuthAssociateParams contains parameters of the UserServiceHandler.AuthAssociate
type UserServiceHandlerMockAuthAssociateParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.AuthAssociateRequest]
}

// UserServiceHandlerMockAuthAssociateResults contains results of the UserServiceHandler.AuthAssociate
type UserServiceHandlerMockAuthAssociateResults struct {
	pp2 *connect_go.Response[v1.AuthAssociateResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.AuthAssociate
func (mmAuthAssociate *mUserServiceHandlerMockAuthAssociate) Expect(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest]) *mUserServiceHandlerMockAuthAssociate {
	if mmAuthAssociate.mock.funcAuthAssociate != nil {
		mmAuthAssociate.mock.t.Fatalf("UserServiceHandlerMock.AuthAssociate mock is already set by Set")
	}

	if mmAuthAssociate.defaultExpectation == nil {
		mmAuthAssociate.defaultExpectation = &UserServiceHandlerMockAuthAssociateExpectation{}
	}

	mmAuthAssociate.defaultExpectation.params = &UserServiceHandlerMockAuthAssociateParams{ctx, pp1}
	for _, e := range mmAuthAssociate.expectations {
		if minimock.Equal(e.params, mmAuthAssociate.defaultExpectation.params) {
			mmAuthAssociate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAuthAssociate.defaultExpectation.params)
		}
	}

	return mmAuthAssociate
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.AuthAssociate
func (mmAuthAssociate *mUserServiceHandlerMockAuthAssociate) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest])) *mUserServiceHandlerMockAuthAssociate {
	if mmAuthAssociate.mock.inspectFuncAuthAssociate != nil {
		mmAuthAssociate.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.AuthAssociate")
	}

	mmAuthAssociate.mock.inspectFuncAuthAssociate = f

	return mmAuthAssociate
}

// Return sets up results that will be returned by UserServiceHandler.AuthAssociate
func (mmAuthAssociate *mUserServiceHandlerMockAuthAssociate) Return(pp2 *connect_go.Response[v1.AuthAssociateResponse], err error) *UserServiceHandlerMock {
	if mmAuthAssociate.mock.funcAuthAssociate != nil {
		mmAuthAssociate.mock.t.Fatalf("UserServiceHandlerMock.AuthAssociate mock is already set by Set")
	}

	if mmAuthAssociate.defaultExpectation == nil {
		mmAuthAssociate.defaultExpectation = &UserServiceHandlerMockAuthAssociateExpectation{mock: mmAuthAssociate.mock}
	}
	mmAuthAssociate.defaultExpectation.results = &UserServiceHandlerMockAuthAssociateResults{pp2, err}
	return mmAuthAssociate.mock
}

// Set uses given function f to mock the UserServiceHandler.AuthAssociate method
func (mmAuthAssociate *mUserServiceHandlerMockAuthAssociate) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest]) (pp2 *connect_go.Response[v1.AuthAssociateResponse], err error)) *UserServiceHandlerMock {
	if mmAuthAssociate.defaultExpectation != nil {
		mmAuthAssociate.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.AuthAssociate method")
	}

	if len(mmAuthAssociate.expectations) > 0 {
		mmAuthAssociate.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.AuthAssociate method")
	}

	mmAuthAssociate.mock.funcAuthAssociate = f
	return mmAuthAssociate.mock
}

// When sets expectation for the UserServiceHandler.AuthAssociate which will trigger the result defined by the following
// Then helper
func (mmAuthAssociate *mUserServiceHandlerMockAuthAssociate) When(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest]) *UserServiceHandlerMockAuthAssociateExpectation {
	if mmAuthAssociate.mock.funcAuthAssociate != nil {
		mmAuthAssociate.mock.t.Fatalf("UserServiceHandlerMock.AuthAssociate mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockAuthAssociateExpectation{
		mock:   mmAuthAssociate.mock,
		params: &UserServiceHandlerMockAuthAssociateParams{ctx, pp1},
	}
	mmAuthAssociate.expectations = append(mmAuthAssociate.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.AuthAssociate return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockAuthAssociateExpectation) Then(pp2 *connect_go.Response[v1.AuthAssociateResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockAuthAssociateResults{pp2, err}
	return e.mock
}

// AuthAssociate implements UserServiceHandler
func (mmAuthAssociate *UserServiceHandlerMock) AuthAssociate(ctx context.Context, pp1 *connect_go.Request[v1.AuthAssociateRequest]) (pp2 *connect_go.Response[v1.AuthAssociateResponse], err error) {
	mm_atomic.AddUint64(&mmAuthAssociate.beforeAuthAssociateCounter, 1)
	defer mm_atomic.AddUint64(&mmAuthAssociate.afterAuthAssociateCounter, 1)

	if mmAuthAssociate.inspectFuncAuthAssociate != nil {
		mmAuthAssociate.inspectFuncAuthAssociate(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockAuthAssociateParams{ctx, pp1}

	// Record call args
	mmAuthAssociate.AuthAssociateMock.mutex.Lock()
	mmAuthAssociate.AuthAssociateMock.callArgs = append(mmAuthAssociate.AuthAssociateMock.callArgs, mm_params)
	mmAuthAssociate.AuthAssociateMock.mutex.Unlock()

	for _, e := range mmAuthAssociate.AuthAssociateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmAuthAssociate.AuthAssociateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAuthAssociate.AuthAssociateMock.defaultExpectation.Counter, 1)
		mm_want := mmAuthAssociate.AuthAssociateMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockAuthAssociateParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAuthAssociate.t.Errorf("UserServiceHandlerMock.AuthAssociate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAuthAssociate.AuthAssociateMock.defaultExpectation.results
		if mm_results == nil {
			mmAuthAssociate.t.Fatal("No results are set for the UserServiceHandlerMock.AuthAssociate")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmAuthAssociate.funcAuthAssociate != nil {
		return mmAuthAssociate.funcAuthAssociate(ctx, pp1)
	}
	mmAuthAssociate.t.Fatalf("Unexpected call to UserServiceHandlerMock.AuthAssociate. %v %v", ctx, pp1)
	return
}

// AuthAssociateAfterCounter returns a count of finished UserServiceHandlerMock.AuthAssociate invocations
func (mmAuthAssociate *UserServiceHandlerMock) AuthAssociateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuthAssociate.afterAuthAssociateCounter)
}

// AuthAssociateBeforeCounter returns a count of UserServiceHandlerMock.AuthAssociate invocations
func (mmAuthAssociate *UserServiceHandlerMock) AuthAssociateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuthAssociate.beforeAuthAssociateCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.AuthAssociate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAuthAssociate *mUserServiceHandlerMockAuthAssociate) Calls() []*UserServiceHandlerMockAuthAssociateParams {
	mmAuthAssociate.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockAuthAssociateParams, len(mmAuthAssociate.callArgs))
	copy(argCopy, mmAuthAssociate.callArgs)

	mmAuthAssociate.mutex.RUnlock()

	return argCopy
}

// MinimockAuthAssociateDone returns true if the count of the AuthAssociate invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockAuthAssociateDone() bool {
	for _, e := range m.AuthAssociateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AuthAssociateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAuthAssociateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuthAssociate != nil && mm_atomic.LoadUint64(&m.afterAuthAssociateCounter) < 1 {
		return false
	}
	return true
}

// MinimockAuthAssociateInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockAuthAssociateInspect() {
	for _, e := range m.AuthAssociateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.AuthAssociate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AuthAssociateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAuthAssociateCounter) < 1 {
		if m.AuthAssociateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.AuthAssociate")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.AuthAssociate with params: %#v", *m.AuthAssociateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuthAssociate != nil && mm_atomic.LoadUint64(&m.afterAuthAssociateCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.AuthAssociate")
	}
}

type mUserServiceHandlerMockComparePassword struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockComparePasswordExpectation
	expectations       []*UserServiceHandlerMockComparePasswordExpectation

	callArgs []*UserServiceHandlerMockComparePasswordParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockComparePasswordExpectation specifies expectation struct of the UserServiceHandler.ComparePassword
type UserServiceHandlerMockComparePasswordExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockComparePasswordParams
	results *UserServiceHandlerMockComparePasswordResults
	Counter uint64
}

// UserServiceHandlerMockComparePasswordParams contains parameters of the UserServiceHandler.ComparePassword
type UserServiceHandlerMockComparePasswordParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.ComparePasswordRequest]
}

// UserServiceHandlerMockComparePasswordResults contains results of the UserServiceHandler.ComparePassword
type UserServiceHandlerMockComparePasswordResults struct {
	pp2 *connect_go.Response[v1.ComparePasswordResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.ComparePassword
func (mmComparePassword *mUserServiceHandlerMockComparePassword) Expect(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest]) *mUserServiceHandlerMockComparePassword {
	if mmComparePassword.mock.funcComparePassword != nil {
		mmComparePassword.mock.t.Fatalf("UserServiceHandlerMock.ComparePassword mock is already set by Set")
	}

	if mmComparePassword.defaultExpectation == nil {
		mmComparePassword.defaultExpectation = &UserServiceHandlerMockComparePasswordExpectation{}
	}

	mmComparePassword.defaultExpectation.params = &UserServiceHandlerMockComparePasswordParams{ctx, pp1}
	for _, e := range mmComparePassword.expectations {
		if minimock.Equal(e.params, mmComparePassword.defaultExpectation.params) {
			mmComparePassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmComparePassword.defaultExpectation.params)
		}
	}

	return mmComparePassword
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.ComparePassword
func (mmComparePassword *mUserServiceHandlerMockComparePassword) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest])) *mUserServiceHandlerMockComparePassword {
	if mmComparePassword.mock.inspectFuncComparePassword != nil {
		mmComparePassword.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.ComparePassword")
	}

	mmComparePassword.mock.inspectFuncComparePassword = f

	return mmComparePassword
}

// Return sets up results that will be returned by UserServiceHandler.ComparePassword
func (mmComparePassword *mUserServiceHandlerMockComparePassword) Return(pp2 *connect_go.Response[v1.ComparePasswordResponse], err error) *UserServiceHandlerMock {
	if mmComparePassword.mock.funcComparePassword != nil {
		mmComparePassword.mock.t.Fatalf("UserServiceHandlerMock.ComparePassword mock is already set by Set")
	}

	if mmComparePassword.defaultExpectation == nil {
		mmComparePassword.defaultExpectation = &UserServiceHandlerMockComparePasswordExpectation{mock: mmComparePassword.mock}
	}
	mmComparePassword.defaultExpectation.results = &UserServiceHandlerMockComparePasswordResults{pp2, err}
	return mmComparePassword.mock
}

// Set uses given function f to mock the UserServiceHandler.ComparePassword method
func (mmComparePassword *mUserServiceHandlerMockComparePassword) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest]) (pp2 *connect_go.Response[v1.ComparePasswordResponse], err error)) *UserServiceHandlerMock {
	if mmComparePassword.defaultExpectation != nil {
		mmComparePassword.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.ComparePassword method")
	}

	if len(mmComparePassword.expectations) > 0 {
		mmComparePassword.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.ComparePassword method")
	}

	mmComparePassword.mock.funcComparePassword = f
	return mmComparePassword.mock
}

// When sets expectation for the UserServiceHandler.ComparePassword which will trigger the result defined by the following
// Then helper
func (mmComparePassword *mUserServiceHandlerMockComparePassword) When(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest]) *UserServiceHandlerMockComparePasswordExpectation {
	if mmComparePassword.mock.funcComparePassword != nil {
		mmComparePassword.mock.t.Fatalf("UserServiceHandlerMock.ComparePassword mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockComparePasswordExpectation{
		mock:   mmComparePassword.mock,
		params: &UserServiceHandlerMockComparePasswordParams{ctx, pp1},
	}
	mmComparePassword.expectations = append(mmComparePassword.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.ComparePassword return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockComparePasswordExpectation) Then(pp2 *connect_go.Response[v1.ComparePasswordResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockComparePasswordResults{pp2, err}
	return e.mock
}

// ComparePassword implements UserServiceHandler
func (mmComparePassword *UserServiceHandlerMock) ComparePassword(ctx context.Context, pp1 *connect_go.Request[v1.ComparePasswordRequest]) (pp2 *connect_go.Response[v1.ComparePasswordResponse], err error) {
	mm_atomic.AddUint64(&mmComparePassword.beforeComparePasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmComparePassword.afterComparePasswordCounter, 1)

	if mmComparePassword.inspectFuncComparePassword != nil {
		mmComparePassword.inspectFuncComparePassword(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockComparePasswordParams{ctx, pp1}

	// Record call args
	mmComparePassword.ComparePasswordMock.mutex.Lock()
	mmComparePassword.ComparePasswordMock.callArgs = append(mmComparePassword.ComparePasswordMock.callArgs, mm_params)
	mmComparePassword.ComparePasswordMock.mutex.Unlock()

	for _, e := range mmComparePassword.ComparePasswordMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmComparePassword.ComparePasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmComparePassword.ComparePasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmComparePassword.ComparePasswordMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockComparePasswordParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmComparePassword.t.Errorf("UserServiceHandlerMock.ComparePassword got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmComparePassword.ComparePasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmComparePassword.t.Fatal("No results are set for the UserServiceHandlerMock.ComparePassword")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmComparePassword.funcComparePassword != nil {
		return mmComparePassword.funcComparePassword(ctx, pp1)
	}
	mmComparePassword.t.Fatalf("Unexpected call to UserServiceHandlerMock.ComparePassword. %v %v", ctx, pp1)
	return
}

// ComparePasswordAfterCounter returns a count of finished UserServiceHandlerMock.ComparePassword invocations
func (mmComparePassword *UserServiceHandlerMock) ComparePasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmComparePassword.afterComparePasswordCounter)
}

// ComparePasswordBeforeCounter returns a count of UserServiceHandlerMock.ComparePassword invocations
func (mmComparePassword *UserServiceHandlerMock) ComparePasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmComparePassword.beforeComparePasswordCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.ComparePassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmComparePassword *mUserServiceHandlerMockComparePassword) Calls() []*UserServiceHandlerMockComparePasswordParams {
	mmComparePassword.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockComparePasswordParams, len(mmComparePassword.callArgs))
	copy(argCopy, mmComparePassword.callArgs)

	mmComparePassword.mutex.RUnlock()

	return argCopy
}

// MinimockComparePasswordDone returns true if the count of the ComparePassword invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockComparePasswordDone() bool {
	for _, e := range m.ComparePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ComparePasswordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterComparePasswordCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcComparePassword != nil && mm_atomic.LoadUint64(&m.afterComparePasswordCounter) < 1 {
		return false
	}
	return true
}

// MinimockComparePasswordInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockComparePasswordInspect() {
	for _, e := range m.ComparePasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.ComparePassword with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ComparePasswordMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterComparePasswordCounter) < 1 {
		if m.ComparePasswordMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.ComparePassword")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.ComparePassword with params: %#v", *m.ComparePasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcComparePassword != nil && mm_atomic.LoadUint64(&m.afterComparePasswordCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.ComparePassword")
	}
}

type mUserServiceHandlerMockCreate struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockCreateExpectation
	expectations       []*UserServiceHandlerMockCreateExpectation

	callArgs []*UserServiceHandlerMockCreateParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockCreateExpectation specifies expectation struct of the UserServiceHandler.Create
type UserServiceHandlerMockCreateExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockCreateParams
	results *UserServiceHandlerMockCreateResults
	Counter uint64
}

// UserServiceHandlerMockCreateParams contains parameters of the UserServiceHandler.Create
type UserServiceHandlerMockCreateParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.CreateRequest]
}

// UserServiceHandlerMockCreateResults contains results of the UserServiceHandler.Create
type UserServiceHandlerMockCreateResults struct {
	pp2 *connect_go.Response[v1.CreateResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.Create
func (mmCreate *mUserServiceHandlerMockCreate) Expect(ctx context.Context, pp1 *connect_go.Request[v1.CreateRequest]) *mUserServiceHandlerMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserServiceHandlerMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserServiceHandlerMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &UserServiceHandlerMockCreateParams{ctx, pp1}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.Create
func (mmCreate *mUserServiceHandlerMockCreate) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.CreateRequest])) *mUserServiceHandlerMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by UserServiceHandler.Create
func (mmCreate *mUserServiceHandlerMockCreate) Return(pp2 *connect_go.Response[v1.CreateResponse], err error) *UserServiceHandlerMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserServiceHandlerMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserServiceHandlerMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &UserServiceHandlerMockCreateResults{pp2, err}
	return mmCreate.mock
}

// Set uses given function f to mock the UserServiceHandler.Create method
func (mmCreate *mUserServiceHandlerMockCreate) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.CreateRequest]) (pp2 *connect_go.Response[v1.CreateResponse], err error)) *UserServiceHandlerMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the UserServiceHandler.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mUserServiceHandlerMockCreate) When(ctx context.Context, pp1 *connect_go.Request[v1.CreateRequest]) *UserServiceHandlerMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserServiceHandlerMock.Create mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &UserServiceHandlerMockCreateParams{ctx, pp1},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.Create return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockCreateExpectation) Then(pp2 *connect_go.Response[v1.CreateResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockCreateResults{pp2, err}
	return e.mock
}

// Create implements UserServiceHandler
func (mmCreate *UserServiceHandlerMock) Create(ctx context.Context, pp1 *connect_go.Request[v1.CreateRequest]) (pp2 *connect_go.Response[v1.CreateResponse], err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockCreateParams{ctx, pp1}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockCreateParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("UserServiceHandlerMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the UserServiceHandlerMock.Create")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, pp1)
	}
	mmCreate.t.Fatalf("Unexpected call to UserServiceHandlerMock.Create. %v %v", ctx, pp1)
	return
}

// CreateAfterCounter returns a count of finished UserServiceHandlerMock.Create invocations
func (mmCreate *UserServiceHandlerMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of UserServiceHandlerMock.Create invocations
func (mmCreate *UserServiceHandlerMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mUserServiceHandlerMockCreate) Calls() []*UserServiceHandlerMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.Create")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.Create")
	}
}

type mUserServiceHandlerMockFindBy struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockFindByExpectation
	expectations       []*UserServiceHandlerMockFindByExpectation

	callArgs []*UserServiceHandlerMockFindByParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockFindByExpectation specifies expectation struct of the UserServiceHandler.FindBy
type UserServiceHandlerMockFindByExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockFindByParams
	results *UserServiceHandlerMockFindByResults
	Counter uint64
}

// UserServiceHandlerMockFindByParams contains parameters of the UserServiceHandler.FindBy
type UserServiceHandlerMockFindByParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.FindByRequest]
}

// UserServiceHandlerMockFindByResults contains results of the UserServiceHandler.FindBy
type UserServiceHandlerMockFindByResults struct {
	pp2 *connect_go.Response[v1.FindByResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.FindBy
func (mmFindBy *mUserServiceHandlerMockFindBy) Expect(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest]) *mUserServiceHandlerMockFindBy {
	if mmFindBy.mock.funcFindBy != nil {
		mmFindBy.mock.t.Fatalf("UserServiceHandlerMock.FindBy mock is already set by Set")
	}

	if mmFindBy.defaultExpectation == nil {
		mmFindBy.defaultExpectation = &UserServiceHandlerMockFindByExpectation{}
	}

	mmFindBy.defaultExpectation.params = &UserServiceHandlerMockFindByParams{ctx, pp1}
	for _, e := range mmFindBy.expectations {
		if minimock.Equal(e.params, mmFindBy.defaultExpectation.params) {
			mmFindBy.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFindBy.defaultExpectation.params)
		}
	}

	return mmFindBy
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.FindBy
func (mmFindBy *mUserServiceHandlerMockFindBy) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest])) *mUserServiceHandlerMockFindBy {
	if mmFindBy.mock.inspectFuncFindBy != nil {
		mmFindBy.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.FindBy")
	}

	mmFindBy.mock.inspectFuncFindBy = f

	return mmFindBy
}

// Return sets up results that will be returned by UserServiceHandler.FindBy
func (mmFindBy *mUserServiceHandlerMockFindBy) Return(pp2 *connect_go.Response[v1.FindByResponse], err error) *UserServiceHandlerMock {
	if mmFindBy.mock.funcFindBy != nil {
		mmFindBy.mock.t.Fatalf("UserServiceHandlerMock.FindBy mock is already set by Set")
	}

	if mmFindBy.defaultExpectation == nil {
		mmFindBy.defaultExpectation = &UserServiceHandlerMockFindByExpectation{mock: mmFindBy.mock}
	}
	mmFindBy.defaultExpectation.results = &UserServiceHandlerMockFindByResults{pp2, err}
	return mmFindBy.mock
}

// Set uses given function f to mock the UserServiceHandler.FindBy method
func (mmFindBy *mUserServiceHandlerMockFindBy) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest]) (pp2 *connect_go.Response[v1.FindByResponse], err error)) *UserServiceHandlerMock {
	if mmFindBy.defaultExpectation != nil {
		mmFindBy.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.FindBy method")
	}

	if len(mmFindBy.expectations) > 0 {
		mmFindBy.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.FindBy method")
	}

	mmFindBy.mock.funcFindBy = f
	return mmFindBy.mock
}

// When sets expectation for the UserServiceHandler.FindBy which will trigger the result defined by the following
// Then helper
func (mmFindBy *mUserServiceHandlerMockFindBy) When(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest]) *UserServiceHandlerMockFindByExpectation {
	if mmFindBy.mock.funcFindBy != nil {
		mmFindBy.mock.t.Fatalf("UserServiceHandlerMock.FindBy mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockFindByExpectation{
		mock:   mmFindBy.mock,
		params: &UserServiceHandlerMockFindByParams{ctx, pp1},
	}
	mmFindBy.expectations = append(mmFindBy.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.FindBy return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockFindByExpectation) Then(pp2 *connect_go.Response[v1.FindByResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockFindByResults{pp2, err}
	return e.mock
}

// FindBy implements UserServiceHandler
func (mmFindBy *UserServiceHandlerMock) FindBy(ctx context.Context, pp1 *connect_go.Request[v1.FindByRequest]) (pp2 *connect_go.Response[v1.FindByResponse], err error) {
	mm_atomic.AddUint64(&mmFindBy.beforeFindByCounter, 1)
	defer mm_atomic.AddUint64(&mmFindBy.afterFindByCounter, 1)

	if mmFindBy.inspectFuncFindBy != nil {
		mmFindBy.inspectFuncFindBy(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockFindByParams{ctx, pp1}

	// Record call args
	mmFindBy.FindByMock.mutex.Lock()
	mmFindBy.FindByMock.callArgs = append(mmFindBy.FindByMock.callArgs, mm_params)
	mmFindBy.FindByMock.mutex.Unlock()

	for _, e := range mmFindBy.FindByMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmFindBy.FindByMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindBy.FindByMock.defaultExpectation.Counter, 1)
		mm_want := mmFindBy.FindByMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockFindByParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFindBy.t.Errorf("UserServiceHandlerMock.FindBy got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFindBy.FindByMock.defaultExpectation.results
		if mm_results == nil {
			mmFindBy.t.Fatal("No results are set for the UserServiceHandlerMock.FindBy")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmFindBy.funcFindBy != nil {
		return mmFindBy.funcFindBy(ctx, pp1)
	}
	mmFindBy.t.Fatalf("Unexpected call to UserServiceHandlerMock.FindBy. %v %v", ctx, pp1)
	return
}

// FindByAfterCounter returns a count of finished UserServiceHandlerMock.FindBy invocations
func (mmFindBy *UserServiceHandlerMock) FindByAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindBy.afterFindByCounter)
}

// FindByBeforeCounter returns a count of UserServiceHandlerMock.FindBy invocations
func (mmFindBy *UserServiceHandlerMock) FindByBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindBy.beforeFindByCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.FindBy.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFindBy *mUserServiceHandlerMockFindBy) Calls() []*UserServiceHandlerMockFindByParams {
	mmFindBy.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockFindByParams, len(mmFindBy.callArgs))
	copy(argCopy, mmFindBy.callArgs)

	mmFindBy.mutex.RUnlock()

	return argCopy
}

// MinimockFindByDone returns true if the count of the FindBy invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockFindByDone() bool {
	for _, e := range m.FindByMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindByMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindByCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindBy != nil && mm_atomic.LoadUint64(&m.afterFindByCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindByInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockFindByInspect() {
	for _, e := range m.FindByMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.FindBy with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindByMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindByCounter) < 1 {
		if m.FindByMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.FindBy")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.FindBy with params: %#v", *m.FindByMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindBy != nil && mm_atomic.LoadUint64(&m.afterFindByCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.FindBy")
	}
}

type mUserServiceHandlerMockForgotSend struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockForgotSendExpectation
	expectations       []*UserServiceHandlerMockForgotSendExpectation

	callArgs []*UserServiceHandlerMockForgotSendParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockForgotSendExpectation specifies expectation struct of the UserServiceHandler.ForgotSend
type UserServiceHandlerMockForgotSendExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockForgotSendParams
	results *UserServiceHandlerMockForgotSendResults
	Counter uint64
}

// UserServiceHandlerMockForgotSendParams contains parameters of the UserServiceHandler.ForgotSend
type UserServiceHandlerMockForgotSendParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.ForgotSendRequest]
}

// UserServiceHandlerMockForgotSendResults contains results of the UserServiceHandler.ForgotSend
type UserServiceHandlerMockForgotSendResults struct {
	pp2 *connect_go.Response[v1.ForgotSendResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.ForgotSend
func (mmForgotSend *mUserServiceHandlerMockForgotSend) Expect(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest]) *mUserServiceHandlerMockForgotSend {
	if mmForgotSend.mock.funcForgotSend != nil {
		mmForgotSend.mock.t.Fatalf("UserServiceHandlerMock.ForgotSend mock is already set by Set")
	}

	if mmForgotSend.defaultExpectation == nil {
		mmForgotSend.defaultExpectation = &UserServiceHandlerMockForgotSendExpectation{}
	}

	mmForgotSend.defaultExpectation.params = &UserServiceHandlerMockForgotSendParams{ctx, pp1}
	for _, e := range mmForgotSend.expectations {
		if minimock.Equal(e.params, mmForgotSend.defaultExpectation.params) {
			mmForgotSend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmForgotSend.defaultExpectation.params)
		}
	}

	return mmForgotSend
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.ForgotSend
func (mmForgotSend *mUserServiceHandlerMockForgotSend) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest])) *mUserServiceHandlerMockForgotSend {
	if mmForgotSend.mock.inspectFuncForgotSend != nil {
		mmForgotSend.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.ForgotSend")
	}

	mmForgotSend.mock.inspectFuncForgotSend = f

	return mmForgotSend
}

// Return sets up results that will be returned by UserServiceHandler.ForgotSend
func (mmForgotSend *mUserServiceHandlerMockForgotSend) Return(pp2 *connect_go.Response[v1.ForgotSendResponse], err error) *UserServiceHandlerMock {
	if mmForgotSend.mock.funcForgotSend != nil {
		mmForgotSend.mock.t.Fatalf("UserServiceHandlerMock.ForgotSend mock is already set by Set")
	}

	if mmForgotSend.defaultExpectation == nil {
		mmForgotSend.defaultExpectation = &UserServiceHandlerMockForgotSendExpectation{mock: mmForgotSend.mock}
	}
	mmForgotSend.defaultExpectation.results = &UserServiceHandlerMockForgotSendResults{pp2, err}
	return mmForgotSend.mock
}

// Set uses given function f to mock the UserServiceHandler.ForgotSend method
func (mmForgotSend *mUserServiceHandlerMockForgotSend) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest]) (pp2 *connect_go.Response[v1.ForgotSendResponse], err error)) *UserServiceHandlerMock {
	if mmForgotSend.defaultExpectation != nil {
		mmForgotSend.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.ForgotSend method")
	}

	if len(mmForgotSend.expectations) > 0 {
		mmForgotSend.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.ForgotSend method")
	}

	mmForgotSend.mock.funcForgotSend = f
	return mmForgotSend.mock
}

// When sets expectation for the UserServiceHandler.ForgotSend which will trigger the result defined by the following
// Then helper
func (mmForgotSend *mUserServiceHandlerMockForgotSend) When(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest]) *UserServiceHandlerMockForgotSendExpectation {
	if mmForgotSend.mock.funcForgotSend != nil {
		mmForgotSend.mock.t.Fatalf("UserServiceHandlerMock.ForgotSend mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockForgotSendExpectation{
		mock:   mmForgotSend.mock,
		params: &UserServiceHandlerMockForgotSendParams{ctx, pp1},
	}
	mmForgotSend.expectations = append(mmForgotSend.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.ForgotSend return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockForgotSendExpectation) Then(pp2 *connect_go.Response[v1.ForgotSendResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockForgotSendResults{pp2, err}
	return e.mock
}

// ForgotSend implements UserServiceHandler
func (mmForgotSend *UserServiceHandlerMock) ForgotSend(ctx context.Context, pp1 *connect_go.Request[v1.ForgotSendRequest]) (pp2 *connect_go.Response[v1.ForgotSendResponse], err error) {
	mm_atomic.AddUint64(&mmForgotSend.beforeForgotSendCounter, 1)
	defer mm_atomic.AddUint64(&mmForgotSend.afterForgotSendCounter, 1)

	if mmForgotSend.inspectFuncForgotSend != nil {
		mmForgotSend.inspectFuncForgotSend(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockForgotSendParams{ctx, pp1}

	// Record call args
	mmForgotSend.ForgotSendMock.mutex.Lock()
	mmForgotSend.ForgotSendMock.callArgs = append(mmForgotSend.ForgotSendMock.callArgs, mm_params)
	mmForgotSend.ForgotSendMock.mutex.Unlock()

	for _, e := range mmForgotSend.ForgotSendMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmForgotSend.ForgotSendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmForgotSend.ForgotSendMock.defaultExpectation.Counter, 1)
		mm_want := mmForgotSend.ForgotSendMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockForgotSendParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmForgotSend.t.Errorf("UserServiceHandlerMock.ForgotSend got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmForgotSend.ForgotSendMock.defaultExpectation.results
		if mm_results == nil {
			mmForgotSend.t.Fatal("No results are set for the UserServiceHandlerMock.ForgotSend")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmForgotSend.funcForgotSend != nil {
		return mmForgotSend.funcForgotSend(ctx, pp1)
	}
	mmForgotSend.t.Fatalf("Unexpected call to UserServiceHandlerMock.ForgotSend. %v %v", ctx, pp1)
	return
}

// ForgotSendAfterCounter returns a count of finished UserServiceHandlerMock.ForgotSend invocations
func (mmForgotSend *UserServiceHandlerMock) ForgotSendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotSend.afterForgotSendCounter)
}

// ForgotSendBeforeCounter returns a count of UserServiceHandlerMock.ForgotSend invocations
func (mmForgotSend *UserServiceHandlerMock) ForgotSendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotSend.beforeForgotSendCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.ForgotSend.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmForgotSend *mUserServiceHandlerMockForgotSend) Calls() []*UserServiceHandlerMockForgotSendParams {
	mmForgotSend.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockForgotSendParams, len(mmForgotSend.callArgs))
	copy(argCopy, mmForgotSend.callArgs)

	mmForgotSend.mutex.RUnlock()

	return argCopy
}

// MinimockForgotSendDone returns true if the count of the ForgotSend invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockForgotSendDone() bool {
	for _, e := range m.ForgotSendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotSendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotSendCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotSend != nil && mm_atomic.LoadUint64(&m.afterForgotSendCounter) < 1 {
		return false
	}
	return true
}

// MinimockForgotSendInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockForgotSendInspect() {
	for _, e := range m.ForgotSendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.ForgotSend with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotSendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotSendCounter) < 1 {
		if m.ForgotSendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.ForgotSend")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.ForgotSend with params: %#v", *m.ForgotSendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotSend != nil && mm_atomic.LoadUint64(&m.afterForgotSendCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.ForgotSend")
	}
}

type mUserServiceHandlerMockForgotUpdate struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockForgotUpdateExpectation
	expectations       []*UserServiceHandlerMockForgotUpdateExpectation

	callArgs []*UserServiceHandlerMockForgotUpdateParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockForgotUpdateExpectation specifies expectation struct of the UserServiceHandler.ForgotUpdate
type UserServiceHandlerMockForgotUpdateExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockForgotUpdateParams
	results *UserServiceHandlerMockForgotUpdateResults
	Counter uint64
}

// UserServiceHandlerMockForgotUpdateParams contains parameters of the UserServiceHandler.ForgotUpdate
type UserServiceHandlerMockForgotUpdateParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.ForgotUpdateRequest]
}

// UserServiceHandlerMockForgotUpdateResults contains results of the UserServiceHandler.ForgotUpdate
type UserServiceHandlerMockForgotUpdateResults struct {
	pp2 *connect_go.Response[v1.ForgotUpdateResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.ForgotUpdate
func (mmForgotUpdate *mUserServiceHandlerMockForgotUpdate) Expect(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest]) *mUserServiceHandlerMockForgotUpdate {
	if mmForgotUpdate.mock.funcForgotUpdate != nil {
		mmForgotUpdate.mock.t.Fatalf("UserServiceHandlerMock.ForgotUpdate mock is already set by Set")
	}

	if mmForgotUpdate.defaultExpectation == nil {
		mmForgotUpdate.defaultExpectation = &UserServiceHandlerMockForgotUpdateExpectation{}
	}

	mmForgotUpdate.defaultExpectation.params = &UserServiceHandlerMockForgotUpdateParams{ctx, pp1}
	for _, e := range mmForgotUpdate.expectations {
		if minimock.Equal(e.params, mmForgotUpdate.defaultExpectation.params) {
			mmForgotUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmForgotUpdate.defaultExpectation.params)
		}
	}

	return mmForgotUpdate
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.ForgotUpdate
func (mmForgotUpdate *mUserServiceHandlerMockForgotUpdate) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest])) *mUserServiceHandlerMockForgotUpdate {
	if mmForgotUpdate.mock.inspectFuncForgotUpdate != nil {
		mmForgotUpdate.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.ForgotUpdate")
	}

	mmForgotUpdate.mock.inspectFuncForgotUpdate = f

	return mmForgotUpdate
}

// Return sets up results that will be returned by UserServiceHandler.ForgotUpdate
func (mmForgotUpdate *mUserServiceHandlerMockForgotUpdate) Return(pp2 *connect_go.Response[v1.ForgotUpdateResponse], err error) *UserServiceHandlerMock {
	if mmForgotUpdate.mock.funcForgotUpdate != nil {
		mmForgotUpdate.mock.t.Fatalf("UserServiceHandlerMock.ForgotUpdate mock is already set by Set")
	}

	if mmForgotUpdate.defaultExpectation == nil {
		mmForgotUpdate.defaultExpectation = &UserServiceHandlerMockForgotUpdateExpectation{mock: mmForgotUpdate.mock}
	}
	mmForgotUpdate.defaultExpectation.results = &UserServiceHandlerMockForgotUpdateResults{pp2, err}
	return mmForgotUpdate.mock
}

// Set uses given function f to mock the UserServiceHandler.ForgotUpdate method
func (mmForgotUpdate *mUserServiceHandlerMockForgotUpdate) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest]) (pp2 *connect_go.Response[v1.ForgotUpdateResponse], err error)) *UserServiceHandlerMock {
	if mmForgotUpdate.defaultExpectation != nil {
		mmForgotUpdate.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.ForgotUpdate method")
	}

	if len(mmForgotUpdate.expectations) > 0 {
		mmForgotUpdate.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.ForgotUpdate method")
	}

	mmForgotUpdate.mock.funcForgotUpdate = f
	return mmForgotUpdate.mock
}

// When sets expectation for the UserServiceHandler.ForgotUpdate which will trigger the result defined by the following
// Then helper
func (mmForgotUpdate *mUserServiceHandlerMockForgotUpdate) When(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest]) *UserServiceHandlerMockForgotUpdateExpectation {
	if mmForgotUpdate.mock.funcForgotUpdate != nil {
		mmForgotUpdate.mock.t.Fatalf("UserServiceHandlerMock.ForgotUpdate mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockForgotUpdateExpectation{
		mock:   mmForgotUpdate.mock,
		params: &UserServiceHandlerMockForgotUpdateParams{ctx, pp1},
	}
	mmForgotUpdate.expectations = append(mmForgotUpdate.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.ForgotUpdate return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockForgotUpdateExpectation) Then(pp2 *connect_go.Response[v1.ForgotUpdateResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockForgotUpdateResults{pp2, err}
	return e.mock
}

// ForgotUpdate implements UserServiceHandler
func (mmForgotUpdate *UserServiceHandlerMock) ForgotUpdate(ctx context.Context, pp1 *connect_go.Request[v1.ForgotUpdateRequest]) (pp2 *connect_go.Response[v1.ForgotUpdateResponse], err error) {
	mm_atomic.AddUint64(&mmForgotUpdate.beforeForgotUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmForgotUpdate.afterForgotUpdateCounter, 1)

	if mmForgotUpdate.inspectFuncForgotUpdate != nil {
		mmForgotUpdate.inspectFuncForgotUpdate(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockForgotUpdateParams{ctx, pp1}

	// Record call args
	mmForgotUpdate.ForgotUpdateMock.mutex.Lock()
	mmForgotUpdate.ForgotUpdateMock.callArgs = append(mmForgotUpdate.ForgotUpdateMock.callArgs, mm_params)
	mmForgotUpdate.ForgotUpdateMock.mutex.Unlock()

	for _, e := range mmForgotUpdate.ForgotUpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmForgotUpdate.ForgotUpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmForgotUpdate.ForgotUpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmForgotUpdate.ForgotUpdateMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockForgotUpdateParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmForgotUpdate.t.Errorf("UserServiceHandlerMock.ForgotUpdate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmForgotUpdate.ForgotUpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmForgotUpdate.t.Fatal("No results are set for the UserServiceHandlerMock.ForgotUpdate")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmForgotUpdate.funcForgotUpdate != nil {
		return mmForgotUpdate.funcForgotUpdate(ctx, pp1)
	}
	mmForgotUpdate.t.Fatalf("Unexpected call to UserServiceHandlerMock.ForgotUpdate. %v %v", ctx, pp1)
	return
}

// ForgotUpdateAfterCounter returns a count of finished UserServiceHandlerMock.ForgotUpdate invocations
func (mmForgotUpdate *UserServiceHandlerMock) ForgotUpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotUpdate.afterForgotUpdateCounter)
}

// ForgotUpdateBeforeCounter returns a count of UserServiceHandlerMock.ForgotUpdate invocations
func (mmForgotUpdate *UserServiceHandlerMock) ForgotUpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotUpdate.beforeForgotUpdateCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.ForgotUpdate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmForgotUpdate *mUserServiceHandlerMockForgotUpdate) Calls() []*UserServiceHandlerMockForgotUpdateParams {
	mmForgotUpdate.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockForgotUpdateParams, len(mmForgotUpdate.callArgs))
	copy(argCopy, mmForgotUpdate.callArgs)

	mmForgotUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockForgotUpdateDone returns true if the count of the ForgotUpdate invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockForgotUpdateDone() bool {
	for _, e := range m.ForgotUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotUpdate != nil && mm_atomic.LoadUint64(&m.afterForgotUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockForgotUpdateInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockForgotUpdateInspect() {
	for _, e := range m.ForgotUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.ForgotUpdate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotUpdateCounter) < 1 {
		if m.ForgotUpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.ForgotUpdate")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.ForgotUpdate with params: %#v", *m.ForgotUpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotUpdate != nil && mm_atomic.LoadUint64(&m.afterForgotUpdateCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.ForgotUpdate")
	}
}

type mUserServiceHandlerMockForgotVerify struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockForgotVerifyExpectation
	expectations       []*UserServiceHandlerMockForgotVerifyExpectation

	callArgs []*UserServiceHandlerMockForgotVerifyParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockForgotVerifyExpectation specifies expectation struct of the UserServiceHandler.ForgotVerify
type UserServiceHandlerMockForgotVerifyExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockForgotVerifyParams
	results *UserServiceHandlerMockForgotVerifyResults
	Counter uint64
}

// UserServiceHandlerMockForgotVerifyParams contains parameters of the UserServiceHandler.ForgotVerify
type UserServiceHandlerMockForgotVerifyParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.ForgotVerifyRequest]
}

// UserServiceHandlerMockForgotVerifyResults contains results of the UserServiceHandler.ForgotVerify
type UserServiceHandlerMockForgotVerifyResults struct {
	pp2 *connect_go.Response[v1.ForgotVerifyResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.ForgotVerify
func (mmForgotVerify *mUserServiceHandlerMockForgotVerify) Expect(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest]) *mUserServiceHandlerMockForgotVerify {
	if mmForgotVerify.mock.funcForgotVerify != nil {
		mmForgotVerify.mock.t.Fatalf("UserServiceHandlerMock.ForgotVerify mock is already set by Set")
	}

	if mmForgotVerify.defaultExpectation == nil {
		mmForgotVerify.defaultExpectation = &UserServiceHandlerMockForgotVerifyExpectation{}
	}

	mmForgotVerify.defaultExpectation.params = &UserServiceHandlerMockForgotVerifyParams{ctx, pp1}
	for _, e := range mmForgotVerify.expectations {
		if minimock.Equal(e.params, mmForgotVerify.defaultExpectation.params) {
			mmForgotVerify.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmForgotVerify.defaultExpectation.params)
		}
	}

	return mmForgotVerify
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.ForgotVerify
func (mmForgotVerify *mUserServiceHandlerMockForgotVerify) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest])) *mUserServiceHandlerMockForgotVerify {
	if mmForgotVerify.mock.inspectFuncForgotVerify != nil {
		mmForgotVerify.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.ForgotVerify")
	}

	mmForgotVerify.mock.inspectFuncForgotVerify = f

	return mmForgotVerify
}

// Return sets up results that will be returned by UserServiceHandler.ForgotVerify
func (mmForgotVerify *mUserServiceHandlerMockForgotVerify) Return(pp2 *connect_go.Response[v1.ForgotVerifyResponse], err error) *UserServiceHandlerMock {
	if mmForgotVerify.mock.funcForgotVerify != nil {
		mmForgotVerify.mock.t.Fatalf("UserServiceHandlerMock.ForgotVerify mock is already set by Set")
	}

	if mmForgotVerify.defaultExpectation == nil {
		mmForgotVerify.defaultExpectation = &UserServiceHandlerMockForgotVerifyExpectation{mock: mmForgotVerify.mock}
	}
	mmForgotVerify.defaultExpectation.results = &UserServiceHandlerMockForgotVerifyResults{pp2, err}
	return mmForgotVerify.mock
}

// Set uses given function f to mock the UserServiceHandler.ForgotVerify method
func (mmForgotVerify *mUserServiceHandlerMockForgotVerify) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest]) (pp2 *connect_go.Response[v1.ForgotVerifyResponse], err error)) *UserServiceHandlerMock {
	if mmForgotVerify.defaultExpectation != nil {
		mmForgotVerify.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.ForgotVerify method")
	}

	if len(mmForgotVerify.expectations) > 0 {
		mmForgotVerify.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.ForgotVerify method")
	}

	mmForgotVerify.mock.funcForgotVerify = f
	return mmForgotVerify.mock
}

// When sets expectation for the UserServiceHandler.ForgotVerify which will trigger the result defined by the following
// Then helper
func (mmForgotVerify *mUserServiceHandlerMockForgotVerify) When(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest]) *UserServiceHandlerMockForgotVerifyExpectation {
	if mmForgotVerify.mock.funcForgotVerify != nil {
		mmForgotVerify.mock.t.Fatalf("UserServiceHandlerMock.ForgotVerify mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockForgotVerifyExpectation{
		mock:   mmForgotVerify.mock,
		params: &UserServiceHandlerMockForgotVerifyParams{ctx, pp1},
	}
	mmForgotVerify.expectations = append(mmForgotVerify.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.ForgotVerify return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockForgotVerifyExpectation) Then(pp2 *connect_go.Response[v1.ForgotVerifyResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockForgotVerifyResults{pp2, err}
	return e.mock
}

// ForgotVerify implements UserServiceHandler
func (mmForgotVerify *UserServiceHandlerMock) ForgotVerify(ctx context.Context, pp1 *connect_go.Request[v1.ForgotVerifyRequest]) (pp2 *connect_go.Response[v1.ForgotVerifyResponse], err error) {
	mm_atomic.AddUint64(&mmForgotVerify.beforeForgotVerifyCounter, 1)
	defer mm_atomic.AddUint64(&mmForgotVerify.afterForgotVerifyCounter, 1)

	if mmForgotVerify.inspectFuncForgotVerify != nil {
		mmForgotVerify.inspectFuncForgotVerify(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockForgotVerifyParams{ctx, pp1}

	// Record call args
	mmForgotVerify.ForgotVerifyMock.mutex.Lock()
	mmForgotVerify.ForgotVerifyMock.callArgs = append(mmForgotVerify.ForgotVerifyMock.callArgs, mm_params)
	mmForgotVerify.ForgotVerifyMock.mutex.Unlock()

	for _, e := range mmForgotVerify.ForgotVerifyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmForgotVerify.ForgotVerifyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmForgotVerify.ForgotVerifyMock.defaultExpectation.Counter, 1)
		mm_want := mmForgotVerify.ForgotVerifyMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockForgotVerifyParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmForgotVerify.t.Errorf("UserServiceHandlerMock.ForgotVerify got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmForgotVerify.ForgotVerifyMock.defaultExpectation.results
		if mm_results == nil {
			mmForgotVerify.t.Fatal("No results are set for the UserServiceHandlerMock.ForgotVerify")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmForgotVerify.funcForgotVerify != nil {
		return mmForgotVerify.funcForgotVerify(ctx, pp1)
	}
	mmForgotVerify.t.Fatalf("Unexpected call to UserServiceHandlerMock.ForgotVerify. %v %v", ctx, pp1)
	return
}

// ForgotVerifyAfterCounter returns a count of finished UserServiceHandlerMock.ForgotVerify invocations
func (mmForgotVerify *UserServiceHandlerMock) ForgotVerifyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotVerify.afterForgotVerifyCounter)
}

// ForgotVerifyBeforeCounter returns a count of UserServiceHandlerMock.ForgotVerify invocations
func (mmForgotVerify *UserServiceHandlerMock) ForgotVerifyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForgotVerify.beforeForgotVerifyCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.ForgotVerify.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmForgotVerify *mUserServiceHandlerMockForgotVerify) Calls() []*UserServiceHandlerMockForgotVerifyParams {
	mmForgotVerify.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockForgotVerifyParams, len(mmForgotVerify.callArgs))
	copy(argCopy, mmForgotVerify.callArgs)

	mmForgotVerify.mutex.RUnlock()

	return argCopy
}

// MinimockForgotVerifyDone returns true if the count of the ForgotVerify invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockForgotVerifyDone() bool {
	for _, e := range m.ForgotVerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotVerifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotVerifyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotVerify != nil && mm_atomic.LoadUint64(&m.afterForgotVerifyCounter) < 1 {
		return false
	}
	return true
}

// MinimockForgotVerifyInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockForgotVerifyInspect() {
	for _, e := range m.ForgotVerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.ForgotVerify with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForgotVerifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForgotVerifyCounter) < 1 {
		if m.ForgotVerifyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.ForgotVerify")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.ForgotVerify with params: %#v", *m.ForgotVerifyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForgotVerify != nil && mm_atomic.LoadUint64(&m.afterForgotVerifyCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.ForgotVerify")
	}
}

type mUserServiceHandlerMockGetSettings struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockGetSettingsExpectation
	expectations       []*UserServiceHandlerMockGetSettingsExpectation

	callArgs []*UserServiceHandlerMockGetSettingsParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockGetSettingsExpectation specifies expectation struct of the UserServiceHandler.GetSettings
type UserServiceHandlerMockGetSettingsExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockGetSettingsParams
	results *UserServiceHandlerMockGetSettingsResults
	Counter uint64
}

// UserServiceHandlerMockGetSettingsParams contains parameters of the UserServiceHandler.GetSettings
type UserServiceHandlerMockGetSettingsParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]
}

// UserServiceHandlerMockGetSettingsResults contains results of the UserServiceHandler.GetSettings
type UserServiceHandlerMockGetSettingsResults struct {
	pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.GetSettings
func (mmGetSettings *mUserServiceHandlerMockGetSettings) Expect(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]) *mUserServiceHandlerMockGetSettings {
	if mmGetSettings.mock.funcGetSettings != nil {
		mmGetSettings.mock.t.Fatalf("UserServiceHandlerMock.GetSettings mock is already set by Set")
	}

	if mmGetSettings.defaultExpectation == nil {
		mmGetSettings.defaultExpectation = &UserServiceHandlerMockGetSettingsExpectation{}
	}

	mmGetSettings.defaultExpectation.params = &UserServiceHandlerMockGetSettingsParams{ctx, pp1}
	for _, e := range mmGetSettings.expectations {
		if minimock.Equal(e.params, mmGetSettings.defaultExpectation.params) {
			mmGetSettings.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSettings.defaultExpectation.params)
		}
	}

	return mmGetSettings
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.GetSettings
func (mmGetSettings *mUserServiceHandlerMockGetSettings) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest])) *mUserServiceHandlerMockGetSettings {
	if mmGetSettings.mock.inspectFuncGetSettings != nil {
		mmGetSettings.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.GetSettings")
	}

	mmGetSettings.mock.inspectFuncGetSettings = f

	return mmGetSettings
}

// Return sets up results that will be returned by UserServiceHandler.GetSettings
func (mmGetSettings *mUserServiceHandlerMockGetSettings) Return(pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse], err error) *UserServiceHandlerMock {
	if mmGetSettings.mock.funcGetSettings != nil {
		mmGetSettings.mock.t.Fatalf("UserServiceHandlerMock.GetSettings mock is already set by Set")
	}

	if mmGetSettings.defaultExpectation == nil {
		mmGetSettings.defaultExpectation = &UserServiceHandlerMockGetSettingsExpectation{mock: mmGetSettings.mock}
	}
	mmGetSettings.defaultExpectation.results = &UserServiceHandlerMockGetSettingsResults{pp2, err}
	return mmGetSettings.mock
}

// Set uses given function f to mock the UserServiceHandler.GetSettings method
func (mmGetSettings *mUserServiceHandlerMockGetSettings) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse], err error)) *UserServiceHandlerMock {
	if mmGetSettings.defaultExpectation != nil {
		mmGetSettings.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.GetSettings method")
	}

	if len(mmGetSettings.expectations) > 0 {
		mmGetSettings.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.GetSettings method")
	}

	mmGetSettings.mock.funcGetSettings = f
	return mmGetSettings.mock
}

// When sets expectation for the UserServiceHandler.GetSettings which will trigger the result defined by the following
// Then helper
func (mmGetSettings *mUserServiceHandlerMockGetSettings) When(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]) *UserServiceHandlerMockGetSettingsExpectation {
	if mmGetSettings.mock.funcGetSettings != nil {
		mmGetSettings.mock.t.Fatalf("UserServiceHandlerMock.GetSettings mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockGetSettingsExpectation{
		mock:   mmGetSettings.mock,
		params: &UserServiceHandlerMockGetSettingsParams{ctx, pp1},
	}
	mmGetSettings.expectations = append(mmGetSettings.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.GetSettings return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockGetSettingsExpectation) Then(pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockGetSettingsResults{pp2, err}
	return e.mock
}

// GetSettings implements UserServiceHandler
func (mmGetSettings *UserServiceHandlerMock) GetSettings(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceGetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceGetSettingsResponse], err error) {
	mm_atomic.AddUint64(&mmGetSettings.beforeGetSettingsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSettings.afterGetSettingsCounter, 1)

	if mmGetSettings.inspectFuncGetSettings != nil {
		mmGetSettings.inspectFuncGetSettings(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockGetSettingsParams{ctx, pp1}

	// Record call args
	mmGetSettings.GetSettingsMock.mutex.Lock()
	mmGetSettings.GetSettingsMock.callArgs = append(mmGetSettings.GetSettingsMock.callArgs, mm_params)
	mmGetSettings.GetSettingsMock.mutex.Unlock()

	for _, e := range mmGetSettings.GetSettingsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmGetSettings.GetSettingsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSettings.GetSettingsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSettings.GetSettingsMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockGetSettingsParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSettings.t.Errorf("UserServiceHandlerMock.GetSettings got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSettings.GetSettingsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSettings.t.Fatal("No results are set for the UserServiceHandlerMock.GetSettings")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmGetSettings.funcGetSettings != nil {
		return mmGetSettings.funcGetSettings(ctx, pp1)
	}
	mmGetSettings.t.Fatalf("Unexpected call to UserServiceHandlerMock.GetSettings. %v %v", ctx, pp1)
	return
}

// GetSettingsAfterCounter returns a count of finished UserServiceHandlerMock.GetSettings invocations
func (mmGetSettings *UserServiceHandlerMock) GetSettingsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSettings.afterGetSettingsCounter)
}

// GetSettingsBeforeCounter returns a count of UserServiceHandlerMock.GetSettings invocations
func (mmGetSettings *UserServiceHandlerMock) GetSettingsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSettings.beforeGetSettingsCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.GetSettings.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSettings *mUserServiceHandlerMockGetSettings) Calls() []*UserServiceHandlerMockGetSettingsParams {
	mmGetSettings.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockGetSettingsParams, len(mmGetSettings.callArgs))
	copy(argCopy, mmGetSettings.callArgs)

	mmGetSettings.mutex.RUnlock()

	return argCopy
}

// MinimockGetSettingsDone returns true if the count of the GetSettings invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockGetSettingsDone() bool {
	for _, e := range m.GetSettingsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSettingsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSettingsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSettings != nil && mm_atomic.LoadUint64(&m.afterGetSettingsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSettingsInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockGetSettingsInspect() {
	for _, e := range m.GetSettingsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.GetSettings with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSettingsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSettingsCounter) < 1 {
		if m.GetSettingsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.GetSettings")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.GetSettings with params: %#v", *m.GetSettingsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSettings != nil && mm_atomic.LoadUint64(&m.afterGetSettingsCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.GetSettings")
	}
}

type mUserServiceHandlerMockSetSettings struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockSetSettingsExpectation
	expectations       []*UserServiceHandlerMockSetSettingsExpectation

	callArgs []*UserServiceHandlerMockSetSettingsParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockSetSettingsExpectation specifies expectation struct of the UserServiceHandler.SetSettings
type UserServiceHandlerMockSetSettingsExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockSetSettingsParams
	results *UserServiceHandlerMockSetSettingsResults
	Counter uint64
}

// UserServiceHandlerMockSetSettingsParams contains parameters of the UserServiceHandler.SetSettings
type UserServiceHandlerMockSetSettingsParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]
}

// UserServiceHandlerMockSetSettingsResults contains results of the UserServiceHandler.SetSettings
type UserServiceHandlerMockSetSettingsResults struct {
	pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.SetSettings
func (mmSetSettings *mUserServiceHandlerMockSetSettings) Expect(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]) *mUserServiceHandlerMockSetSettings {
	if mmSetSettings.mock.funcSetSettings != nil {
		mmSetSettings.mock.t.Fatalf("UserServiceHandlerMock.SetSettings mock is already set by Set")
	}

	if mmSetSettings.defaultExpectation == nil {
		mmSetSettings.defaultExpectation = &UserServiceHandlerMockSetSettingsExpectation{}
	}

	mmSetSettings.defaultExpectation.params = &UserServiceHandlerMockSetSettingsParams{ctx, pp1}
	for _, e := range mmSetSettings.expectations {
		if minimock.Equal(e.params, mmSetSettings.defaultExpectation.params) {
			mmSetSettings.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetSettings.defaultExpectation.params)
		}
	}

	return mmSetSettings
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.SetSettings
func (mmSetSettings *mUserServiceHandlerMockSetSettings) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest])) *mUserServiceHandlerMockSetSettings {
	if mmSetSettings.mock.inspectFuncSetSettings != nil {
		mmSetSettings.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.SetSettings")
	}

	mmSetSettings.mock.inspectFuncSetSettings = f

	return mmSetSettings
}

// Return sets up results that will be returned by UserServiceHandler.SetSettings
func (mmSetSettings *mUserServiceHandlerMockSetSettings) Return(pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse], err error) *UserServiceHandlerMock {
	if mmSetSettings.mock.funcSetSettings != nil {
		mmSetSettings.mock.t.Fatalf("UserServiceHandlerMock.SetSettings mock is already set by Set")
	}

	if mmSetSettings.defaultExpectation == nil {
		mmSetSettings.defaultExpectation = &UserServiceHandlerMockSetSettingsExpectation{mock: mmSetSettings.mock}
	}
	mmSetSettings.defaultExpectation.results = &UserServiceHandlerMockSetSettingsResults{pp2, err}
	return mmSetSettings.mock
}

// Set uses given function f to mock the UserServiceHandler.SetSettings method
func (mmSetSettings *mUserServiceHandlerMockSetSettings) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse], err error)) *UserServiceHandlerMock {
	if mmSetSettings.defaultExpectation != nil {
		mmSetSettings.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.SetSettings method")
	}

	if len(mmSetSettings.expectations) > 0 {
		mmSetSettings.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.SetSettings method")
	}

	mmSetSettings.mock.funcSetSettings = f
	return mmSetSettings.mock
}

// When sets expectation for the UserServiceHandler.SetSettings which will trigger the result defined by the following
// Then helper
func (mmSetSettings *mUserServiceHandlerMockSetSettings) When(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]) *UserServiceHandlerMockSetSettingsExpectation {
	if mmSetSettings.mock.funcSetSettings != nil {
		mmSetSettings.mock.t.Fatalf("UserServiceHandlerMock.SetSettings mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockSetSettingsExpectation{
		mock:   mmSetSettings.mock,
		params: &UserServiceHandlerMockSetSettingsParams{ctx, pp1},
	}
	mmSetSettings.expectations = append(mmSetSettings.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.SetSettings return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockSetSettingsExpectation) Then(pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockSetSettingsResults{pp2, err}
	return e.mock
}

// SetSettings implements UserServiceHandler
func (mmSetSettings *UserServiceHandlerMock) SetSettings(ctx context.Context, pp1 *connect_go.Request[v1.UserServiceSetSettingsRequest]) (pp2 *connect_go.Response[v1.UserServiceSetSettingsResponse], err error) {
	mm_atomic.AddUint64(&mmSetSettings.beforeSetSettingsCounter, 1)
	defer mm_atomic.AddUint64(&mmSetSettings.afterSetSettingsCounter, 1)

	if mmSetSettings.inspectFuncSetSettings != nil {
		mmSetSettings.inspectFuncSetSettings(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockSetSettingsParams{ctx, pp1}

	// Record call args
	mmSetSettings.SetSettingsMock.mutex.Lock()
	mmSetSettings.SetSettingsMock.callArgs = append(mmSetSettings.SetSettingsMock.callArgs, mm_params)
	mmSetSettings.SetSettingsMock.mutex.Unlock()

	for _, e := range mmSetSettings.SetSettingsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmSetSettings.SetSettingsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetSettings.SetSettingsMock.defaultExpectation.Counter, 1)
		mm_want := mmSetSettings.SetSettingsMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockSetSettingsParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetSettings.t.Errorf("UserServiceHandlerMock.SetSettings got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetSettings.SetSettingsMock.defaultExpectation.results
		if mm_results == nil {
			mmSetSettings.t.Fatal("No results are set for the UserServiceHandlerMock.SetSettings")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmSetSettings.funcSetSettings != nil {
		return mmSetSettings.funcSetSettings(ctx, pp1)
	}
	mmSetSettings.t.Fatalf("Unexpected call to UserServiceHandlerMock.SetSettings. %v %v", ctx, pp1)
	return
}

// SetSettingsAfterCounter returns a count of finished UserServiceHandlerMock.SetSettings invocations
func (mmSetSettings *UserServiceHandlerMock) SetSettingsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetSettings.afterSetSettingsCounter)
}

// SetSettingsBeforeCounter returns a count of UserServiceHandlerMock.SetSettings invocations
func (mmSetSettings *UserServiceHandlerMock) SetSettingsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetSettings.beforeSetSettingsCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.SetSettings.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetSettings *mUserServiceHandlerMockSetSettings) Calls() []*UserServiceHandlerMockSetSettingsParams {
	mmSetSettings.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockSetSettingsParams, len(mmSetSettings.callArgs))
	copy(argCopy, mmSetSettings.callArgs)

	mmSetSettings.mutex.RUnlock()

	return argCopy
}

// MinimockSetSettingsDone returns true if the count of the SetSettings invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockSetSettingsDone() bool {
	for _, e := range m.SetSettingsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetSettingsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetSettingsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetSettings != nil && mm_atomic.LoadUint64(&m.afterSetSettingsCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetSettingsInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockSetSettingsInspect() {
	for _, e := range m.SetSettingsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.SetSettings with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetSettingsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetSettingsCounter) < 1 {
		if m.SetSettingsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.SetSettings")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.SetSettings with params: %#v", *m.SetSettingsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetSettings != nil && mm_atomic.LoadUint64(&m.afterSetSettingsCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.SetSettings")
	}
}

type mUserServiceHandlerMockTeamAcceptInvite struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockTeamAcceptInviteExpectation
	expectations       []*UserServiceHandlerMockTeamAcceptInviteExpectation

	callArgs []*UserServiceHandlerMockTeamAcceptInviteParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockTeamAcceptInviteExpectation specifies expectation struct of the UserServiceHandler.TeamAcceptInvite
type UserServiceHandlerMockTeamAcceptInviteExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockTeamAcceptInviteParams
	results *UserServiceHandlerMockTeamAcceptInviteResults
	Counter uint64
}

// UserServiceHandlerMockTeamAcceptInviteParams contains parameters of the UserServiceHandler.TeamAcceptInvite
type UserServiceHandlerMockTeamAcceptInviteParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.TeamAcceptInviteRequest]
}

// UserServiceHandlerMockTeamAcceptInviteResults contains results of the UserServiceHandler.TeamAcceptInvite
type UserServiceHandlerMockTeamAcceptInviteResults struct {
	pp2 *connect_go.Response[v1.TeamAcceptInviteResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.TeamAcceptInvite
func (mmTeamAcceptInvite *mUserServiceHandlerMockTeamAcceptInvite) Expect(ctx context.Context, pp1 *connect_go.Request[v1.TeamAcceptInviteRequest]) *mUserServiceHandlerMockTeamAcceptInvite {
	if mmTeamAcceptInvite.mock.funcTeamAcceptInvite != nil {
		mmTeamAcceptInvite.mock.t.Fatalf("UserServiceHandlerMock.TeamAcceptInvite mock is already set by Set")
	}

	if mmTeamAcceptInvite.defaultExpectation == nil {
		mmTeamAcceptInvite.defaultExpectation = &UserServiceHandlerMockTeamAcceptInviteExpectation{}
	}

	mmTeamAcceptInvite.defaultExpectation.params = &UserServiceHandlerMockTeamAcceptInviteParams{ctx, pp1}
	for _, e := range mmTeamAcceptInvite.expectations {
		if minimock.Equal(e.params, mmTeamAcceptInvite.defaultExpectation.params) {
			mmTeamAcceptInvite.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTeamAcceptInvite.defaultExpectation.params)
		}
	}

	return mmTeamAcceptInvite
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.TeamAcceptInvite
func (mmTeamAcceptInvite *mUserServiceHandlerMockTeamAcceptInvite) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamAcceptInviteRequest])) *mUserServiceHandlerMockTeamAcceptInvite {
	if mmTeamAcceptInvite.mock.inspectFuncTeamAcceptInvite != nil {
		mmTeamAcceptInvite.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.TeamAcceptInvite")
	}

	mmTeamAcceptInvite.mock.inspectFuncTeamAcceptInvite = f

	return mmTeamAcceptInvite
}

// Return sets up results that will be returned by UserServiceHandler.TeamAcceptInvite
func (mmTeamAcceptInvite *mUserServiceHandlerMockTeamAcceptInvite) Return(pp2 *connect_go.Response[v1.TeamAcceptInviteResponse], err error) *UserServiceHandlerMock {
	if mmTeamAcceptInvite.mock.funcTeamAcceptInvite != nil {
		mmTeamAcceptInvite.mock.t.Fatalf("UserServiceHandlerMock.TeamAcceptInvite mock is already set by Set")
	}

	if mmTeamAcceptInvite.defaultExpectation == nil {
		mmTeamAcceptInvite.defaultExpectation = &UserServiceHandlerMockTeamAcceptInviteExpectation{mock: mmTeamAcceptInvite.mock}
	}
	mmTeamAcceptInvite.defaultExpectation.results = &UserServiceHandlerMockTeamAcceptInviteResults{pp2, err}
	return mmTeamAcceptInvite.mock
}

// Set uses given function f to mock the UserServiceHandler.TeamAcceptInvite method
func (mmTeamAcceptInvite *mUserServiceHandlerMockTeamAcceptInvite) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamAcceptInviteRequest]) (pp2 *connect_go.Response[v1.TeamAcceptInviteResponse], err error)) *UserServiceHandlerMock {
	if mmTeamAcceptInvite.defaultExpectation != nil {
		mmTeamAcceptInvite.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.TeamAcceptInvite method")
	}

	if len(mmTeamAcceptInvite.expectations) > 0 {
		mmTeamAcceptInvite.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.TeamAcceptInvite method")
	}

	mmTeamAcceptInvite.mock.funcTeamAcceptInvite = f
	return mmTeamAcceptInvite.mock
}

// When sets expectation for the UserServiceHandler.TeamAcceptInvite which will trigger the result defined by the following
// Then helper
func (mmTeamAcceptInvite *mUserServiceHandlerMockTeamAcceptInvite) When(ctx context.Context, pp1 *connect_go.Request[v1.TeamAcceptInviteRequest]) *UserServiceHandlerMockTeamAcceptInviteExpectation {
	if mmTeamAcceptInvite.mock.funcTeamAcceptInvite != nil {
		mmTeamAcceptInvite.mock.t.Fatalf("UserServiceHandlerMock.TeamAcceptInvite mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockTeamAcceptInviteExpectation{
		mock:   mmTeamAcceptInvite.mock,
		params: &UserServiceHandlerMockTeamAcceptInviteParams{ctx, pp1},
	}
	mmTeamAcceptInvite.expectations = append(mmTeamAcceptInvite.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.TeamAcceptInvite return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockTeamAcceptInviteExpectation) Then(pp2 *connect_go.Response[v1.TeamAcceptInviteResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockTeamAcceptInviteResults{pp2, err}
	return e.mock
}

// TeamAcceptInvite implements UserServiceHandler
func (mmTeamAcceptInvite *UserServiceHandlerMock) TeamAcceptInvite(ctx context.Context, pp1 *connect_go.Request[v1.TeamAcceptInviteRequest]) (pp2 *connect_go.Response[v1.TeamAcceptInviteResponse], err error) {
	mm_atomic.AddUint64(&mmTeamAcceptInvite.beforeTeamAcceptInviteCounter, 1)
	defer mm_atomic.AddUint64(&mmTeamAcceptInvite.afterTeamAcceptInviteCounter, 1)

	if mmTeamAcceptInvite.inspectFuncTeamAcceptInvite != nil {
		mmTeamAcceptInvite.inspectFuncTeamAcceptInvite(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockTeamAcceptInviteParams{ctx, pp1}

	// Record call args
	mmTeamAcceptInvite.TeamAcceptInviteMock.mutex.Lock()
	mmTeamAcceptInvite.TeamAcceptInviteMock.callArgs = append(mmTeamAcceptInvite.TeamAcceptInviteMock.callArgs, mm_params)
	mmTeamAcceptInvite.TeamAcceptInviteMock.mutex.Unlock()

	for _, e := range mmTeamAcceptInvite.TeamAcceptInviteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmTeamAcceptInvite.TeamAcceptInviteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTeamAcceptInvite.TeamAcceptInviteMock.defaultExpectation.Counter, 1)
		mm_want := mmTeamAcceptInvite.TeamAcceptInviteMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockTeamAcceptInviteParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTeamAcceptInvite.t.Errorf("UserServiceHandlerMock.TeamAcceptInvite got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTeamAcceptInvite.TeamAcceptInviteMock.defaultExpectation.results
		if mm_results == nil {
			mmTeamAcceptInvite.t.Fatal("No results are set for the UserServiceHandlerMock.TeamAcceptInvite")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmTeamAcceptInvite.funcTeamAcceptInvite != nil {
		return mmTeamAcceptInvite.funcTeamAcceptInvite(ctx, pp1)
	}
	mmTeamAcceptInvite.t.Fatalf("Unexpected call to UserServiceHandlerMock.TeamAcceptInvite. %v %v", ctx, pp1)
	return
}

// TeamAcceptInviteAfterCounter returns a count of finished UserServiceHandlerMock.TeamAcceptInvite invocations
func (mmTeamAcceptInvite *UserServiceHandlerMock) TeamAcceptInviteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamAcceptInvite.afterTeamAcceptInviteCounter)
}

// TeamAcceptInviteBeforeCounter returns a count of UserServiceHandlerMock.TeamAcceptInvite invocations
func (mmTeamAcceptInvite *UserServiceHandlerMock) TeamAcceptInviteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamAcceptInvite.beforeTeamAcceptInviteCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.TeamAcceptInvite.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTeamAcceptInvite *mUserServiceHandlerMockTeamAcceptInvite) Calls() []*UserServiceHandlerMockTeamAcceptInviteParams {
	mmTeamAcceptInvite.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockTeamAcceptInviteParams, len(mmTeamAcceptInvite.callArgs))
	copy(argCopy, mmTeamAcceptInvite.callArgs)

	mmTeamAcceptInvite.mutex.RUnlock()

	return argCopy
}

// MinimockTeamAcceptInviteDone returns true if the count of the TeamAcceptInvite invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockTeamAcceptInviteDone() bool {
	for _, e := range m.TeamAcceptInviteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamAcceptInviteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamAcceptInviteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamAcceptInvite != nil && mm_atomic.LoadUint64(&m.afterTeamAcceptInviteCounter) < 1 {
		return false
	}
	return true
}

// MinimockTeamAcceptInviteInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockTeamAcceptInviteInspect() {
	for _, e := range m.TeamAcceptInviteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamAcceptInvite with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamAcceptInviteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamAcceptInviteCounter) < 1 {
		if m.TeamAcceptInviteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.TeamAcceptInvite")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamAcceptInvite with params: %#v", *m.TeamAcceptInviteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamAcceptInvite != nil && mm_atomic.LoadUint64(&m.afterTeamAcceptInviteCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.TeamAcceptInvite")
	}
}

type mUserServiceHandlerMockTeamAddMembers struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockTeamAddMembersExpectation
	expectations       []*UserServiceHandlerMockTeamAddMembersExpectation

	callArgs []*UserServiceHandlerMockTeamAddMembersParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockTeamAddMembersExpectation specifies expectation struct of the UserServiceHandler.TeamAddMembers
type UserServiceHandlerMockTeamAddMembersExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockTeamAddMembersParams
	results *UserServiceHandlerMockTeamAddMembersResults
	Counter uint64
}

// UserServiceHandlerMockTeamAddMembersParams contains parameters of the UserServiceHandler.TeamAddMembers
type UserServiceHandlerMockTeamAddMembersParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.TeamAddMembersRequest]
}

// UserServiceHandlerMockTeamAddMembersResults contains results of the UserServiceHandler.TeamAddMembers
type UserServiceHandlerMockTeamAddMembersResults struct {
	pp2 *connect_go.Response[v1.TeamAddMembersResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.TeamAddMembers
func (mmTeamAddMembers *mUserServiceHandlerMockTeamAddMembers) Expect(ctx context.Context, pp1 *connect_go.Request[v1.TeamAddMembersRequest]) *mUserServiceHandlerMockTeamAddMembers {
	if mmTeamAddMembers.mock.funcTeamAddMembers != nil {
		mmTeamAddMembers.mock.t.Fatalf("UserServiceHandlerMock.TeamAddMembers mock is already set by Set")
	}

	if mmTeamAddMembers.defaultExpectation == nil {
		mmTeamAddMembers.defaultExpectation = &UserServiceHandlerMockTeamAddMembersExpectation{}
	}

	mmTeamAddMembers.defaultExpectation.params = &UserServiceHandlerMockTeamAddMembersParams{ctx, pp1}
	for _, e := range mmTeamAddMembers.expectations {
		if minimock.Equal(e.params, mmTeamAddMembers.defaultExpectation.params) {
			mmTeamAddMembers.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTeamAddMembers.defaultExpectation.params)
		}
	}

	return mmTeamAddMembers
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.TeamAddMembers
func (mmTeamAddMembers *mUserServiceHandlerMockTeamAddMembers) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamAddMembersRequest])) *mUserServiceHandlerMockTeamAddMembers {
	if mmTeamAddMembers.mock.inspectFuncTeamAddMembers != nil {
		mmTeamAddMembers.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.TeamAddMembers")
	}

	mmTeamAddMembers.mock.inspectFuncTeamAddMembers = f

	return mmTeamAddMembers
}

// Return sets up results that will be returned by UserServiceHandler.TeamAddMembers
func (mmTeamAddMembers *mUserServiceHandlerMockTeamAddMembers) Return(pp2 *connect_go.Response[v1.TeamAddMembersResponse], err error) *UserServiceHandlerMock {
	if mmTeamAddMembers.mock.funcTeamAddMembers != nil {
		mmTeamAddMembers.mock.t.Fatalf("UserServiceHandlerMock.TeamAddMembers mock is already set by Set")
	}

	if mmTeamAddMembers.defaultExpectation == nil {
		mmTeamAddMembers.defaultExpectation = &UserServiceHandlerMockTeamAddMembersExpectation{mock: mmTeamAddMembers.mock}
	}
	mmTeamAddMembers.defaultExpectation.results = &UserServiceHandlerMockTeamAddMembersResults{pp2, err}
	return mmTeamAddMembers.mock
}

// Set uses given function f to mock the UserServiceHandler.TeamAddMembers method
func (mmTeamAddMembers *mUserServiceHandlerMockTeamAddMembers) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamAddMembersRequest]) (pp2 *connect_go.Response[v1.TeamAddMembersResponse], err error)) *UserServiceHandlerMock {
	if mmTeamAddMembers.defaultExpectation != nil {
		mmTeamAddMembers.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.TeamAddMembers method")
	}

	if len(mmTeamAddMembers.expectations) > 0 {
		mmTeamAddMembers.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.TeamAddMembers method")
	}

	mmTeamAddMembers.mock.funcTeamAddMembers = f
	return mmTeamAddMembers.mock
}

// When sets expectation for the UserServiceHandler.TeamAddMembers which will trigger the result defined by the following
// Then helper
func (mmTeamAddMembers *mUserServiceHandlerMockTeamAddMembers) When(ctx context.Context, pp1 *connect_go.Request[v1.TeamAddMembersRequest]) *UserServiceHandlerMockTeamAddMembersExpectation {
	if mmTeamAddMembers.mock.funcTeamAddMembers != nil {
		mmTeamAddMembers.mock.t.Fatalf("UserServiceHandlerMock.TeamAddMembers mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockTeamAddMembersExpectation{
		mock:   mmTeamAddMembers.mock,
		params: &UserServiceHandlerMockTeamAddMembersParams{ctx, pp1},
	}
	mmTeamAddMembers.expectations = append(mmTeamAddMembers.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.TeamAddMembers return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockTeamAddMembersExpectation) Then(pp2 *connect_go.Response[v1.TeamAddMembersResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockTeamAddMembersResults{pp2, err}
	return e.mock
}

// TeamAddMembers implements UserServiceHandler
func (mmTeamAddMembers *UserServiceHandlerMock) TeamAddMembers(ctx context.Context, pp1 *connect_go.Request[v1.TeamAddMembersRequest]) (pp2 *connect_go.Response[v1.TeamAddMembersResponse], err error) {
	mm_atomic.AddUint64(&mmTeamAddMembers.beforeTeamAddMembersCounter, 1)
	defer mm_atomic.AddUint64(&mmTeamAddMembers.afterTeamAddMembersCounter, 1)

	if mmTeamAddMembers.inspectFuncTeamAddMembers != nil {
		mmTeamAddMembers.inspectFuncTeamAddMembers(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockTeamAddMembersParams{ctx, pp1}

	// Record call args
	mmTeamAddMembers.TeamAddMembersMock.mutex.Lock()
	mmTeamAddMembers.TeamAddMembersMock.callArgs = append(mmTeamAddMembers.TeamAddMembersMock.callArgs, mm_params)
	mmTeamAddMembers.TeamAddMembersMock.mutex.Unlock()

	for _, e := range mmTeamAddMembers.TeamAddMembersMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmTeamAddMembers.TeamAddMembersMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTeamAddMembers.TeamAddMembersMock.defaultExpectation.Counter, 1)
		mm_want := mmTeamAddMembers.TeamAddMembersMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockTeamAddMembersParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTeamAddMembers.t.Errorf("UserServiceHandlerMock.TeamAddMembers got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTeamAddMembers.TeamAddMembersMock.defaultExpectation.results
		if mm_results == nil {
			mmTeamAddMembers.t.Fatal("No results are set for the UserServiceHandlerMock.TeamAddMembers")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmTeamAddMembers.funcTeamAddMembers != nil {
		return mmTeamAddMembers.funcTeamAddMembers(ctx, pp1)
	}
	mmTeamAddMembers.t.Fatalf("Unexpected call to UserServiceHandlerMock.TeamAddMembers. %v %v", ctx, pp1)
	return
}

// TeamAddMembersAfterCounter returns a count of finished UserServiceHandlerMock.TeamAddMembers invocations
func (mmTeamAddMembers *UserServiceHandlerMock) TeamAddMembersAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamAddMembers.afterTeamAddMembersCounter)
}

// TeamAddMembersBeforeCounter returns a count of UserServiceHandlerMock.TeamAddMembers invocations
func (mmTeamAddMembers *UserServiceHandlerMock) TeamAddMembersBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamAddMembers.beforeTeamAddMembersCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.TeamAddMembers.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTeamAddMembers *mUserServiceHandlerMockTeamAddMembers) Calls() []*UserServiceHandlerMockTeamAddMembersParams {
	mmTeamAddMembers.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockTeamAddMembersParams, len(mmTeamAddMembers.callArgs))
	copy(argCopy, mmTeamAddMembers.callArgs)

	mmTeamAddMembers.mutex.RUnlock()

	return argCopy
}

// MinimockTeamAddMembersDone returns true if the count of the TeamAddMembers invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockTeamAddMembersDone() bool {
	for _, e := range m.TeamAddMembersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamAddMembersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamAddMembersCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamAddMembers != nil && mm_atomic.LoadUint64(&m.afterTeamAddMembersCounter) < 1 {
		return false
	}
	return true
}

// MinimockTeamAddMembersInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockTeamAddMembersInspect() {
	for _, e := range m.TeamAddMembersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamAddMembers with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamAddMembersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamAddMembersCounter) < 1 {
		if m.TeamAddMembersMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.TeamAddMembers")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamAddMembers with params: %#v", *m.TeamAddMembersMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamAddMembers != nil && mm_atomic.LoadUint64(&m.afterTeamAddMembersCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.TeamAddMembers")
	}
}

type mUserServiceHandlerMockTeamCreate struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockTeamCreateExpectation
	expectations       []*UserServiceHandlerMockTeamCreateExpectation

	callArgs []*UserServiceHandlerMockTeamCreateParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockTeamCreateExpectation specifies expectation struct of the UserServiceHandler.TeamCreate
type UserServiceHandlerMockTeamCreateExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockTeamCreateParams
	results *UserServiceHandlerMockTeamCreateResults
	Counter uint64
}

// UserServiceHandlerMockTeamCreateParams contains parameters of the UserServiceHandler.TeamCreate
type UserServiceHandlerMockTeamCreateParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.TeamCreateRequest]
}

// UserServiceHandlerMockTeamCreateResults contains results of the UserServiceHandler.TeamCreate
type UserServiceHandlerMockTeamCreateResults struct {
	pp2 *connect_go.Response[v1.TeamCreateResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.TeamCreate
func (mmTeamCreate *mUserServiceHandlerMockTeamCreate) Expect(ctx context.Context, pp1 *connect_go.Request[v1.TeamCreateRequest]) *mUserServiceHandlerMockTeamCreate {
	if mmTeamCreate.mock.funcTeamCreate != nil {
		mmTeamCreate.mock.t.Fatalf("UserServiceHandlerMock.TeamCreate mock is already set by Set")
	}

	if mmTeamCreate.defaultExpectation == nil {
		mmTeamCreate.defaultExpectation = &UserServiceHandlerMockTeamCreateExpectation{}
	}

	mmTeamCreate.defaultExpectation.params = &UserServiceHandlerMockTeamCreateParams{ctx, pp1}
	for _, e := range mmTeamCreate.expectations {
		if minimock.Equal(e.params, mmTeamCreate.defaultExpectation.params) {
			mmTeamCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTeamCreate.defaultExpectation.params)
		}
	}

	return mmTeamCreate
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.TeamCreate
func (mmTeamCreate *mUserServiceHandlerMockTeamCreate) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamCreateRequest])) *mUserServiceHandlerMockTeamCreate {
	if mmTeamCreate.mock.inspectFuncTeamCreate != nil {
		mmTeamCreate.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.TeamCreate")
	}

	mmTeamCreate.mock.inspectFuncTeamCreate = f

	return mmTeamCreate
}

// Return sets up results that will be returned by UserServiceHandler.TeamCreate
func (mmTeamCreate *mUserServiceHandlerMockTeamCreate) Return(pp2 *connect_go.Response[v1.TeamCreateResponse], err error) *UserServiceHandlerMock {
	if mmTeamCreate.mock.funcTeamCreate != nil {
		mmTeamCreate.mock.t.Fatalf("UserServiceHandlerMock.TeamCreate mock is already set by Set")
	}

	if mmTeamCreate.defaultExpectation == nil {
		mmTeamCreate.defaultExpectation = &UserServiceHandlerMockTeamCreateExpectation{mock: mmTeamCreate.mock}
	}
	mmTeamCreate.defaultExpectation.results = &UserServiceHandlerMockTeamCreateResults{pp2, err}
	return mmTeamCreate.mock
}

// Set uses given function f to mock the UserServiceHandler.TeamCreate method
func (mmTeamCreate *mUserServiceHandlerMockTeamCreate) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamCreateRequest]) (pp2 *connect_go.Response[v1.TeamCreateResponse], err error)) *UserServiceHandlerMock {
	if mmTeamCreate.defaultExpectation != nil {
		mmTeamCreate.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.TeamCreate method")
	}

	if len(mmTeamCreate.expectations) > 0 {
		mmTeamCreate.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.TeamCreate method")
	}

	mmTeamCreate.mock.funcTeamCreate = f
	return mmTeamCreate.mock
}

// When sets expectation for the UserServiceHandler.TeamCreate which will trigger the result defined by the following
// Then helper
func (mmTeamCreate *mUserServiceHandlerMockTeamCreate) When(ctx context.Context, pp1 *connect_go.Request[v1.TeamCreateRequest]) *UserServiceHandlerMockTeamCreateExpectation {
	if mmTeamCreate.mock.funcTeamCreate != nil {
		mmTeamCreate.mock.t.Fatalf("UserServiceHandlerMock.TeamCreate mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockTeamCreateExpectation{
		mock:   mmTeamCreate.mock,
		params: &UserServiceHandlerMockTeamCreateParams{ctx, pp1},
	}
	mmTeamCreate.expectations = append(mmTeamCreate.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.TeamCreate return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockTeamCreateExpectation) Then(pp2 *connect_go.Response[v1.TeamCreateResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockTeamCreateResults{pp2, err}
	return e.mock
}

// TeamCreate implements UserServiceHandler
func (mmTeamCreate *UserServiceHandlerMock) TeamCreate(ctx context.Context, pp1 *connect_go.Request[v1.TeamCreateRequest]) (pp2 *connect_go.Response[v1.TeamCreateResponse], err error) {
	mm_atomic.AddUint64(&mmTeamCreate.beforeTeamCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmTeamCreate.afterTeamCreateCounter, 1)

	if mmTeamCreate.inspectFuncTeamCreate != nil {
		mmTeamCreate.inspectFuncTeamCreate(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockTeamCreateParams{ctx, pp1}

	// Record call args
	mmTeamCreate.TeamCreateMock.mutex.Lock()
	mmTeamCreate.TeamCreateMock.callArgs = append(mmTeamCreate.TeamCreateMock.callArgs, mm_params)
	mmTeamCreate.TeamCreateMock.mutex.Unlock()

	for _, e := range mmTeamCreate.TeamCreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmTeamCreate.TeamCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTeamCreate.TeamCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmTeamCreate.TeamCreateMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockTeamCreateParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTeamCreate.t.Errorf("UserServiceHandlerMock.TeamCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTeamCreate.TeamCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmTeamCreate.t.Fatal("No results are set for the UserServiceHandlerMock.TeamCreate")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmTeamCreate.funcTeamCreate != nil {
		return mmTeamCreate.funcTeamCreate(ctx, pp1)
	}
	mmTeamCreate.t.Fatalf("Unexpected call to UserServiceHandlerMock.TeamCreate. %v %v", ctx, pp1)
	return
}

// TeamCreateAfterCounter returns a count of finished UserServiceHandlerMock.TeamCreate invocations
func (mmTeamCreate *UserServiceHandlerMock) TeamCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamCreate.afterTeamCreateCounter)
}

// TeamCreateBeforeCounter returns a count of UserServiceHandlerMock.TeamCreate invocations
func (mmTeamCreate *UserServiceHandlerMock) TeamCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamCreate.beforeTeamCreateCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.TeamCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTeamCreate *mUserServiceHandlerMockTeamCreate) Calls() []*UserServiceHandlerMockTeamCreateParams {
	mmTeamCreate.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockTeamCreateParams, len(mmTeamCreate.callArgs))
	copy(argCopy, mmTeamCreate.callArgs)

	mmTeamCreate.mutex.RUnlock()

	return argCopy
}

// MinimockTeamCreateDone returns true if the count of the TeamCreate invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockTeamCreateDone() bool {
	for _, e := range m.TeamCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamCreate != nil && mm_atomic.LoadUint64(&m.afterTeamCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockTeamCreateInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockTeamCreateInspect() {
	for _, e := range m.TeamCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamCreateCounter) < 1 {
		if m.TeamCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.TeamCreate")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamCreate with params: %#v", *m.TeamCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamCreate != nil && mm_atomic.LoadUint64(&m.afterTeamCreateCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.TeamCreate")
	}
}

type mUserServiceHandlerMockTeamDelete struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockTeamDeleteExpectation
	expectations       []*UserServiceHandlerMockTeamDeleteExpectation

	callArgs []*UserServiceHandlerMockTeamDeleteParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockTeamDeleteExpectation specifies expectation struct of the UserServiceHandler.TeamDelete
type UserServiceHandlerMockTeamDeleteExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockTeamDeleteParams
	results *UserServiceHandlerMockTeamDeleteResults
	Counter uint64
}

// UserServiceHandlerMockTeamDeleteParams contains parameters of the UserServiceHandler.TeamDelete
type UserServiceHandlerMockTeamDeleteParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.TeamDeleteRequest]
}

// UserServiceHandlerMockTeamDeleteResults contains results of the UserServiceHandler.TeamDelete
type UserServiceHandlerMockTeamDeleteResults struct {
	pp2 *connect_go.Response[v1.TeamDeleteResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.TeamDelete
func (mmTeamDelete *mUserServiceHandlerMockTeamDelete) Expect(ctx context.Context, pp1 *connect_go.Request[v1.TeamDeleteRequest]) *mUserServiceHandlerMockTeamDelete {
	if mmTeamDelete.mock.funcTeamDelete != nil {
		mmTeamDelete.mock.t.Fatalf("UserServiceHandlerMock.TeamDelete mock is already set by Set")
	}

	if mmTeamDelete.defaultExpectation == nil {
		mmTeamDelete.defaultExpectation = &UserServiceHandlerMockTeamDeleteExpectation{}
	}

	mmTeamDelete.defaultExpectation.params = &UserServiceHandlerMockTeamDeleteParams{ctx, pp1}
	for _, e := range mmTeamDelete.expectations {
		if minimock.Equal(e.params, mmTeamDelete.defaultExpectation.params) {
			mmTeamDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTeamDelete.defaultExpectation.params)
		}
	}

	return mmTeamDelete
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.TeamDelete
func (mmTeamDelete *mUserServiceHandlerMockTeamDelete) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamDeleteRequest])) *mUserServiceHandlerMockTeamDelete {
	if mmTeamDelete.mock.inspectFuncTeamDelete != nil {
		mmTeamDelete.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.TeamDelete")
	}

	mmTeamDelete.mock.inspectFuncTeamDelete = f

	return mmTeamDelete
}

// Return sets up results that will be returned by UserServiceHandler.TeamDelete
func (mmTeamDelete *mUserServiceHandlerMockTeamDelete) Return(pp2 *connect_go.Response[v1.TeamDeleteResponse], err error) *UserServiceHandlerMock {
	if mmTeamDelete.mock.funcTeamDelete != nil {
		mmTeamDelete.mock.t.Fatalf("UserServiceHandlerMock.TeamDelete mock is already set by Set")
	}

	if mmTeamDelete.defaultExpectation == nil {
		mmTeamDelete.defaultExpectation = &UserServiceHandlerMockTeamDeleteExpectation{mock: mmTeamDelete.mock}
	}
	mmTeamDelete.defaultExpectation.results = &UserServiceHandlerMockTeamDeleteResults{pp2, err}
	return mmTeamDelete.mock
}

// Set uses given function f to mock the UserServiceHandler.TeamDelete method
func (mmTeamDelete *mUserServiceHandlerMockTeamDelete) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamDeleteRequest]) (pp2 *connect_go.Response[v1.TeamDeleteResponse], err error)) *UserServiceHandlerMock {
	if mmTeamDelete.defaultExpectation != nil {
		mmTeamDelete.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.TeamDelete method")
	}

	if len(mmTeamDelete.expectations) > 0 {
		mmTeamDelete.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.TeamDelete method")
	}

	mmTeamDelete.mock.funcTeamDelete = f
	return mmTeamDelete.mock
}

// When sets expectation for the UserServiceHandler.TeamDelete which will trigger the result defined by the following
// Then helper
func (mmTeamDelete *mUserServiceHandlerMockTeamDelete) When(ctx context.Context, pp1 *connect_go.Request[v1.TeamDeleteRequest]) *UserServiceHandlerMockTeamDeleteExpectation {
	if mmTeamDelete.mock.funcTeamDelete != nil {
		mmTeamDelete.mock.t.Fatalf("UserServiceHandlerMock.TeamDelete mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockTeamDeleteExpectation{
		mock:   mmTeamDelete.mock,
		params: &UserServiceHandlerMockTeamDeleteParams{ctx, pp1},
	}
	mmTeamDelete.expectations = append(mmTeamDelete.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.TeamDelete return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockTeamDeleteExpectation) Then(pp2 *connect_go.Response[v1.TeamDeleteResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockTeamDeleteResults{pp2, err}
	return e.mock
}

// TeamDelete implements UserServiceHandler
func (mmTeamDelete *UserServiceHandlerMock) TeamDelete(ctx context.Context, pp1 *connect_go.Request[v1.TeamDeleteRequest]) (pp2 *connect_go.Response[v1.TeamDeleteResponse], err error) {
	mm_atomic.AddUint64(&mmTeamDelete.beforeTeamDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmTeamDelete.afterTeamDeleteCounter, 1)

	if mmTeamDelete.inspectFuncTeamDelete != nil {
		mmTeamDelete.inspectFuncTeamDelete(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockTeamDeleteParams{ctx, pp1}

	// Record call args
	mmTeamDelete.TeamDeleteMock.mutex.Lock()
	mmTeamDelete.TeamDeleteMock.callArgs = append(mmTeamDelete.TeamDeleteMock.callArgs, mm_params)
	mmTeamDelete.TeamDeleteMock.mutex.Unlock()

	for _, e := range mmTeamDelete.TeamDeleteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmTeamDelete.TeamDeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTeamDelete.TeamDeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmTeamDelete.TeamDeleteMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockTeamDeleteParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTeamDelete.t.Errorf("UserServiceHandlerMock.TeamDelete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTeamDelete.TeamDeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmTeamDelete.t.Fatal("No results are set for the UserServiceHandlerMock.TeamDelete")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmTeamDelete.funcTeamDelete != nil {
		return mmTeamDelete.funcTeamDelete(ctx, pp1)
	}
	mmTeamDelete.t.Fatalf("Unexpected call to UserServiceHandlerMock.TeamDelete. %v %v", ctx, pp1)
	return
}

// TeamDeleteAfterCounter returns a count of finished UserServiceHandlerMock.TeamDelete invocations
func (mmTeamDelete *UserServiceHandlerMock) TeamDeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamDelete.afterTeamDeleteCounter)
}

// TeamDeleteBeforeCounter returns a count of UserServiceHandlerMock.TeamDelete invocations
func (mmTeamDelete *UserServiceHandlerMock) TeamDeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamDelete.beforeTeamDeleteCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.TeamDelete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTeamDelete *mUserServiceHandlerMockTeamDelete) Calls() []*UserServiceHandlerMockTeamDeleteParams {
	mmTeamDelete.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockTeamDeleteParams, len(mmTeamDelete.callArgs))
	copy(argCopy, mmTeamDelete.callArgs)

	mmTeamDelete.mutex.RUnlock()

	return argCopy
}

// MinimockTeamDeleteDone returns true if the count of the TeamDelete invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockTeamDeleteDone() bool {
	for _, e := range m.TeamDeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamDeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamDelete != nil && mm_atomic.LoadUint64(&m.afterTeamDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockTeamDeleteInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockTeamDeleteInspect() {
	for _, e := range m.TeamDeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamDelete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamDeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamDeleteCounter) < 1 {
		if m.TeamDeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.TeamDelete")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamDelete with params: %#v", *m.TeamDeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamDelete != nil && mm_atomic.LoadUint64(&m.afterTeamDeleteCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.TeamDelete")
	}
}

type mUserServiceHandlerMockTeamList struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockTeamListExpectation
	expectations       []*UserServiceHandlerMockTeamListExpectation

	callArgs []*UserServiceHandlerMockTeamListParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockTeamListExpectation specifies expectation struct of the UserServiceHandler.TeamList
type UserServiceHandlerMockTeamListExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockTeamListParams
	results *UserServiceHandlerMockTeamListResults
	Counter uint64
}

// UserServiceHandlerMockTeamListParams contains parameters of the UserServiceHandler.TeamList
type UserServiceHandlerMockTeamListParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.TeamListRequest]
}

// UserServiceHandlerMockTeamListResults contains results of the UserServiceHandler.TeamList
type UserServiceHandlerMockTeamListResults struct {
	pp2 *connect_go.Response[v1.TeamListResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.TeamList
func (mmTeamList *mUserServiceHandlerMockTeamList) Expect(ctx context.Context, pp1 *connect_go.Request[v1.TeamListRequest]) *mUserServiceHandlerMockTeamList {
	if mmTeamList.mock.funcTeamList != nil {
		mmTeamList.mock.t.Fatalf("UserServiceHandlerMock.TeamList mock is already set by Set")
	}

	if mmTeamList.defaultExpectation == nil {
		mmTeamList.defaultExpectation = &UserServiceHandlerMockTeamListExpectation{}
	}

	mmTeamList.defaultExpectation.params = &UserServiceHandlerMockTeamListParams{ctx, pp1}
	for _, e := range mmTeamList.expectations {
		if minimock.Equal(e.params, mmTeamList.defaultExpectation.params) {
			mmTeamList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTeamList.defaultExpectation.params)
		}
	}

	return mmTeamList
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.TeamList
func (mmTeamList *mUserServiceHandlerMockTeamList) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamListRequest])) *mUserServiceHandlerMockTeamList {
	if mmTeamList.mock.inspectFuncTeamList != nil {
		mmTeamList.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.TeamList")
	}

	mmTeamList.mock.inspectFuncTeamList = f

	return mmTeamList
}

// Return sets up results that will be returned by UserServiceHandler.TeamList
func (mmTeamList *mUserServiceHandlerMockTeamList) Return(pp2 *connect_go.Response[v1.TeamListResponse], err error) *UserServiceHandlerMock {
	if mmTeamList.mock.funcTeamList != nil {
		mmTeamList.mock.t.Fatalf("UserServiceHandlerMock.TeamList mock is already set by Set")
	}

	if mmTeamList.defaultExpectation == nil {
		mmTeamList.defaultExpectation = &UserServiceHandlerMockTeamListExpectation{mock: mmTeamList.mock}
	}
	mmTeamList.defaultExpectation.results = &UserServiceHandlerMockTeamListResults{pp2, err}
	return mmTeamList.mock
}

// Set uses given function f to mock the UserServiceHandler.TeamList method
func (mmTeamList *mUserServiceHandlerMockTeamList) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamListRequest]) (pp2 *connect_go.Response[v1.TeamListResponse], err error)) *UserServiceHandlerMock {
	if mmTeamList.defaultExpectation != nil {
		mmTeamList.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.TeamList method")
	}

	if len(mmTeamList.expectations) > 0 {
		mmTeamList.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.TeamList method")
	}

	mmTeamList.mock.funcTeamList = f
	return mmTeamList.mock
}

// When sets expectation for the UserServiceHandler.TeamList which will trigger the result defined by the following
// Then helper
func (mmTeamList *mUserServiceHandlerMockTeamList) When(ctx context.Context, pp1 *connect_go.Request[v1.TeamListRequest]) *UserServiceHandlerMockTeamListExpectation {
	if mmTeamList.mock.funcTeamList != nil {
		mmTeamList.mock.t.Fatalf("UserServiceHandlerMock.TeamList mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockTeamListExpectation{
		mock:   mmTeamList.mock,
		params: &UserServiceHandlerMockTeamListParams{ctx, pp1},
	}
	mmTeamList.expectations = append(mmTeamList.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.TeamList return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockTeamListExpectation) Then(pp2 *connect_go.Response[v1.TeamListResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockTeamListResults{pp2, err}
	return e.mock
}

// TeamList implements UserServiceHandler
func (mmTeamList *UserServiceHandlerMock) TeamList(ctx context.Context, pp1 *connect_go.Request[v1.TeamListRequest]) (pp2 *connect_go.Response[v1.TeamListResponse], err error) {
	mm_atomic.AddUint64(&mmTeamList.beforeTeamListCounter, 1)
	defer mm_atomic.AddUint64(&mmTeamList.afterTeamListCounter, 1)

	if mmTeamList.inspectFuncTeamList != nil {
		mmTeamList.inspectFuncTeamList(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockTeamListParams{ctx, pp1}

	// Record call args
	mmTeamList.TeamListMock.mutex.Lock()
	mmTeamList.TeamListMock.callArgs = append(mmTeamList.TeamListMock.callArgs, mm_params)
	mmTeamList.TeamListMock.mutex.Unlock()

	for _, e := range mmTeamList.TeamListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmTeamList.TeamListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTeamList.TeamListMock.defaultExpectation.Counter, 1)
		mm_want := mmTeamList.TeamListMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockTeamListParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTeamList.t.Errorf("UserServiceHandlerMock.TeamList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTeamList.TeamListMock.defaultExpectation.results
		if mm_results == nil {
			mmTeamList.t.Fatal("No results are set for the UserServiceHandlerMock.TeamList")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmTeamList.funcTeamList != nil {
		return mmTeamList.funcTeamList(ctx, pp1)
	}
	mmTeamList.t.Fatalf("Unexpected call to UserServiceHandlerMock.TeamList. %v %v", ctx, pp1)
	return
}

// TeamListAfterCounter returns a count of finished UserServiceHandlerMock.TeamList invocations
func (mmTeamList *UserServiceHandlerMock) TeamListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamList.afterTeamListCounter)
}

// TeamListBeforeCounter returns a count of UserServiceHandlerMock.TeamList invocations
func (mmTeamList *UserServiceHandlerMock) TeamListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamList.beforeTeamListCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.TeamList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTeamList *mUserServiceHandlerMockTeamList) Calls() []*UserServiceHandlerMockTeamListParams {
	mmTeamList.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockTeamListParams, len(mmTeamList.callArgs))
	copy(argCopy, mmTeamList.callArgs)

	mmTeamList.mutex.RUnlock()

	return argCopy
}

// MinimockTeamListDone returns true if the count of the TeamList invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockTeamListDone() bool {
	for _, e := range m.TeamListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamList != nil && mm_atomic.LoadUint64(&m.afterTeamListCounter) < 1 {
		return false
	}
	return true
}

// MinimockTeamListInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockTeamListInspect() {
	for _, e := range m.TeamListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamListCounter) < 1 {
		if m.TeamListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.TeamList")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamList with params: %#v", *m.TeamListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamList != nil && mm_atomic.LoadUint64(&m.afterTeamListCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.TeamList")
	}
}

type mUserServiceHandlerMockTeamListMembers struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockTeamListMembersExpectation
	expectations       []*UserServiceHandlerMockTeamListMembersExpectation

	callArgs []*UserServiceHandlerMockTeamListMembersParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockTeamListMembersExpectation specifies expectation struct of the UserServiceHandler.TeamListMembers
type UserServiceHandlerMockTeamListMembersExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockTeamListMembersParams
	results *UserServiceHandlerMockTeamListMembersResults
	Counter uint64
}

// UserServiceHandlerMockTeamListMembersParams contains parameters of the UserServiceHandler.TeamListMembers
type UserServiceHandlerMockTeamListMembersParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.TeamListMembersRequest]
}

// UserServiceHandlerMockTeamListMembersResults contains results of the UserServiceHandler.TeamListMembers
type UserServiceHandlerMockTeamListMembersResults struct {
	pp2 *connect_go.Response[v1.TeamListMembersResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.TeamListMembers
func (mmTeamListMembers *mUserServiceHandlerMockTeamListMembers) Expect(ctx context.Context, pp1 *connect_go.Request[v1.TeamListMembersRequest]) *mUserServiceHandlerMockTeamListMembers {
	if mmTeamListMembers.mock.funcTeamListMembers != nil {
		mmTeamListMembers.mock.t.Fatalf("UserServiceHandlerMock.TeamListMembers mock is already set by Set")
	}

	if mmTeamListMembers.defaultExpectation == nil {
		mmTeamListMembers.defaultExpectation = &UserServiceHandlerMockTeamListMembersExpectation{}
	}

	mmTeamListMembers.defaultExpectation.params = &UserServiceHandlerMockTeamListMembersParams{ctx, pp1}
	for _, e := range mmTeamListMembers.expectations {
		if minimock.Equal(e.params, mmTeamListMembers.defaultExpectation.params) {
			mmTeamListMembers.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTeamListMembers.defaultExpectation.params)
		}
	}

	return mmTeamListMembers
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.TeamListMembers
func (mmTeamListMembers *mUserServiceHandlerMockTeamListMembers) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamListMembersRequest])) *mUserServiceHandlerMockTeamListMembers {
	if mmTeamListMembers.mock.inspectFuncTeamListMembers != nil {
		mmTeamListMembers.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.TeamListMembers")
	}

	mmTeamListMembers.mock.inspectFuncTeamListMembers = f

	return mmTeamListMembers
}

// Return sets up results that will be returned by UserServiceHandler.TeamListMembers
func (mmTeamListMembers *mUserServiceHandlerMockTeamListMembers) Return(pp2 *connect_go.Response[v1.TeamListMembersResponse], err error) *UserServiceHandlerMock {
	if mmTeamListMembers.mock.funcTeamListMembers != nil {
		mmTeamListMembers.mock.t.Fatalf("UserServiceHandlerMock.TeamListMembers mock is already set by Set")
	}

	if mmTeamListMembers.defaultExpectation == nil {
		mmTeamListMembers.defaultExpectation = &UserServiceHandlerMockTeamListMembersExpectation{mock: mmTeamListMembers.mock}
	}
	mmTeamListMembers.defaultExpectation.results = &UserServiceHandlerMockTeamListMembersResults{pp2, err}
	return mmTeamListMembers.mock
}

// Set uses given function f to mock the UserServiceHandler.TeamListMembers method
func (mmTeamListMembers *mUserServiceHandlerMockTeamListMembers) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamListMembersRequest]) (pp2 *connect_go.Response[v1.TeamListMembersResponse], err error)) *UserServiceHandlerMock {
	if mmTeamListMembers.defaultExpectation != nil {
		mmTeamListMembers.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.TeamListMembers method")
	}

	if len(mmTeamListMembers.expectations) > 0 {
		mmTeamListMembers.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.TeamListMembers method")
	}

	mmTeamListMembers.mock.funcTeamListMembers = f
	return mmTeamListMembers.mock
}

// When sets expectation for the UserServiceHandler.TeamListMembers which will trigger the result defined by the following
// Then helper
func (mmTeamListMembers *mUserServiceHandlerMockTeamListMembers) When(ctx context.Context, pp1 *connect_go.Request[v1.TeamListMembersRequest]) *UserServiceHandlerMockTeamListMembersExpectation {
	if mmTeamListMembers.mock.funcTeamListMembers != nil {
		mmTeamListMembers.mock.t.Fatalf("UserServiceHandlerMock.TeamListMembers mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockTeamListMembersExpectation{
		mock:   mmTeamListMembers.mock,
		params: &UserServiceHandlerMockTeamListMembersParams{ctx, pp1},
	}
	mmTeamListMembers.expectations = append(mmTeamListMembers.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.TeamListMembers return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockTeamListMembersExpectation) Then(pp2 *connect_go.Response[v1.TeamListMembersResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockTeamListMembersResults{pp2, err}
	return e.mock
}

// TeamListMembers implements UserServiceHandler
func (mmTeamListMembers *UserServiceHandlerMock) TeamListMembers(ctx context.Context, pp1 *connect_go.Request[v1.TeamListMembersRequest]) (pp2 *connect_go.Response[v1.TeamListMembersResponse], err error) {
	mm_atomic.AddUint64(&mmTeamListMembers.beforeTeamListMembersCounter, 1)
	defer mm_atomic.AddUint64(&mmTeamListMembers.afterTeamListMembersCounter, 1)

	if mmTeamListMembers.inspectFuncTeamListMembers != nil {
		mmTeamListMembers.inspectFuncTeamListMembers(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockTeamListMembersParams{ctx, pp1}

	// Record call args
	mmTeamListMembers.TeamListMembersMock.mutex.Lock()
	mmTeamListMembers.TeamListMembersMock.callArgs = append(mmTeamListMembers.TeamListMembersMock.callArgs, mm_params)
	mmTeamListMembers.TeamListMembersMock.mutex.Unlock()

	for _, e := range mmTeamListMembers.TeamListMembersMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmTeamListMembers.TeamListMembersMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTeamListMembers.TeamListMembersMock.defaultExpectation.Counter, 1)
		mm_want := mmTeamListMembers.TeamListMembersMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockTeamListMembersParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTeamListMembers.t.Errorf("UserServiceHandlerMock.TeamListMembers got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTeamListMembers.TeamListMembersMock.defaultExpectation.results
		if mm_results == nil {
			mmTeamListMembers.t.Fatal("No results are set for the UserServiceHandlerMock.TeamListMembers")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmTeamListMembers.funcTeamListMembers != nil {
		return mmTeamListMembers.funcTeamListMembers(ctx, pp1)
	}
	mmTeamListMembers.t.Fatalf("Unexpected call to UserServiceHandlerMock.TeamListMembers. %v %v", ctx, pp1)
	return
}

// TeamListMembersAfterCounter returns a count of finished UserServiceHandlerMock.TeamListMembers invocations
func (mmTeamListMembers *UserServiceHandlerMock) TeamListMembersAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamListMembers.afterTeamListMembersCounter)
}

// TeamListMembersBeforeCounter returns a count of UserServiceHandlerMock.TeamListMembers invocations
func (mmTeamListMembers *UserServiceHandlerMock) TeamListMembersBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamListMembers.beforeTeamListMembersCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.TeamListMembers.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTeamListMembers *mUserServiceHandlerMockTeamListMembers) Calls() []*UserServiceHandlerMockTeamListMembersParams {
	mmTeamListMembers.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockTeamListMembersParams, len(mmTeamListMembers.callArgs))
	copy(argCopy, mmTeamListMembers.callArgs)

	mmTeamListMembers.mutex.RUnlock()

	return argCopy
}

// MinimockTeamListMembersDone returns true if the count of the TeamListMembers invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockTeamListMembersDone() bool {
	for _, e := range m.TeamListMembersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamListMembersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamListMembersCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamListMembers != nil && mm_atomic.LoadUint64(&m.afterTeamListMembersCounter) < 1 {
		return false
	}
	return true
}

// MinimockTeamListMembersInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockTeamListMembersInspect() {
	for _, e := range m.TeamListMembersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamListMembers with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamListMembersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamListMembersCounter) < 1 {
		if m.TeamListMembersMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.TeamListMembers")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamListMembers with params: %#v", *m.TeamListMembersMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamListMembers != nil && mm_atomic.LoadUint64(&m.afterTeamListMembersCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.TeamListMembers")
	}
}

type mUserServiceHandlerMockTeamRemoveMembers struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockTeamRemoveMembersExpectation
	expectations       []*UserServiceHandlerMockTeamRemoveMembersExpectation

	callArgs []*UserServiceHandlerMockTeamRemoveMembersParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockTeamRemoveMembersExpectation specifies expectation struct of the UserServiceHandler.TeamRemoveMembers
type UserServiceHandlerMockTeamRemoveMembersExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockTeamRemoveMembersParams
	results *UserServiceHandlerMockTeamRemoveMembersResults
	Counter uint64
}

// UserServiceHandlerMockTeamRemoveMembersParams contains parameters of the UserServiceHandler.TeamRemoveMembers
type UserServiceHandlerMockTeamRemoveMembersParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.TeamRemoveMembersRequest]
}

// UserServiceHandlerMockTeamRemoveMembersResults contains results of the UserServiceHandler.TeamRemoveMembers
type UserServiceHandlerMockTeamRemoveMembersResults struct {
	pp2 *connect_go.Response[v1.TeamRemoveMembersResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.TeamRemoveMembers
func (mmTeamRemoveMembers *mUserServiceHandlerMockTeamRemoveMembers) Expect(ctx context.Context, pp1 *connect_go.Request[v1.TeamRemoveMembersRequest]) *mUserServiceHandlerMockTeamRemoveMembers {
	if mmTeamRemoveMembers.mock.funcTeamRemoveMembers != nil {
		mmTeamRemoveMembers.mock.t.Fatalf("UserServiceHandlerMock.TeamRemoveMembers mock is already set by Set")
	}

	if mmTeamRemoveMembers.defaultExpectation == nil {
		mmTeamRemoveMembers.defaultExpectation = &UserServiceHandlerMockTeamRemoveMembersExpectation{}
	}

	mmTeamRemoveMembers.defaultExpectation.params = &UserServiceHandlerMockTeamRemoveMembersParams{ctx, pp1}
	for _, e := range mmTeamRemoveMembers.expectations {
		if minimock.Equal(e.params, mmTeamRemoveMembers.defaultExpectation.params) {
			mmTeamRemoveMembers.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTeamRemoveMembers.defaultExpectation.params)
		}
	}

	return mmTeamRemoveMembers
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.TeamRemoveMembers
func (mmTeamRemoveMembers *mUserServiceHandlerMockTeamRemoveMembers) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamRemoveMembersRequest])) *mUserServiceHandlerMockTeamRemoveMembers {
	if mmTeamRemoveMembers.mock.inspectFuncTeamRemoveMembers != nil {
		mmTeamRemoveMembers.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.TeamRemoveMembers")
	}

	mmTeamRemoveMembers.mock.inspectFuncTeamRemoveMembers = f

	return mmTeamRemoveMembers
}

// Return sets up results that will be returned by UserServiceHandler.TeamRemoveMembers
func (mmTeamRemoveMembers *mUserServiceHandlerMockTeamRemoveMembers) Return(pp2 *connect_go.Response[v1.TeamRemoveMembersResponse], err error) *UserServiceHandlerMock {
	if mmTeamRemoveMembers.mock.funcTeamRemoveMembers != nil {
		mmTeamRemoveMembers.mock.t.Fatalf("UserServiceHandlerMock.TeamRemoveMembers mock is already set by Set")
	}

	if mmTeamRemoveMembers.defaultExpectation == nil {
		mmTeamRemoveMembers.defaultExpectation = &UserServiceHandlerMockTeamRemoveMembersExpectation{mock: mmTeamRemoveMembers.mock}
	}
	mmTeamRemoveMembers.defaultExpectation.results = &UserServiceHandlerMockTeamRemoveMembersResults{pp2, err}
	return mmTeamRemoveMembers.mock
}

// Set uses given function f to mock the UserServiceHandler.TeamRemoveMembers method
func (mmTeamRemoveMembers *mUserServiceHandlerMockTeamRemoveMembers) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.TeamRemoveMembersRequest]) (pp2 *connect_go.Response[v1.TeamRemoveMembersResponse], err error)) *UserServiceHandlerMock {
	if mmTeamRemoveMembers.defaultExpectation != nil {
		mmTeamRemoveMembers.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.TeamRemoveMembers method")
	}

	if len(mmTeamRemoveMembers.expectations) > 0 {
		mmTeamRemoveMembers.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.TeamRemoveMembers method")
	}

	mmTeamRemoveMembers.mock.funcTeamRemoveMembers = f
	return mmTeamRemoveMembers.mock
}

// When sets expectation for the UserServiceHandler.TeamRemoveMembers which will trigger the result defined by the following
// Then helper
func (mmTeamRemoveMembers *mUserServiceHandlerMockTeamRemoveMembers) When(ctx context.Context, pp1 *connect_go.Request[v1.TeamRemoveMembersRequest]) *UserServiceHandlerMockTeamRemoveMembersExpectation {
	if mmTeamRemoveMembers.mock.funcTeamRemoveMembers != nil {
		mmTeamRemoveMembers.mock.t.Fatalf("UserServiceHandlerMock.TeamRemoveMembers mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockTeamRemoveMembersExpectation{
		mock:   mmTeamRemoveMembers.mock,
		params: &UserServiceHandlerMockTeamRemoveMembersParams{ctx, pp1},
	}
	mmTeamRemoveMembers.expectations = append(mmTeamRemoveMembers.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.TeamRemoveMembers return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockTeamRemoveMembersExpectation) Then(pp2 *connect_go.Response[v1.TeamRemoveMembersResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockTeamRemoveMembersResults{pp2, err}
	return e.mock
}

// TeamRemoveMembers implements UserServiceHandler
func (mmTeamRemoveMembers *UserServiceHandlerMock) TeamRemoveMembers(ctx context.Context, pp1 *connect_go.Request[v1.TeamRemoveMembersRequest]) (pp2 *connect_go.Response[v1.TeamRemoveMembersResponse], err error) {
	mm_atomic.AddUint64(&mmTeamRemoveMembers.beforeTeamRemoveMembersCounter, 1)
	defer mm_atomic.AddUint64(&mmTeamRemoveMembers.afterTeamRemoveMembersCounter, 1)

	if mmTeamRemoveMembers.inspectFuncTeamRemoveMembers != nil {
		mmTeamRemoveMembers.inspectFuncTeamRemoveMembers(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockTeamRemoveMembersParams{ctx, pp1}

	// Record call args
	mmTeamRemoveMembers.TeamRemoveMembersMock.mutex.Lock()
	mmTeamRemoveMembers.TeamRemoveMembersMock.callArgs = append(mmTeamRemoveMembers.TeamRemoveMembersMock.callArgs, mm_params)
	mmTeamRemoveMembers.TeamRemoveMembersMock.mutex.Unlock()

	for _, e := range mmTeamRemoveMembers.TeamRemoveMembersMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmTeamRemoveMembers.TeamRemoveMembersMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTeamRemoveMembers.TeamRemoveMembersMock.defaultExpectation.Counter, 1)
		mm_want := mmTeamRemoveMembers.TeamRemoveMembersMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockTeamRemoveMembersParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTeamRemoveMembers.t.Errorf("UserServiceHandlerMock.TeamRemoveMembers got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTeamRemoveMembers.TeamRemoveMembersMock.defaultExpectation.results
		if mm_results == nil {
			mmTeamRemoveMembers.t.Fatal("No results are set for the UserServiceHandlerMock.TeamRemoveMembers")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmTeamRemoveMembers.funcTeamRemoveMembers != nil {
		return mmTeamRemoveMembers.funcTeamRemoveMembers(ctx, pp1)
	}
	mmTeamRemoveMembers.t.Fatalf("Unexpected call to UserServiceHandlerMock.TeamRemoveMembers. %v %v", ctx, pp1)
	return
}

// TeamRemoveMembersAfterCounter returns a count of finished UserServiceHandlerMock.TeamRemoveMembers invocations
func (mmTeamRemoveMembers *UserServiceHandlerMock) TeamRemoveMembersAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamRemoveMembers.afterTeamRemoveMembersCounter)
}

// TeamRemoveMembersBeforeCounter returns a count of UserServiceHandlerMock.TeamRemoveMembers invocations
func (mmTeamRemoveMembers *UserServiceHandlerMock) TeamRemoveMembersBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeamRemoveMembers.beforeTeamRemoveMembersCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.TeamRemoveMembers.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTeamRemoveMembers *mUserServiceHandlerMockTeamRemoveMembers) Calls() []*UserServiceHandlerMockTeamRemoveMembersParams {
	mmTeamRemoveMembers.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockTeamRemoveMembersParams, len(mmTeamRemoveMembers.callArgs))
	copy(argCopy, mmTeamRemoveMembers.callArgs)

	mmTeamRemoveMembers.mutex.RUnlock()

	return argCopy
}

// MinimockTeamRemoveMembersDone returns true if the count of the TeamRemoveMembers invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockTeamRemoveMembersDone() bool {
	for _, e := range m.TeamRemoveMembersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamRemoveMembersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamRemoveMembersCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamRemoveMembers != nil && mm_atomic.LoadUint64(&m.afterTeamRemoveMembersCounter) < 1 {
		return false
	}
	return true
}

// MinimockTeamRemoveMembersInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockTeamRemoveMembersInspect() {
	for _, e := range m.TeamRemoveMembersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamRemoveMembers with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TeamRemoveMembersMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTeamRemoveMembersCounter) < 1 {
		if m.TeamRemoveMembersMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.TeamRemoveMembers")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.TeamRemoveMembers with params: %#v", *m.TeamRemoveMembersMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeamRemoveMembers != nil && mm_atomic.LoadUint64(&m.afterTeamRemoveMembersCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.TeamRemoveMembers")
	}
}

type mUserServiceHandlerMockUpdate struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockUpdateExpectation
	expectations       []*UserServiceHandlerMockUpdateExpectation

	callArgs []*UserServiceHandlerMockUpdateParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockUpdateExpectation specifies expectation struct of the UserServiceHandler.Update
type UserServiceHandlerMockUpdateExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockUpdateParams
	results *UserServiceHandlerMockUpdateResults
	Counter uint64
}

// UserServiceHandlerMockUpdateParams contains parameters of the UserServiceHandler.Update
type UserServiceHandlerMockUpdateParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.UpdateRequest]
}

// UserServiceHandlerMockUpdateResults contains results of the UserServiceHandler.Update
type UserServiceHandlerMockUpdateResults struct {
	pp2 *connect_go.Response[v1.UpdateResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.Update
func (mmUpdate *mUserServiceHandlerMockUpdate) Expect(ctx context.Context, pp1 *connect_go.Request[v1.UpdateRequest]) *mUserServiceHandlerMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserServiceHandlerMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserServiceHandlerMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &UserServiceHandlerMockUpdateParams{ctx, pp1}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.Update
func (mmUpdate *mUserServiceHandlerMockUpdate) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.UpdateRequest])) *mUserServiceHandlerMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by UserServiceHandler.Update
func (mmUpdate *mUserServiceHandlerMockUpdate) Return(pp2 *connect_go.Response[v1.UpdateResponse], err error) *UserServiceHandlerMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserServiceHandlerMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserServiceHandlerMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &UserServiceHandlerMockUpdateResults{pp2, err}
	return mmUpdate.mock
}

// Set uses given function f to mock the UserServiceHandler.Update method
func (mmUpdate *mUserServiceHandlerMockUpdate) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.UpdateRequest]) (pp2 *connect_go.Response[v1.UpdateResponse], err error)) *UserServiceHandlerMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the UserServiceHandler.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mUserServiceHandlerMockUpdate) When(ctx context.Context, pp1 *connect_go.Request[v1.UpdateRequest]) *UserServiceHandlerMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserServiceHandlerMock.Update mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &UserServiceHandlerMockUpdateParams{ctx, pp1},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.Update return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockUpdateExpectation) Then(pp2 *connect_go.Response[v1.UpdateResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockUpdateResults{pp2, err}
	return e.mock
}

// Update implements UserServiceHandler
func (mmUpdate *UserServiceHandlerMock) Update(ctx context.Context, pp1 *connect_go.Request[v1.UpdateRequest]) (pp2 *connect_go.Response[v1.UpdateResponse], err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockUpdateParams{ctx, pp1}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockUpdateParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("UserServiceHandlerMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the UserServiceHandlerMock.Update")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, pp1)
	}
	mmUpdate.t.Fatalf("Unexpected call to UserServiceHandlerMock.Update. %v %v", ctx, pp1)
	return
}

// UpdateAfterCounter returns a count of finished UserServiceHandlerMock.Update invocations
func (mmUpdate *UserServiceHandlerMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of UserServiceHandlerMock.Update invocations
func (mmUpdate *UserServiceHandlerMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mUserServiceHandlerMockUpdate) Calls() []*UserServiceHandlerMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.Update")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.Update")
	}
}

type mUserServiceHandlerMockVerificationVerify struct {
	mock               *UserServiceHandlerMock
	defaultExpectation *UserServiceHandlerMockVerificationVerifyExpectation
	expectations       []*UserServiceHandlerMockVerificationVerifyExpectation

	callArgs []*UserServiceHandlerMockVerificationVerifyParams
	mutex    sync.RWMutex
}

// UserServiceHandlerMockVerificationVerifyExpectation specifies expectation struct of the UserServiceHandler.VerificationVerify
type UserServiceHandlerMockVerificationVerifyExpectation struct {
	mock    *UserServiceHandlerMock
	params  *UserServiceHandlerMockVerificationVerifyParams
	results *UserServiceHandlerMockVerificationVerifyResults
	Counter uint64
}

// UserServiceHandlerMockVerificationVerifyParams contains parameters of the UserServiceHandler.VerificationVerify
type UserServiceHandlerMockVerificationVerifyParams struct {
	ctx context.Context
	pp1 *connect_go.Request[v1.VerificationVerifyRequest]
}

// UserServiceHandlerMockVerificationVerifyResults contains results of the UserServiceHandler.VerificationVerify
type UserServiceHandlerMockVerificationVerifyResults struct {
	pp2 *connect_go.Response[v1.VerificationVerifyResponse]
	err error
}

// Expect sets up expected params for UserServiceHandler.VerificationVerify
func (mmVerificationVerify *mUserServiceHandlerMockVerificationVerify) Expect(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest]) *mUserServiceHandlerMockVerificationVerify {
	if mmVerificationVerify.mock.funcVerificationVerify != nil {
		mmVerificationVerify.mock.t.Fatalf("UserServiceHandlerMock.VerificationVerify mock is already set by Set")
	}

	if mmVerificationVerify.defaultExpectation == nil {
		mmVerificationVerify.defaultExpectation = &UserServiceHandlerMockVerificationVerifyExpectation{}
	}

	mmVerificationVerify.defaultExpectation.params = &UserServiceHandlerMockVerificationVerifyParams{ctx, pp1}
	for _, e := range mmVerificationVerify.expectations {
		if minimock.Equal(e.params, mmVerificationVerify.defaultExpectation.params) {
			mmVerificationVerify.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVerificationVerify.defaultExpectation.params)
		}
	}

	return mmVerificationVerify
}

// Inspect accepts an inspector function that has same arguments as the UserServiceHandler.VerificationVerify
func (mmVerificationVerify *mUserServiceHandlerMockVerificationVerify) Inspect(f func(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest])) *mUserServiceHandlerMockVerificationVerify {
	if mmVerificationVerify.mock.inspectFuncVerificationVerify != nil {
		mmVerificationVerify.mock.t.Fatalf("Inspect function is already set for UserServiceHandlerMock.VerificationVerify")
	}

	mmVerificationVerify.mock.inspectFuncVerificationVerify = f

	return mmVerificationVerify
}

// Return sets up results that will be returned by UserServiceHandler.VerificationVerify
func (mmVerificationVerify *mUserServiceHandlerMockVerificationVerify) Return(pp2 *connect_go.Response[v1.VerificationVerifyResponse], err error) *UserServiceHandlerMock {
	if mmVerificationVerify.mock.funcVerificationVerify != nil {
		mmVerificationVerify.mock.t.Fatalf("UserServiceHandlerMock.VerificationVerify mock is already set by Set")
	}

	if mmVerificationVerify.defaultExpectation == nil {
		mmVerificationVerify.defaultExpectation = &UserServiceHandlerMockVerificationVerifyExpectation{mock: mmVerificationVerify.mock}
	}
	mmVerificationVerify.defaultExpectation.results = &UserServiceHandlerMockVerificationVerifyResults{pp2, err}
	return mmVerificationVerify.mock
}

// Set uses given function f to mock the UserServiceHandler.VerificationVerify method
func (mmVerificationVerify *mUserServiceHandlerMockVerificationVerify) Set(f func(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest]) (pp2 *connect_go.Response[v1.VerificationVerifyResponse], err error)) *UserServiceHandlerMock {
	if mmVerificationVerify.defaultExpectation != nil {
		mmVerificationVerify.mock.t.Fatalf("Default expectation is already set for the UserServiceHandler.VerificationVerify method")
	}

	if len(mmVerificationVerify.expectations) > 0 {
		mmVerificationVerify.mock.t.Fatalf("Some expectations are already set for the UserServiceHandler.VerificationVerify method")
	}

	mmVerificationVerify.mock.funcVerificationVerify = f
	return mmVerificationVerify.mock
}

// When sets expectation for the UserServiceHandler.VerificationVerify which will trigger the result defined by the following
// Then helper
func (mmVerificationVerify *mUserServiceHandlerMockVerificationVerify) When(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest]) *UserServiceHandlerMockVerificationVerifyExpectation {
	if mmVerificationVerify.mock.funcVerificationVerify != nil {
		mmVerificationVerify.mock.t.Fatalf("UserServiceHandlerMock.VerificationVerify mock is already set by Set")
	}

	expectation := &UserServiceHandlerMockVerificationVerifyExpectation{
		mock:   mmVerificationVerify.mock,
		params: &UserServiceHandlerMockVerificationVerifyParams{ctx, pp1},
	}
	mmVerificationVerify.expectations = append(mmVerificationVerify.expectations, expectation)
	return expectation
}

// Then sets up UserServiceHandler.VerificationVerify return parameters for the expectation previously defined by the When method
func (e *UserServiceHandlerMockVerificationVerifyExpectation) Then(pp2 *connect_go.Response[v1.VerificationVerifyResponse], err error) *UserServiceHandlerMock {
	e.results = &UserServiceHandlerMockVerificationVerifyResults{pp2, err}
	return e.mock
}

// VerificationVerify implements UserServiceHandler
func (mmVerificationVerify *UserServiceHandlerMock) VerificationVerify(ctx context.Context, pp1 *connect_go.Request[v1.VerificationVerifyRequest]) (pp2 *connect_go.Response[v1.VerificationVerifyResponse], err error) {
	mm_atomic.AddUint64(&mmVerificationVerify.beforeVerificationVerifyCounter, 1)
	defer mm_atomic.AddUint64(&mmVerificationVerify.afterVerificationVerifyCounter, 1)

	if mmVerificationVerify.inspectFuncVerificationVerify != nil {
		mmVerificationVerify.inspectFuncVerificationVerify(ctx, pp1)
	}

	mm_params := &UserServiceHandlerMockVerificationVerifyParams{ctx, pp1}

	// Record call args
	mmVerificationVerify.VerificationVerifyMock.mutex.Lock()
	mmVerificationVerify.VerificationVerifyMock.callArgs = append(mmVerificationVerify.VerificationVerifyMock.callArgs, mm_params)
	mmVerificationVerify.VerificationVerifyMock.mutex.Unlock()

	for _, e := range mmVerificationVerify.VerificationVerifyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmVerificationVerify.VerificationVerifyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVerificationVerify.VerificationVerifyMock.defaultExpectation.Counter, 1)
		mm_want := mmVerificationVerify.VerificationVerifyMock.defaultExpectation.params
		mm_got := UserServiceHandlerMockVerificationVerifyParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVerificationVerify.t.Errorf("UserServiceHandlerMock.VerificationVerify got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVerificationVerify.VerificationVerifyMock.defaultExpectation.results
		if mm_results == nil {
			mmVerificationVerify.t.Fatal("No results are set for the UserServiceHandlerMock.VerificationVerify")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmVerificationVerify.funcVerificationVerify != nil {
		return mmVerificationVerify.funcVerificationVerify(ctx, pp1)
	}
	mmVerificationVerify.t.Fatalf("Unexpected call to UserServiceHandlerMock.VerificationVerify. %v %v", ctx, pp1)
	return
}

// VerificationVerifyAfterCounter returns a count of finished UserServiceHandlerMock.VerificationVerify invocations
func (mmVerificationVerify *UserServiceHandlerMock) VerificationVerifyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerificationVerify.afterVerificationVerifyCounter)
}

// VerificationVerifyBeforeCounter returns a count of UserServiceHandlerMock.VerificationVerify invocations
func (mmVerificationVerify *UserServiceHandlerMock) VerificationVerifyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerificationVerify.beforeVerificationVerifyCounter)
}

// Calls returns a list of arguments used in each call to UserServiceHandlerMock.VerificationVerify.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVerificationVerify *mUserServiceHandlerMockVerificationVerify) Calls() []*UserServiceHandlerMockVerificationVerifyParams {
	mmVerificationVerify.mutex.RLock()

	argCopy := make([]*UserServiceHandlerMockVerificationVerifyParams, len(mmVerificationVerify.callArgs))
	copy(argCopy, mmVerificationVerify.callArgs)

	mmVerificationVerify.mutex.RUnlock()

	return argCopy
}

// MinimockVerificationVerifyDone returns true if the count of the VerificationVerify invocations corresponds
// the number of defined expectations
func (m *UserServiceHandlerMock) MinimockVerificationVerifyDone() bool {
	for _, e := range m.VerificationVerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VerificationVerifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVerificationVerifyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerificationVerify != nil && mm_atomic.LoadUint64(&m.afterVerificationVerifyCounter) < 1 {
		return false
	}
	return true
}

// MinimockVerificationVerifyInspect logs each unmet expectation
func (m *UserServiceHandlerMock) MinimockVerificationVerifyInspect() {
	for _, e := range m.VerificationVerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceHandlerMock.VerificationVerify with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VerificationVerifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVerificationVerifyCounter) < 1 {
		if m.VerificationVerifyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceHandlerMock.VerificationVerify")
		} else {
			m.t.Errorf("Expected call to UserServiceHandlerMock.VerificationVerify with params: %#v", *m.VerificationVerifyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerificationVerify != nil && mm_atomic.LoadUint64(&m.afterVerificationVerifyCounter) < 1 {
		m.t.Error("Expected call to UserServiceHandlerMock.VerificationVerify")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserServiceHandlerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAuthAssociateInspect()

		m.MinimockComparePasswordInspect()

		m.MinimockCreateInspect()

		m.MinimockFindByInspect()

		m.MinimockForgotSendInspect()

		m.MinimockForgotUpdateInspect()

		m.MinimockForgotVerifyInspect()

		m.MinimockGetSettingsInspect()

		m.MinimockSetSettingsInspect()

		m.MinimockTeamAcceptInviteInspect()

		m.MinimockTeamAddMembersInspect()

		m.MinimockTeamCreateInspect()

		m.MinimockTeamDeleteInspect()

		m.MinimockTeamListInspect()

		m.MinimockTeamListMembersInspect()

		m.MinimockTeamRemoveMembersInspect()

		m.MinimockUpdateInspect()

		m.MinimockVerificationVerifyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserServiceHandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserServiceHandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAuthAssociateDone() &&
		m.MinimockComparePasswordDone() &&
		m.MinimockCreateDone() &&
		m.MinimockFindByDone() &&
		m.MinimockForgotSendDone() &&
		m.MinimockForgotUpdateDone() &&
		m.MinimockForgotVerifyDone() &&
		m.MinimockGetSettingsDone() &&
		m.MinimockSetSettingsDone() &&
		m.MinimockTeamAcceptInviteDone() &&
		m.MinimockTeamAddMembersDone() &&
		m.MinimockTeamCreateDone() &&
		m.MinimockTeamDeleteDone() &&
		m.MinimockTeamListDone() &&
		m.MinimockTeamListMembersDone() &&
		m.MinimockTeamRemoveMembersDone() &&
		m.MinimockUpdateDone() &&
		m.MinimockVerificationVerifyDone()
}
