// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/gpt/v1/gpt.proto

package gptv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/koblas/grpc-todo/gen/api/gpt/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GptServiceName is the fully-qualified name of the GptService service.
	GptServiceName = "api.gpt.v1.GptService"
)

// GptServiceClient is a client for the api.gpt.v1.GptService service.
type GptServiceClient interface {
	Create(context.Context, *connect_go.Request[v1.GptServiceCreateRequest]) (*connect_go.Response[v1.GptServiceCreateResponse], error)
}

// NewGptServiceClient constructs a client for the api.gpt.v1.GptService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGptServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GptServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gptServiceClient{
		create: connect_go.NewClient[v1.GptServiceCreateRequest, v1.GptServiceCreateResponse](
			httpClient,
			baseURL+"/api.gpt.v1.GptService/create",
			opts...,
		),
	}
}

// gptServiceClient implements GptServiceClient.
type gptServiceClient struct {
	create *connect_go.Client[v1.GptServiceCreateRequest, v1.GptServiceCreateResponse]
}

// Create calls api.gpt.v1.GptService.create.
func (c *gptServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.GptServiceCreateRequest]) (*connect_go.Response[v1.GptServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// GptServiceHandler is an implementation of the api.gpt.v1.GptService service.
type GptServiceHandler interface {
	Create(context.Context, *connect_go.Request[v1.GptServiceCreateRequest]) (*connect_go.Response[v1.GptServiceCreateResponse], error)
}

// NewGptServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGptServiceHandler(svc GptServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.gpt.v1.GptService/create", connect_go.NewUnaryHandler(
		"/api.gpt.v1.GptService/create",
		svc.Create,
		opts...,
	))
	return "/api.gpt.v1.GptService/", mux
}

// UnimplementedGptServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGptServiceHandler struct{}

func (UnimplementedGptServiceHandler) Create(context.Context, *connect_go.Request[v1.GptServiceCreateRequest]) (*connect_go.Response[v1.GptServiceCreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.gpt.v1.GptService.create is not implemented"))
}
