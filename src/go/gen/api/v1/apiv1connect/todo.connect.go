// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/todo.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/koblas/grpc-todo/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TodoServiceName is the fully-qualified name of the TodoService service.
	TodoServiceName = "api.v1.TodoService"
)

// TodoServiceClient is a client for the api.v1.TodoService service.
type TodoServiceClient interface {
	TodoAdd(context.Context, *connect_go.Request[v1.TodoAddRequest]) (*connect_go.Response[v1.TodoAddResponse], error)
	TodoDelete(context.Context, *connect_go.Request[v1.TodoDeleteRequest]) (*connect_go.Response[v1.TodoDeleteResponse], error)
	TodoList(context.Context, *connect_go.Request[v1.TodoListRequest]) (*connect_go.Response[v1.TodoListResponse], error)
}

// NewTodoServiceClient constructs a client for the api.v1.TodoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTodoServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TodoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &todoServiceClient{
		todoAdd: connect_go.NewClient[v1.TodoAddRequest, v1.TodoAddResponse](
			httpClient,
			baseURL+"/api.v1.TodoService/todo_add",
			opts...,
		),
		todoDelete: connect_go.NewClient[v1.TodoDeleteRequest, v1.TodoDeleteResponse](
			httpClient,
			baseURL+"/api.v1.TodoService/todo_delete",
			opts...,
		),
		todoList: connect_go.NewClient[v1.TodoListRequest, v1.TodoListResponse](
			httpClient,
			baseURL+"/api.v1.TodoService/todo_list",
			opts...,
		),
	}
}

// todoServiceClient implements TodoServiceClient.
type todoServiceClient struct {
	todoAdd    *connect_go.Client[v1.TodoAddRequest, v1.TodoAddResponse]
	todoDelete *connect_go.Client[v1.TodoDeleteRequest, v1.TodoDeleteResponse]
	todoList   *connect_go.Client[v1.TodoListRequest, v1.TodoListResponse]
}

// TodoAdd calls api.v1.TodoService.todo_add.
func (c *todoServiceClient) TodoAdd(ctx context.Context, req *connect_go.Request[v1.TodoAddRequest]) (*connect_go.Response[v1.TodoAddResponse], error) {
	return c.todoAdd.CallUnary(ctx, req)
}

// TodoDelete calls api.v1.TodoService.todo_delete.
func (c *todoServiceClient) TodoDelete(ctx context.Context, req *connect_go.Request[v1.TodoDeleteRequest]) (*connect_go.Response[v1.TodoDeleteResponse], error) {
	return c.todoDelete.CallUnary(ctx, req)
}

// TodoList calls api.v1.TodoService.todo_list.
func (c *todoServiceClient) TodoList(ctx context.Context, req *connect_go.Request[v1.TodoListRequest]) (*connect_go.Response[v1.TodoListResponse], error) {
	return c.todoList.CallUnary(ctx, req)
}

// TodoServiceHandler is an implementation of the api.v1.TodoService service.
type TodoServiceHandler interface {
	TodoAdd(context.Context, *connect_go.Request[v1.TodoAddRequest]) (*connect_go.Response[v1.TodoAddResponse], error)
	TodoDelete(context.Context, *connect_go.Request[v1.TodoDeleteRequest]) (*connect_go.Response[v1.TodoDeleteResponse], error)
	TodoList(context.Context, *connect_go.Request[v1.TodoListRequest]) (*connect_go.Response[v1.TodoListResponse], error)
}

// NewTodoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTodoServiceHandler(svc TodoServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.v1.TodoService/todo_add", connect_go.NewUnaryHandler(
		"/api.v1.TodoService/todo_add",
		svc.TodoAdd,
		opts...,
	))
	mux.Handle("/api.v1.TodoService/todo_delete", connect_go.NewUnaryHandler(
		"/api.v1.TodoService/todo_delete",
		svc.TodoDelete,
		opts...,
	))
	mux.Handle("/api.v1.TodoService/todo_list", connect_go.NewUnaryHandler(
		"/api.v1.TodoService/todo_list",
		svc.TodoList,
		opts...,
	))
	return "/api.v1.TodoService/", mux
}

// UnimplementedTodoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTodoServiceHandler struct{}

func (UnimplementedTodoServiceHandler) TodoAdd(context.Context, *connect_go.Request[v1.TodoAddRequest]) (*connect_go.Response[v1.TodoAddResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.TodoService.todo_add is not implemented"))
}

func (UnimplementedTodoServiceHandler) TodoDelete(context.Context, *connect_go.Request[v1.TodoDeleteRequest]) (*connect_go.Response[v1.TodoDeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.TodoService.todo_delete is not implemented"))
}

func (UnimplementedTodoServiceHandler) TodoList(context.Context, *connect_go.Request[v1.TodoListRequest]) (*connect_go.Response[v1.TodoListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.TodoService.todo_list is not implemented"))
}
