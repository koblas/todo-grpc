// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/file.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/koblas/grpc-todo/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "api.v1.FileService"
)

// FileServiceClient is a client for the api.v1.FileService service.
type FileServiceClient interface {
	UploadUrl(context.Context, *connect_go.Request[v1.FileServiceUploadUrlRequest]) (*connect_go.Response[v1.FileServiceUploadUrlResponse], error)
}

// NewFileServiceClient constructs a client for the api.v1.FileService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileServiceClient{
		uploadUrl: connect_go.NewClient[v1.FileServiceUploadUrlRequest, v1.FileServiceUploadUrlResponse](
			httpClient,
			baseURL+"/api.v1.FileService/upload_url",
			opts...,
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	uploadUrl *connect_go.Client[v1.FileServiceUploadUrlRequest, v1.FileServiceUploadUrlResponse]
}

// UploadUrl calls api.v1.FileService.upload_url.
func (c *fileServiceClient) UploadUrl(ctx context.Context, req *connect_go.Request[v1.FileServiceUploadUrlRequest]) (*connect_go.Response[v1.FileServiceUploadUrlResponse], error) {
	return c.uploadUrl.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the api.v1.FileService service.
type FileServiceHandler interface {
	UploadUrl(context.Context, *connect_go.Request[v1.FileServiceUploadUrlRequest]) (*connect_go.Response[v1.FileServiceUploadUrlResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.v1.FileService/upload_url", connect_go.NewUnaryHandler(
		"/api.v1.FileService/upload_url",
		svc.UploadUrl,
		opts...,
	))
	return "/api.v1.FileService/", mux
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) UploadUrl(context.Context, *connect_go.Request[v1.FileServiceUploadUrlRequest]) (*connect_go.Response[v1.FileServiceUploadUrlResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.FileService.upload_url is not implemented"))
}
