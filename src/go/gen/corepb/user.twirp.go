// Code generated by protoc-gen-twirp v8.1.1, DO NOT EDIT.
// source: corepb/user.proto

package corepb

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// =====================
// UserService Interface
// =====================

type UserService interface {
	FindBy(context.Context, *UserFindParam) (*User, error)

	Create(context.Context, *UserCreateParam) (*User, error)

	Update(context.Context, *UserUpdateParam) (*User, error)

	ComparePassword(context.Context, *AuthenticateParam) (*UserIdParam, error)

	AuthAssociate(context.Context, *AuthAssociateParam) (*UserIdParam, error)

	GetSettings(context.Context, *UserIdParam) (*UserSettings, error)

	SetSettings(context.Context, *UserSettingsUpdate) (*UserSettings, error)

	// Email address verification
	VerificationVerify(context.Context, *VerificationParam) (*User, error)

	// Forgot password flow
	ForgotSend(context.Context, *UserFindParam) (*User, error)

	ForgotVerify(context.Context, *VerificationParam) (*User, error)

	ForgotUpdate(context.Context, *VerificationParam) (*User, error)
}

// ===========================
// UserService Protobuf Client
// ===========================

type userServiceProtobufClient struct {
	client      HTTPClient
	urls        [11]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewUserServiceProtobufClient creates a Protobuf client that implements the UserService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewUserServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) UserService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "corepb.user", "UserService")
	urls := [11]string{
		serviceURL + "FindBy",
		serviceURL + "Create",
		serviceURL + "Update",
		serviceURL + "ComparePassword",
		serviceURL + "AuthAssociate",
		serviceURL + "GetSettings",
		serviceURL + "SetSettings",
		serviceURL + "VerificationVerify",
		serviceURL + "ForgotSend",
		serviceURL + "ForgotVerify",
		serviceURL + "ForgotUpdate",
	}

	return &userServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *userServiceProtobufClient) FindBy(ctx context.Context, in *UserFindParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "FindBy")
	caller := c.callFindBy
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserFindParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserFindParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserFindParam) when calling interceptor")
					}
					return c.callFindBy(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callFindBy(ctx context.Context, in *UserFindParam) (*User, error) {
	out := new(User)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceProtobufClient) Create(ctx context.Context, in *UserCreateParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "Create")
	caller := c.callCreate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCreateParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCreateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCreateParam) when calling interceptor")
					}
					return c.callCreate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callCreate(ctx context.Context, in *UserCreateParam) (*User, error) {
	out := new(User)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceProtobufClient) Update(ctx context.Context, in *UserUpdateParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "Update")
	caller := c.callUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserUpdateParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserUpdateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserUpdateParam) when calling interceptor")
					}
					return c.callUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callUpdate(ctx context.Context, in *UserUpdateParam) (*User, error) {
	out := new(User)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceProtobufClient) ComparePassword(ctx context.Context, in *AuthenticateParam) (*UserIdParam, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "ComparePassword")
	caller := c.callComparePassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AuthenticateParam) (*UserIdParam, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AuthenticateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AuthenticateParam) when calling interceptor")
					}
					return c.callComparePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserIdParam)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserIdParam) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callComparePassword(ctx context.Context, in *AuthenticateParam) (*UserIdParam, error) {
	out := new(UserIdParam)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceProtobufClient) AuthAssociate(ctx context.Context, in *AuthAssociateParam) (*UserIdParam, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "AuthAssociate")
	caller := c.callAuthAssociate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AuthAssociateParam) (*UserIdParam, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AuthAssociateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AuthAssociateParam) when calling interceptor")
					}
					return c.callAuthAssociate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserIdParam)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserIdParam) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callAuthAssociate(ctx context.Context, in *AuthAssociateParam) (*UserIdParam, error) {
	out := new(UserIdParam)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceProtobufClient) GetSettings(ctx context.Context, in *UserIdParam) (*UserSettings, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSettings")
	caller := c.callGetSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserIdParam) (*UserSettings, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserIdParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserIdParam) when calling interceptor")
					}
					return c.callGetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserSettings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserSettings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callGetSettings(ctx context.Context, in *UserIdParam) (*UserSettings, error) {
	out := new(UserSettings)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceProtobufClient) SetSettings(ctx context.Context, in *UserSettingsUpdate) (*UserSettings, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "SetSettings")
	caller := c.callSetSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserSettingsUpdate) (*UserSettings, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserSettingsUpdate)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserSettingsUpdate) when calling interceptor")
					}
					return c.callSetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserSettings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserSettings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callSetSettings(ctx context.Context, in *UserSettingsUpdate) (*UserSettings, error) {
	out := new(UserSettings)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceProtobufClient) VerificationVerify(ctx context.Context, in *VerificationParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "VerificationVerify")
	caller := c.callVerificationVerify
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return c.callVerificationVerify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callVerificationVerify(ctx context.Context, in *VerificationParam) (*User, error) {
	out := new(User)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceProtobufClient) ForgotSend(ctx context.Context, in *UserFindParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "ForgotSend")
	caller := c.callForgotSend
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserFindParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserFindParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserFindParam) when calling interceptor")
					}
					return c.callForgotSend(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callForgotSend(ctx context.Context, in *UserFindParam) (*User, error) {
	out := new(User)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceProtobufClient) ForgotVerify(ctx context.Context, in *VerificationParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "ForgotVerify")
	caller := c.callForgotVerify
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return c.callForgotVerify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callForgotVerify(ctx context.Context, in *VerificationParam) (*User, error) {
	out := new(User)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceProtobufClient) ForgotUpdate(ctx context.Context, in *VerificationParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "ForgotUpdate")
	caller := c.callForgotUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return c.callForgotUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceProtobufClient) callForgotUpdate(ctx context.Context, in *VerificationParam) (*User, error) {
	out := new(User)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =======================
// UserService JSON Client
// =======================

type userServiceJSONClient struct {
	client      HTTPClient
	urls        [11]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewUserServiceJSONClient creates a JSON client that implements the UserService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewUserServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) UserService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "corepb.user", "UserService")
	urls := [11]string{
		serviceURL + "FindBy",
		serviceURL + "Create",
		serviceURL + "Update",
		serviceURL + "ComparePassword",
		serviceURL + "AuthAssociate",
		serviceURL + "GetSettings",
		serviceURL + "SetSettings",
		serviceURL + "VerificationVerify",
		serviceURL + "ForgotSend",
		serviceURL + "ForgotVerify",
		serviceURL + "ForgotUpdate",
	}

	return &userServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *userServiceJSONClient) FindBy(ctx context.Context, in *UserFindParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "FindBy")
	caller := c.callFindBy
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserFindParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserFindParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserFindParam) when calling interceptor")
					}
					return c.callFindBy(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callFindBy(ctx context.Context, in *UserFindParam) (*User, error) {
	out := new(User)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceJSONClient) Create(ctx context.Context, in *UserCreateParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "Create")
	caller := c.callCreate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCreateParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCreateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCreateParam) when calling interceptor")
					}
					return c.callCreate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callCreate(ctx context.Context, in *UserCreateParam) (*User, error) {
	out := new(User)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceJSONClient) Update(ctx context.Context, in *UserUpdateParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "Update")
	caller := c.callUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserUpdateParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserUpdateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserUpdateParam) when calling interceptor")
					}
					return c.callUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callUpdate(ctx context.Context, in *UserUpdateParam) (*User, error) {
	out := new(User)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceJSONClient) ComparePassword(ctx context.Context, in *AuthenticateParam) (*UserIdParam, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "ComparePassword")
	caller := c.callComparePassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AuthenticateParam) (*UserIdParam, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AuthenticateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AuthenticateParam) when calling interceptor")
					}
					return c.callComparePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserIdParam)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserIdParam) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callComparePassword(ctx context.Context, in *AuthenticateParam) (*UserIdParam, error) {
	out := new(UserIdParam)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceJSONClient) AuthAssociate(ctx context.Context, in *AuthAssociateParam) (*UserIdParam, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "AuthAssociate")
	caller := c.callAuthAssociate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AuthAssociateParam) (*UserIdParam, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AuthAssociateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AuthAssociateParam) when calling interceptor")
					}
					return c.callAuthAssociate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserIdParam)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserIdParam) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callAuthAssociate(ctx context.Context, in *AuthAssociateParam) (*UserIdParam, error) {
	out := new(UserIdParam)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceJSONClient) GetSettings(ctx context.Context, in *UserIdParam) (*UserSettings, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSettings")
	caller := c.callGetSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserIdParam) (*UserSettings, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserIdParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserIdParam) when calling interceptor")
					}
					return c.callGetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserSettings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserSettings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callGetSettings(ctx context.Context, in *UserIdParam) (*UserSettings, error) {
	out := new(UserSettings)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceJSONClient) SetSettings(ctx context.Context, in *UserSettingsUpdate) (*UserSettings, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "SetSettings")
	caller := c.callSetSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserSettingsUpdate) (*UserSettings, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserSettingsUpdate)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserSettingsUpdate) when calling interceptor")
					}
					return c.callSetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserSettings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserSettings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callSetSettings(ctx context.Context, in *UserSettingsUpdate) (*UserSettings, error) {
	out := new(UserSettings)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceJSONClient) VerificationVerify(ctx context.Context, in *VerificationParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "VerificationVerify")
	caller := c.callVerificationVerify
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return c.callVerificationVerify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callVerificationVerify(ctx context.Context, in *VerificationParam) (*User, error) {
	out := new(User)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceJSONClient) ForgotSend(ctx context.Context, in *UserFindParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "ForgotSend")
	caller := c.callForgotSend
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserFindParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserFindParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserFindParam) when calling interceptor")
					}
					return c.callForgotSend(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callForgotSend(ctx context.Context, in *UserFindParam) (*User, error) {
	out := new(User)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceJSONClient) ForgotVerify(ctx context.Context, in *VerificationParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "ForgotVerify")
	caller := c.callForgotVerify
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return c.callForgotVerify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callForgotVerify(ctx context.Context, in *VerificationParam) (*User, error) {
	out := new(User)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userServiceJSONClient) ForgotUpdate(ctx context.Context, in *VerificationParam) (*User, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "ForgotUpdate")
	caller := c.callForgotUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return c.callForgotUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userServiceJSONClient) callForgotUpdate(ctx context.Context, in *VerificationParam) (*User, error) {
	out := new(User)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==========================
// UserService Server Handler
// ==========================

type userServiceServer struct {
	UserService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewUserServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewUserServiceServer(svc UserService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &userServiceServer{
		UserService:      svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *userServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *userServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// UserServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const UserServicePathPrefix = "/twirp/corepb.user.UserService/"

func (s *userServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "corepb.user")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "corepb.user.UserService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "FindBy":
		s.serveFindBy(ctx, resp, req)
		return
	case "Create":
		s.serveCreate(ctx, resp, req)
		return
	case "Update":
		s.serveUpdate(ctx, resp, req)
		return
	case "ComparePassword":
		s.serveComparePassword(ctx, resp, req)
		return
	case "AuthAssociate":
		s.serveAuthAssociate(ctx, resp, req)
		return
	case "GetSettings":
		s.serveGetSettings(ctx, resp, req)
		return
	case "SetSettings":
		s.serveSetSettings(ctx, resp, req)
		return
	case "VerificationVerify":
		s.serveVerificationVerify(ctx, resp, req)
		return
	case "ForgotSend":
		s.serveForgotSend(ctx, resp, req)
		return
	case "ForgotVerify":
		s.serveForgotVerify(ctx, resp, req)
		return
	case "ForgotUpdate":
		s.serveForgotUpdate(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *userServiceServer) serveFindBy(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveFindByJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveFindByProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveFindByJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "FindBy")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserFindParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.FindBy
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserFindParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserFindParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserFindParam) when calling interceptor")
					}
					return s.UserService.FindBy(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling FindBy. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveFindByProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "FindBy")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserFindParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.FindBy
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserFindParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserFindParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserFindParam) when calling interceptor")
					}
					return s.UserService.FindBy(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling FindBy. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveCreate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveCreateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Create")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCreateParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.Create
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCreateParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCreateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCreateParam) when calling interceptor")
					}
					return s.UserService.Create(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling Create. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveCreateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Create")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCreateParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.Create
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCreateParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCreateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCreateParam) when calling interceptor")
					}
					return s.UserService.Create(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling Create. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveUpdate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveUpdateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Update")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserUpdateParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.Update
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserUpdateParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserUpdateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserUpdateParam) when calling interceptor")
					}
					return s.UserService.Update(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling Update. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveUpdateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Update")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserUpdateParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.Update
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserUpdateParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserUpdateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserUpdateParam) when calling interceptor")
					}
					return s.UserService.Update(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling Update. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveComparePassword(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveComparePasswordJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveComparePasswordProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveComparePasswordJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ComparePassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AuthenticateParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.ComparePassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AuthenticateParam) (*UserIdParam, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AuthenticateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AuthenticateParam) when calling interceptor")
					}
					return s.UserService.ComparePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserIdParam)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserIdParam) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserIdParam
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserIdParam and nil error while calling ComparePassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveComparePasswordProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ComparePassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AuthenticateParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.ComparePassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AuthenticateParam) (*UserIdParam, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AuthenticateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AuthenticateParam) when calling interceptor")
					}
					return s.UserService.ComparePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserIdParam)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserIdParam) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserIdParam
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserIdParam and nil error while calling ComparePassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveAuthAssociate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAuthAssociateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAuthAssociateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveAuthAssociateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AuthAssociate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AuthAssociateParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.AuthAssociate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AuthAssociateParam) (*UserIdParam, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AuthAssociateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AuthAssociateParam) when calling interceptor")
					}
					return s.UserService.AuthAssociate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserIdParam)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserIdParam) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserIdParam
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserIdParam and nil error while calling AuthAssociate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveAuthAssociateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AuthAssociate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AuthAssociateParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.AuthAssociate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AuthAssociateParam) (*UserIdParam, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AuthAssociateParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AuthAssociateParam) when calling interceptor")
					}
					return s.UserService.AuthAssociate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserIdParam)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserIdParam) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserIdParam
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserIdParam and nil error while calling AuthAssociate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveGetSettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveGetSettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserIdParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.GetSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserIdParam) (*UserSettings, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserIdParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserIdParam) when calling interceptor")
					}
					return s.UserService.GetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserSettings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserSettings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserSettings
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserSettings and nil error while calling GetSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveGetSettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserIdParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.GetSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserIdParam) (*UserSettings, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserIdParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserIdParam) when calling interceptor")
					}
					return s.UserService.GetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserSettings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserSettings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserSettings
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserSettings and nil error while calling GetSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSetSettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetSettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetSettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveSetSettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserSettingsUpdate)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.SetSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserSettingsUpdate) (*UserSettings, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserSettingsUpdate)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserSettingsUpdate) when calling interceptor")
					}
					return s.UserService.SetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserSettings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserSettings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserSettings
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserSettings and nil error while calling SetSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSetSettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserSettingsUpdate)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.SetSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserSettingsUpdate) (*UserSettings, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserSettingsUpdate)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserSettingsUpdate) when calling interceptor")
					}
					return s.UserService.SetSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserSettings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserSettings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserSettings
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserSettings and nil error while calling SetSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveVerificationVerify(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveVerificationVerifyJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveVerificationVerifyProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveVerificationVerifyJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VerificationVerify")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(VerificationParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.VerificationVerify
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return s.UserService.VerificationVerify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling VerificationVerify. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveVerificationVerifyProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VerificationVerify")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(VerificationParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.VerificationVerify
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return s.UserService.VerificationVerify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling VerificationVerify. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveForgotSend(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveForgotSendJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveForgotSendProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveForgotSendJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ForgotSend")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserFindParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.ForgotSend
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserFindParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserFindParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserFindParam) when calling interceptor")
					}
					return s.UserService.ForgotSend(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling ForgotSend. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveForgotSendProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ForgotSend")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserFindParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.ForgotSend
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserFindParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserFindParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserFindParam) when calling interceptor")
					}
					return s.UserService.ForgotSend(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling ForgotSend. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveForgotVerify(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveForgotVerifyJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveForgotVerifyProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveForgotVerifyJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ForgotVerify")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(VerificationParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.ForgotVerify
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return s.UserService.ForgotVerify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling ForgotVerify. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveForgotVerifyProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ForgotVerify")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(VerificationParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.ForgotVerify
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return s.UserService.ForgotVerify(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling ForgotVerify. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveForgotUpdate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveForgotUpdateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveForgotUpdateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveForgotUpdateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ForgotUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(VerificationParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserService.ForgotUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return s.UserService.ForgotUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling ForgotUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveForgotUpdateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ForgotUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(VerificationParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserService.ForgotUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *VerificationParam) (*User, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerificationParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerificationParam) when calling interceptor")
					}
					return s.UserService.ForgotUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*User)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*User) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *User
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *User and nil error while calling ForgotUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor5, 0
}

func (s *userServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.1"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *userServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "corepb.user", "UserService")
}

var twirpFileDescriptor5 = []byte{
	// 1291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcf, 0x73, 0xda, 0xc6,
	0x17, 0xb7, 0x00, 0x0b, 0x78, 0x8a, 0x6d, 0xd8, 0x6f, 0x32, 0x96, 0xf9, 0x36, 0xb5, 0x47, 0x33,
	0x4d, 0x9d, 0x74, 0x82, 0xa7, 0xa4, 0x87, 0x26, 0x99, 0x1e, 0xc0, 0x28, 0x36, 0xe3, 0x14, 0xa7,
	0x02, 0x9c, 0x4e, 0x0e, 0x55, 0x37, 0x68, 0xc1, 0x1a, 0x83, 0xc4, 0xac, 0x56, 0x64, 0x38, 0xa4,
	0xc7, 0x4e, 0x8e, 0xbd, 0xf4, 0x7f, 0xca, 0x1f, 0xd0, 0x7b, 0xff, 0x95, 0xce, 0xee, 0x4a, 0x20,
	0xcc, 0xaf, 0x49, 0x7a, 0xe8, 0x8d, 0x7d, 0x3f, 0x3f, 0x9f, 0xf7, 0x76, 0xdf, 0x13, 0x50, 0xec,
	0xfa, 0x94, 0x8c, 0xde, 0x9e, 0x84, 0x01, 0xa1, 0xe5, 0x11, 0xf5, 0x99, 0x8f, 0x34, 0x29, 0x2a,
	0x73, 0x51, 0xe9, 0xb0, 0xef, 0xfb, 0xfd, 0x01, 0x39, 0x11, 0xaa, 0xb7, 0x61, 0xef, 0x84, 0xb9,
	0x43, 0x12, 0x30, 0x3c, 0x1c, 0x49, 0x6b, 0xe3, 0xef, 0x14, 0x64, 0x3a, 0x01, 0xa1, 0x68, 0x17,
	0x52, 0xae, 0xa3, 0x2b, 0x47, 0xca, 0x71, 0xde, 0x4a, 0xb9, 0x0e, 0x42, 0x90, 0xf1, 0xf0, 0x90,
	0xe8, 0x29, 0x21, 0x11, 0xbf, 0xd1, 0x5d, 0xd8, 0x26, 0x43, 0xec, 0x0e, 0xf4, 0xb4, 0x10, 0xca,
	0x03, 0x3a, 0x01, 0x35, 0x60, 0x98, 0x85, 0x81, 0x9e, 0x39, 0x52, 0x8e, 0x77, 0x2b, 0xfb, 0xe5,
	0x04, 0x82, 0x32, 0x0f, 0xde, 0x12, 0x6a, 0x2b, 0x32, 0x43, 0x4f, 0x01, 0xc2, 0x91, 0x83, 0x19,
	0x71, 0x6c, 0xcc, 0xf4, 0xed, 0x23, 0xe5, 0x58, 0xab, 0x94, 0xca, 0x12, 0x69, 0x39, 0x46, 0x5a,
	0x6e, 0xc7, 0x48, 0xad, 0x7c, 0x64, 0x5d, 0x65, 0xdc, 0xb5, 0x4b, 0x49, 0xec, 0xaa, 0x6e, 0x76,
	0x8d, 0xac, 0xab, 0x0c, 0xed, 0x43, 0xf6, 0x1a, 0x07, 0x36, 0xeb, 0x61, 0x3d, 0x7b, 0xa4, 0x1c,
	0xe7, 0x2c, 0xf5, 0x1a, 0x07, 0xed, 0x1e, 0x46, 0x8f, 0xa0, 0x28, 0x88, 0xd8, 0x6e, 0x60, 0x8f,
	0x09, 0x75, 0x7b, 0x2e, 0x71, 0xf4, 0x9c, 0x30, 0xd9, 0x13, 0x8a, 0x46, 0x70, 0x15, 0x89, 0x91,
	0x01, 0x80, 0xc7, 0x98, 0x61, 0x6a, 0x87, 0x74, 0xa0, 0xe7, 0x79, 0x19, 0xce, 0xb7, 0xac, 0xbc,
	0x94, 0x75, 0xe8, 0xe0, 0x83, 0xa2, 0xd4, 0x76, 0x40, 0xb3, 0x67, 0x46, 0xc6, 0xaf, 0xa0, 0xb5,
	0x48, 0x37, 0xa4, 0xe4, 0x0a, 0x0f, 0x42, 0xc2, 0x61, 0xdc, 0x90, 0x89, 0x1d, 0x52, 0x37, 0x2a,
	0xb6, 0x7a, 0x43, 0x26, 0x1d, 0xea, 0xa2, 0x03, 0xc8, 0x39, 0x98, 0x61, 0xfb, 0x86, 0x4c, 0xa2,
	0xa2, 0x67, 0xf9, 0xf9, 0x82, 0x4c, 0xd0, 0x7d, 0x00, 0xa1, 0x1a, 0xf3, 0x08, 0x51, 0xf1, 0xf3,
	0x5c, 0x22, 0x42, 0x1a, 0x1f, 0x15, 0x28, 0x8a, 0x32, 0xf3, 0x34, 0x2e, 0x9b, 0x98, 0x63, 0xe2,
	0x31, 0xf4, 0x2d, 0xa8, 0xb8, 0xcb, 0x5c, 0xdf, 0x13, 0x79, 0x76, 0x2b, 0x07, 0x8b, 0x6d, 0x89,
	0xec, 0xad, 0xc8, 0x10, 0x7d, 0x05, 0x19, 0xae, 0x14, 0xe9, 0xb5, 0x4a, 0x71, 0xc1, 0xc1, 0x12,
	0x6a, 0x54, 0x86, 0x6d, 0xe6, 0xdf, 0x10, 0x4f, 0x20, 0xd1, 0x2a, 0xfa, 0x9c, 0x5d, 0x82, 0xab,
	0x25, 0xcd, 0xd0, 0x43, 0x50, 0x03, 0xe2, 0x39, 0x84, 0x8a, 0x0b, 0xb2, 0x34, 0x70, 0x64, 0x60,
	0x0c, 0x61, 0x8f, 0x9f, 0x4f, 0xaf, 0xb1, 0xd7, 0x27, 0x92, 0xc7, 0x37, 0x90, 0xed, 0x86, 0x94,
	0x12, 0x8f, 0x09, 0x22, 0x4b, 0xdd, 0x63, 0x0b, 0xf4, 0x18, 0x72, 0x3e, 0x75, 0xfb, 0xae, 0x87,
	0x07, 0xab, 0x59, 0x4c, 0x4d, 0x8c, 0x3f, 0x14, 0x28, 0xc8, 0x4a, 0x30, 0xe6, 0x7a, 0xfd, 0x33,
	0xea, 0x87, 0x23, 0x54, 0x05, 0x55, 0x14, 0x3a, 0xd0, 0x95, 0xa3, 0xf4, 0xb1, 0x56, 0x79, 0xb8,
	0xa4, 0x70, 0x33, 0xf3, 0xb2, 0xa0, 0x1a, 0x98, 0x1e, 0xa3, 0x13, 0x2b, 0x72, 0x2c, 0x3d, 0x05,
	0x2d, 0x21, 0x46, 0x05, 0x48, 0xf3, 0xae, 0xca, 0x7e, 0xf3, 0x9f, 0xfc, 0x25, 0xc9, 0x66, 0xca,
	0x4e, 0xcb, 0xc3, 0xb3, 0xd4, 0xf7, 0x0a, 0x6f, 0xe6, 0x9d, 0x44, 0x8e, 0x80, 0x5f, 0x18, 0x9e,
	0xd8, 0x9e, 0xbe, 0x4e, 0x95, 0x1f, 0x1b, 0x0e, 0x3a, 0x85, 0x5c, 0x10, 0x19, 0xe9, 0x29, 0x81,
	0xf4, 0xeb, 0x55, 0x48, 0x83, 0x72, 0xfc, 0x43, 0xe2, 0x9c, 0x3a, 0x96, 0xde, 0xc0, 0xce, 0x9c,
	0x6a, 0x09, 0xd6, 0x27, 0x49, 0xac, 0x5a, 0xe5, 0xfe, 0xda, 0x72, 0x24, 0xa9, 0xbc, 0x87, 0xfd,
	0x24, 0x86, 0x64, 0x53, 0x9f, 0xdc, 0x6e, 0xea, 0xc1, 0x4a, 0xe8, 0xc9, 0xe6, 0x66, 0x78, 0xe7,
	0x22, 0x1c, 0x6b, 0x3c, 0x84, 0x99, 0xf1, 0x97, 0x02, 0x28, 0x29, 0xee, 0x88, 0x29, 0xb2, 0xba,
	0x9e, 0x8d, 0x85, 0x7a, 0x3e, 0x5e, 0x99, 0x42, 0xc6, 0xfa, 0x4f, 0xaa, 0x7a, 0x06, 0xb9, 0x6a,
	0xc8, 0xae, 0x1b, 0x5e, 0xcf, 0x47, 0x25, 0xc8, 0x8d, 0xa8, 0x3f, 0x76, 0xf9, 0xdb, 0x92, 0xb1,
	0xa7, 0x67, 0x74, 0x08, 0x5a, 0xfc, 0x9b, 0x73, 0x95, 0x17, 0x0d, 0x62, 0x51, 0xc3, 0x31, 0x5c,
	0xd8, 0xe1, 0x79, 0x5e, 0xb8, 0x9e, 0xf3, 0x0a, 0x53, 0x3c, 0x9c, 0x8d, 0x77, 0x25, 0x39, 0xde,
	0x13, 0xf5, 0x4a, 0xcd, 0xd5, 0xeb, 0x21, 0x64, 0x70, 0xc8, 0xae, 0xa3, 0x29, 0x70, 0x6f, 0x8e,
	0x40, 0x8c, 0xd0, 0x12, 0x26, 0xc6, 0x7b, 0x28, 0x72, 0x09, 0xf1, 0x98, 0xdb, 0xc5, 0x8c, 0xac,
	0x4b, 0xc7, 0x29, 0xe1, 0x20, 0x78, 0xe7, 0xd3, 0x38, 0xdf, 0xf4, 0xcc, 0x47, 0x24, 0xeb, 0x61,
	0x9b, 0x4d, 0x46, 0xf1, 0x14, 0xcc, 0xb2, 0x1e, 0x6e, 0x4f, 0x46, 0x04, 0xfd, 0x1f, 0xf2, 0x5c,
	0x25, 0x4b, 0x9a, 0x91, 0x7e, 0xac, 0x17, 0x0d, 0xc8, 0x9f, 0x01, 0xf1, 0xf4, 0xd5, 0x20, 0xf0,
	0xbb, 0xee, 0x34, 0xff, 0xca, 0x8b, 0x10, 0x13, 0x4b, 0x6d, 0x26, 0xf6, 0x41, 0x89, 0x06, 0x96,
	0x58, 0x33, 0x9f, 0xcb, 0x2b, 0xde, 0xb5, 0xe9, 0xc4, 0xae, 0xfd, 0xd4, 0xad, 0x6a, 0xfc, 0x99,
	0x96, 0x50, 0xe4, 0xd5, 0xdc, 0x40, 0xf1, 0x20, 0xc6, 0x98, 0x8a, 0x56, 0x98, 0x3c, 0x7e, 0x50,
	0x14, 0x74, 0x98, 0x00, 0x2a, 0x00, 0x9d, 0x2b, 0x33, 0xa8, 0xdc, 0xe0, 0x01, 0xdc, 0x89, 0x8f,
	0xb6, 0x47, 0xde, 0xc9, 0x6a, 0x9f, 0xa7, 0x2c, 0x2d, 0x96, 0x36, 0xc9, 0x3b, 0x6e, 0xb7, 0x1f,
	0xb1, 0xda, 0x16, 0xfa, 0xb4, 0xe4, 0xc5, 0x15, 0xdf, 0x4d, 0xa9, 0xa9, 0x6b, 0xa9, 0x9d, 0x67,
	0x62, 0x72, 0xdc, 0xeb, 0x59, 0xe2, 0x79, 0x66, 0x37, 0x4c, 0x80, 0xf3, 0xed, 0xd9, 0x63, 0xe4,
	0xbe, 0xf3, 0x6b, 0x3b, 0x27, 0x00, 0xa9, 0xb7, 0xd6, 0x76, 0x0e, 0x54, 0x5b, 0x14, 0xa1, 0xa6,
	0x41, 0xde, 0x8e, 0xb9, 0xd4, 0xf6, 0x60, 0xc7, 0x4e, 0xd2, 0xad, 0x65, 0x61, 0xdb, 0xe6, 0x4c,
	0x6a, 0x79, 0xc8, 0xda, 0x12, 0x9e, 0xf0, 0x88, 0xf3, 0xdd, 0xde, 0xff, 0xbf, 0x40, 0x51, 0x7e,
	0x3e, 0x74, 0x31, 0x5f, 0xb2, 0x1b, 0x1a, 0x73, 0x37, 0xde, 0xad, 0xd1, 0x62, 0x90, 0x1b, 0xb4,
	0x74, 0xbb, 0x27, 0xb3, 0x8e, 0x18, 0x0f, 0x40, 0xeb, 0x08, 0xdf, 0xf5, 0x91, 0x1f, 0xd5, 0x01,
	0x66, 0xa5, 0x45, 0xbb, 0x00, 0x96, 0x79, 0xd6, 0x68, 0xb5, 0x4d, 0xcb, 0xac, 0x17, 0xb6, 0x90,
	0x06, 0xd9, 0x46, 0xf3, 0xaa, 0xd1, 0x36, 0xeb, 0x05, 0x05, 0x01, 0xa8, 0xd5, 0xd3, 0x76, 0xe3,
	0xca, 0x2c, 0x38, 0x68, 0x07, 0x72, 0xf5, 0x46, 0xab, 0x5a, 0x7b, 0x69, 0xd6, 0x0b, 0x1f, 0x95,
	0x47, 0xbf, 0xc5, 0xdb, 0x49, 0x7e, 0x3a, 0x70, 0xbf, 0x4e, 0xf3, 0xa2, 0x79, 0xf9, 0xba, 0x59,
	0xd8, 0x42, 0x3a, 0xdc, 0xed, 0xb4, 0x4c, 0xcb, 0x7e, 0x55, 0x6d, 0xb5, 0x5e, 0x5f, 0x5a, 0x75,
	0xfb, 0xf4, 0xbc, 0xda, 0x3c, 0x33, 0x0b, 0xfc, 0x2e, 0xfc, 0x4f, 0x68, 0x5e, 0x5c, 0x5a, 0x67,
	0x97, 0x6d, 0xdb, 0x32, 0x7f, 0xea, 0x98, 0xad, 0x76, 0x21, 0x35, 0x55, 0xc4, 0x60, 0xec, 0xf6,
	0xe5, 0x85, 0xd9, 0x2c, 0xa4, 0xd1, 0x3d, 0x28, 0x0a, 0x85, 0x44, 0x15, 0x89, 0x33, 0x95, 0xdf,
	0x55, 0x49, 0xb7, 0x45, 0xe8, 0xd8, 0xed, 0x12, 0xf4, 0x14, 0x54, 0x3e, 0xc0, 0x6a, 0x13, 0x54,
	0x5a, 0xb8, 0x0d, 0xd3, 0xc9, 0x56, 0x5a, 0xfc, 0x08, 0x30, 0xb6, 0xd0, 0x73, 0x50, 0xe5, 0xb3,
	0x45, 0x5f, 0x2c, 0xa8, 0x13, 0xef, 0x79, 0xa5, 0x73, 0xb4, 0x4f, 0x16, 0x9d, 0x13, 0x2f, 0x70,
	0xb9, 0xf3, 0x8f, 0xb0, 0x77, 0xea, 0x0f, 0x47, 0x98, 0x92, 0x57, 0xf1, 0x08, 0xf8, 0x72, 0x61,
	0xca, 0xcc, 0x0d, 0xcb, 0x92, 0xbe, 0x10, 0x27, 0x6a, 0xb8, 0xb1, 0x85, 0x5e, 0xc2, 0xce, 0xdc,
	0x78, 0x43, 0x87, 0x0b, 0xc1, 0xe6, 0x47, 0xdf, 0xda, 0x68, 0x75, 0xd0, 0xce, 0x08, 0x9b, 0x7e,
	0x7e, 0xac, 0x34, 0x2d, 0xad, 0x7e, 0x7e, 0xc6, 0x16, 0xba, 0xe0, 0x5f, 0xbd, 0xb3, 0x28, 0x87,
	0x1b, 0x36, 0xe9, 0xfa, 0x60, 0x0d, 0x40, 0xc9, 0x27, 0x24, 0x7e, 0x4f, 0x6e, 0x95, 0x6c, 0xe1,
	0x8d, 0x2d, 0x2f, 0xfd, 0x0f, 0x00, 0x2f, 0x7c, 0xda, 0xf7, 0x59, 0x8b, 0x78, 0xce, 0xa7, 0xdf,
	0x99, 0x53, 0xb8, 0x23, 0xdd, 0xff, 0x0d, 0x86, 0x69, 0x90, 0xe8, 0x06, 0x7d, 0x4e, 0x90, 0x9a,
	0xf6, 0x26, 0x5f, 0x3e, 0x79, 0x2e, 0x15, 0x6f, 0x55, 0xf1, 0xd7, 0xe7, 0xc9, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x0d, 0x2f, 0xc6, 0x8e, 0x0f, 0x0e, 0x00, 0x00,
}
