// Code generated by protoc-gen-twirp v8.1.1, DO NOT EDIT.
// source: corepb/send_email.proto

package corepb

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ==========================
// SendEmailService Interface
// ==========================

type SendEmailService interface {
	RegisterMessage(context.Context, *EmailRegisterParam) (*EmailOkResponse, error)

	PasswordChangeMessage(context.Context, *EmailPasswordChangeParam) (*EmailOkResponse, error)

	PasswordRecoveryMessage(context.Context, *EmailPasswordRecoveryParam) (*EmailOkResponse, error)

	InviteUserMessage(context.Context, *EmailInviteUserParam) (*EmailOkResponse, error)
}

// ================================
// SendEmailService Protobuf Client
// ================================

type sendEmailServiceProtobufClient struct {
	client      HTTPClient
	urls        [4]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSendEmailServiceProtobufClient creates a Protobuf client that implements the SendEmailService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewSendEmailServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SendEmailService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "corepb.send_email", "SendEmailService")
	urls := [4]string{
		serviceURL + "RegisterMessage",
		serviceURL + "PasswordChangeMessage",
		serviceURL + "PasswordRecoveryMessage",
		serviceURL + "InviteUserMessage",
	}

	return &sendEmailServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *sendEmailServiceProtobufClient) RegisterMessage(ctx context.Context, in *EmailRegisterParam) (*EmailOkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailService")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMessage")
	caller := c.callRegisterMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EmailRegisterParam) (*EmailOkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailRegisterParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailRegisterParam) when calling interceptor")
					}
					return c.callRegisterMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sendEmailServiceProtobufClient) callRegisterMessage(ctx context.Context, in *EmailRegisterParam) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sendEmailServiceProtobufClient) PasswordChangeMessage(ctx context.Context, in *EmailPasswordChangeParam) (*EmailOkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailService")
	ctx = ctxsetters.WithMethodName(ctx, "PasswordChangeMessage")
	caller := c.callPasswordChangeMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EmailPasswordChangeParam) (*EmailOkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailPasswordChangeParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailPasswordChangeParam) when calling interceptor")
					}
					return c.callPasswordChangeMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sendEmailServiceProtobufClient) callPasswordChangeMessage(ctx context.Context, in *EmailPasswordChangeParam) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sendEmailServiceProtobufClient) PasswordRecoveryMessage(ctx context.Context, in *EmailPasswordRecoveryParam) (*EmailOkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailService")
	ctx = ctxsetters.WithMethodName(ctx, "PasswordRecoveryMessage")
	caller := c.callPasswordRecoveryMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EmailPasswordRecoveryParam) (*EmailOkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailPasswordRecoveryParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailPasswordRecoveryParam) when calling interceptor")
					}
					return c.callPasswordRecoveryMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sendEmailServiceProtobufClient) callPasswordRecoveryMessage(ctx context.Context, in *EmailPasswordRecoveryParam) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sendEmailServiceProtobufClient) InviteUserMessage(ctx context.Context, in *EmailInviteUserParam) (*EmailOkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailService")
	ctx = ctxsetters.WithMethodName(ctx, "InviteUserMessage")
	caller := c.callInviteUserMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EmailInviteUserParam) (*EmailOkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailInviteUserParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailInviteUserParam) when calling interceptor")
					}
					return c.callInviteUserMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sendEmailServiceProtobufClient) callInviteUserMessage(ctx context.Context, in *EmailInviteUserParam) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ============================
// SendEmailService JSON Client
// ============================

type sendEmailServiceJSONClient struct {
	client      HTTPClient
	urls        [4]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSendEmailServiceJSONClient creates a JSON client that implements the SendEmailService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewSendEmailServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SendEmailService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "corepb.send_email", "SendEmailService")
	urls := [4]string{
		serviceURL + "RegisterMessage",
		serviceURL + "PasswordChangeMessage",
		serviceURL + "PasswordRecoveryMessage",
		serviceURL + "InviteUserMessage",
	}

	return &sendEmailServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *sendEmailServiceJSONClient) RegisterMessage(ctx context.Context, in *EmailRegisterParam) (*EmailOkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailService")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMessage")
	caller := c.callRegisterMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EmailRegisterParam) (*EmailOkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailRegisterParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailRegisterParam) when calling interceptor")
					}
					return c.callRegisterMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sendEmailServiceJSONClient) callRegisterMessage(ctx context.Context, in *EmailRegisterParam) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sendEmailServiceJSONClient) PasswordChangeMessage(ctx context.Context, in *EmailPasswordChangeParam) (*EmailOkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailService")
	ctx = ctxsetters.WithMethodName(ctx, "PasswordChangeMessage")
	caller := c.callPasswordChangeMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EmailPasswordChangeParam) (*EmailOkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailPasswordChangeParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailPasswordChangeParam) when calling interceptor")
					}
					return c.callPasswordChangeMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sendEmailServiceJSONClient) callPasswordChangeMessage(ctx context.Context, in *EmailPasswordChangeParam) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sendEmailServiceJSONClient) PasswordRecoveryMessage(ctx context.Context, in *EmailPasswordRecoveryParam) (*EmailOkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailService")
	ctx = ctxsetters.WithMethodName(ctx, "PasswordRecoveryMessage")
	caller := c.callPasswordRecoveryMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EmailPasswordRecoveryParam) (*EmailOkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailPasswordRecoveryParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailPasswordRecoveryParam) when calling interceptor")
					}
					return c.callPasswordRecoveryMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sendEmailServiceJSONClient) callPasswordRecoveryMessage(ctx context.Context, in *EmailPasswordRecoveryParam) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sendEmailServiceJSONClient) InviteUserMessage(ctx context.Context, in *EmailInviteUserParam) (*EmailOkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailService")
	ctx = ctxsetters.WithMethodName(ctx, "InviteUserMessage")
	caller := c.callInviteUserMessage
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EmailInviteUserParam) (*EmailOkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailInviteUserParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailInviteUserParam) when calling interceptor")
					}
					return c.callInviteUserMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sendEmailServiceJSONClient) callInviteUserMessage(ctx context.Context, in *EmailInviteUserParam) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===============================
// SendEmailService Server Handler
// ===============================

type sendEmailServiceServer struct {
	SendEmailService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewSendEmailServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewSendEmailServiceServer(svc SendEmailService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &sendEmailServiceServer{
		SendEmailService: svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *sendEmailServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *sendEmailServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// SendEmailServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const SendEmailServicePathPrefix = "/twirp/corepb.send_email.SendEmailService/"

func (s *sendEmailServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "corepb.send_email.SendEmailService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "RegisterMessage":
		s.serveRegisterMessage(ctx, resp, req)
		return
	case "PasswordChangeMessage":
		s.servePasswordChangeMessage(ctx, resp, req)
		return
	case "PasswordRecoveryMessage":
		s.servePasswordRecoveryMessage(ctx, resp, req)
		return
	case "InviteUserMessage":
		s.serveInviteUserMessage(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *sendEmailServiceServer) serveRegisterMessage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterMessageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterMessageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sendEmailServiceServer) serveRegisterMessageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(EmailRegisterParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SendEmailService.RegisterMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EmailRegisterParam) (*EmailOkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailRegisterParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailRegisterParam) when calling interceptor")
					}
					return s.SendEmailService.RegisterMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EmailOkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EmailOkResponse and nil error while calling RegisterMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sendEmailServiceServer) serveRegisterMessageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(EmailRegisterParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SendEmailService.RegisterMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EmailRegisterParam) (*EmailOkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailRegisterParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailRegisterParam) when calling interceptor")
					}
					return s.SendEmailService.RegisterMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EmailOkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EmailOkResponse and nil error while calling RegisterMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sendEmailServiceServer) servePasswordChangeMessage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePasswordChangeMessageJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePasswordChangeMessageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sendEmailServiceServer) servePasswordChangeMessageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PasswordChangeMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(EmailPasswordChangeParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SendEmailService.PasswordChangeMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EmailPasswordChangeParam) (*EmailOkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailPasswordChangeParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailPasswordChangeParam) when calling interceptor")
					}
					return s.SendEmailService.PasswordChangeMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EmailOkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EmailOkResponse and nil error while calling PasswordChangeMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sendEmailServiceServer) servePasswordChangeMessageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PasswordChangeMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(EmailPasswordChangeParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SendEmailService.PasswordChangeMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EmailPasswordChangeParam) (*EmailOkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailPasswordChangeParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailPasswordChangeParam) when calling interceptor")
					}
					return s.SendEmailService.PasswordChangeMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EmailOkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EmailOkResponse and nil error while calling PasswordChangeMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sendEmailServiceServer) servePasswordRecoveryMessage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePasswordRecoveryMessageJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePasswordRecoveryMessageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sendEmailServiceServer) servePasswordRecoveryMessageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PasswordRecoveryMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(EmailPasswordRecoveryParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SendEmailService.PasswordRecoveryMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EmailPasswordRecoveryParam) (*EmailOkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailPasswordRecoveryParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailPasswordRecoveryParam) when calling interceptor")
					}
					return s.SendEmailService.PasswordRecoveryMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EmailOkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EmailOkResponse and nil error while calling PasswordRecoveryMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sendEmailServiceServer) servePasswordRecoveryMessageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PasswordRecoveryMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(EmailPasswordRecoveryParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SendEmailService.PasswordRecoveryMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EmailPasswordRecoveryParam) (*EmailOkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailPasswordRecoveryParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailPasswordRecoveryParam) when calling interceptor")
					}
					return s.SendEmailService.PasswordRecoveryMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EmailOkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EmailOkResponse and nil error while calling PasswordRecoveryMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sendEmailServiceServer) serveInviteUserMessage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveInviteUserMessageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveInviteUserMessageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sendEmailServiceServer) serveInviteUserMessageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InviteUserMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(EmailInviteUserParam)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SendEmailService.InviteUserMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EmailInviteUserParam) (*EmailOkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailInviteUserParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailInviteUserParam) when calling interceptor")
					}
					return s.SendEmailService.InviteUserMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EmailOkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EmailOkResponse and nil error while calling InviteUserMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sendEmailServiceServer) serveInviteUserMessageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InviteUserMessage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(EmailInviteUserParam)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SendEmailService.InviteUserMessage
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EmailInviteUserParam) (*EmailOkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailInviteUserParam)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailInviteUserParam) when calling interceptor")
					}
					return s.SendEmailService.InviteUserMessage(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EmailOkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EmailOkResponse and nil error while calling InviteUserMessage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sendEmailServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor3, 0
}

func (s *sendEmailServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.1"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *sendEmailServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "corepb.send_email", "SendEmailService")
}

// =========================
// SendEmailEvents Interface
// =========================

type SendEmailEvents interface {
	// The notification channel
	NotifySent(context.Context, *EmailSentEvent) (*EmailOkResponse, error)
}

// ===============================
// SendEmailEvents Protobuf Client
// ===============================

type sendEmailEventsProtobufClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSendEmailEventsProtobufClient creates a Protobuf client that implements the SendEmailEvents interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewSendEmailEventsProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SendEmailEvents {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "corepb.send_email", "SendEmailEvents")
	urls := [1]string{
		serviceURL + "NotifySent",
	}

	return &sendEmailEventsProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *sendEmailEventsProtobufClient) NotifySent(ctx context.Context, in *EmailSentEvent) (*EmailOkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailEvents")
	ctx = ctxsetters.WithMethodName(ctx, "NotifySent")
	caller := c.callNotifySent
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EmailSentEvent) (*EmailOkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailSentEvent)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailSentEvent) when calling interceptor")
					}
					return c.callNotifySent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sendEmailEventsProtobufClient) callNotifySent(ctx context.Context, in *EmailSentEvent) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===========================
// SendEmailEvents JSON Client
// ===========================

type sendEmailEventsJSONClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSendEmailEventsJSONClient creates a JSON client that implements the SendEmailEvents interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewSendEmailEventsJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SendEmailEvents {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "corepb.send_email", "SendEmailEvents")
	urls := [1]string{
		serviceURL + "NotifySent",
	}

	return &sendEmailEventsJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *sendEmailEventsJSONClient) NotifySent(ctx context.Context, in *EmailSentEvent) (*EmailOkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailEvents")
	ctx = ctxsetters.WithMethodName(ctx, "NotifySent")
	caller := c.callNotifySent
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EmailSentEvent) (*EmailOkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailSentEvent)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailSentEvent) when calling interceptor")
					}
					return c.callNotifySent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sendEmailEventsJSONClient) callNotifySent(ctx context.Context, in *EmailSentEvent) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==============================
// SendEmailEvents Server Handler
// ==============================

type sendEmailEventsServer struct {
	SendEmailEvents
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewSendEmailEventsServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewSendEmailEventsServer(svc SendEmailEvents, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &sendEmailEventsServer{
		SendEmailEvents:  svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *sendEmailEventsServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *sendEmailEventsServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// SendEmailEventsPathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const SendEmailEventsPathPrefix = "/twirp/corepb.send_email.SendEmailEvents/"

func (s *sendEmailEventsServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "corepb.send_email")
	ctx = ctxsetters.WithServiceName(ctx, "SendEmailEvents")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "corepb.send_email.SendEmailEvents" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "NotifySent":
		s.serveNotifySent(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *sendEmailEventsServer) serveNotifySent(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveNotifySentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveNotifySentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sendEmailEventsServer) serveNotifySentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "NotifySent")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(EmailSentEvent)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SendEmailEvents.NotifySent
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EmailSentEvent) (*EmailOkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailSentEvent)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailSentEvent) when calling interceptor")
					}
					return s.SendEmailEvents.NotifySent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EmailOkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EmailOkResponse and nil error while calling NotifySent. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sendEmailEventsServer) serveNotifySentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "NotifySent")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(EmailSentEvent)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SendEmailEvents.NotifySent
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EmailSentEvent) (*EmailOkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EmailSentEvent)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EmailSentEvent) when calling interceptor")
					}
					return s.SendEmailEvents.NotifySent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EmailOkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EmailOkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EmailOkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EmailOkResponse and nil error while calling NotifySent. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sendEmailEventsServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor3, 1
}

func (s *sendEmailEventsServer) ProtocGenTwirpVersion() string {
	return "v8.1.1"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *sendEmailEventsServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "corepb.send_email", "SendEmailEvents")
}

var twirpFileDescriptor3 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xae, 0xd3, 0xbf, 0x99, 0xb4, 0x89, 0xbb, 0xbf, 0x56, 0xcd, 0xaf, 0x02, 0xb5, 0xb5, 0x84,
	0x8a, 0x40, 0xa4, 0x52, 0xe0, 0x54, 0xb8, 0xb4, 0x8d, 0x29, 0x3e, 0xe0, 0x56, 0x76, 0x53, 0x04,
	0x07, 0x2c, 0x27, 0x9e, 0xb4, 0x26, 0xc9, 0xda, 0xec, 0xba, 0x41, 0x7d, 0x03, 0x9e, 0x07, 0x89,
	0x03, 0x0f, 0xc0, 0x91, 0x47, 0x42, 0x42, 0xbb, 0xeb, 0x38, 0x49, 0xc1, 0x6a, 0x24, 0x0e, 0xc0,
	0x2d, 0xfb, 0xed, 0xcc, 0xf7, 0xcd, 0x37, 0xeb, 0x99, 0xc0, 0x46, 0x3b, 0x62, 0x18, 0xb7, 0xf6,
	0x38, 0xd2, 0xc0, 0xc3, 0xbe, 0x1f, 0xf6, 0x6a, 0x31, 0x8b, 0x92, 0x88, 0xac, 0xaa, 0x8b, 0xda,
	0xe8, 0xc2, 0xb0, 0xa1, 0x68, 0x8a, 0x1f, 0x4d, 0x8e, 0x8c, 0xac, 0xc1, 0xbc, 0x44, 0xab, 0xda,
	0xb6, 0x76, 0xbf, 0xe8, 0xa8, 0x03, 0x21, 0x30, 0x47, 0xfd, 0x3e, 0x56, 0x0b, 0x12, 0x94, 0xbf,
	0xc9, 0x06, 0x2c, 0x5e, 0x71, 0x64, 0x5e, 0x18, 0x54, 0x67, 0x25, 0xbc, 0x20, 0x8e, 0x56, 0x60,
	0x7c, 0xd4, 0x60, 0x59, 0x12, 0x1e, 0xc4, 0xb1, 0x45, 0x3b, 0x11, 0xf9, 0x1f, 0x96, 0xae, 0x58,
	0xcf, 0x6b, 0xf9, 0x1c, 0x53, 0xda, 0xc5, 0x2b, 0xd6, 0x3b, 0xf4, 0x39, 0x8a, 0x2b, 0x3f, 0x8e,
	0xbd, 0x31, 0xf2, 0x45, 0x3f, 0x8e, 0x6d, 0xc1, 0xbf, 0x03, 0xcb, 0xa2, 0x48, 0x64, 0xaa, 0xcc,
	0x54, 0xa4, 0xa4, 0x30, 0xc9, 0x4f, 0xb6, 0x20, 0x3d, 0x2a, 0x82, 0x39, 0x19, 0x01, 0x0a, 0x12,
	0x1c, 0xc6, 0x57, 0x0d, 0x88, 0x0c, 0x75, 0xf0, 0x22, 0xe4, 0x09, 0xb2, 0x53, 0x9f, 0xf9, 0x7d,
	0xb2, 0xaf, 0x54, 0x43, 0xda, 0x89, 0x64, 0x41, 0xa5, 0xfa, 0x56, 0xed, 0xa7, 0xbe, 0xd4, 0xc6,
	0x3d, 0xc8, 0xb2, 0xa4, 0x99, 0x7d, 0x28, 0x32, 0x6c, 0x87, 0x71, 0x88, 0x34, 0x91, 0x35, 0x95,
	0xea, 0x77, 0xf2, 0x92, 0x45, 0x47, 0x9d, 0x51, 0xb8, 0xb0, 0xc4, 0xb0, 0x83, 0x0c, 0x69, 0x1b,
	0x45, 0xdf, 0x54, 0xc1, 0xa5, 0x0c, 0xb3, 0x02, 0xd1, 0xff, 0x24, 0xea, 0x22, 0xad, 0xce, 0xab,
	0xfe, 0xcb, 0x83, 0xf1, 0x59, 0x83, 0xaa, 0x64, 0x3c, 0xf5, 0x39, 0xff, 0x10, 0xb1, 0xe0, 0xe8,
	0xd2, 0xa7, 0x17, 0xf8, 0xb7, 0xbb, 0x31, 0xbe, 0x69, 0xb0, 0x39, 0x51, 0xb7, 0x83, 0xed, 0x68,
	0x80, 0xec, 0xfa, 0x1f, 0x7d, 0x87, 0xef, 0x1a, 0xac, 0x49, 0x46, 0x8b, 0x0e, 0xc2, 0x04, 0x05,
	0xef, 0xef, 0x3b, 0x79, 0x02, 0x0b, 0xea, 0x93, 0x95, 0x13, 0x70, 0x9b, 0x8d, 0x34, 0xf6, 0xcf,
	0xf8, 0xdf, 0x81, 0x8a, 0x24, 0x3c, 0xe9, 0x3a, 0xc8, 0xe3, 0x88, 0x72, 0x24, 0x65, 0x28, 0x44,
	0x5d, 0xe9, 0x79, 0xc9, 0x29, 0x44, 0x5d, 0xe3, 0x8b, 0x06, 0x65, 0x19, 0xe3, 0x22, 0x4d, 0xcc,
	0x81, 0x90, 0xdb, 0x85, 0x4a, 0xa6, 0xed, 0x8d, 0x6f, 0x97, 0x72, 0x06, 0xab, 0x79, 0xbe, 0x0b,
	0xd0, 0x47, 0xce, 0xfd, 0x0b, 0x59, 0x95, 0xda, 0x07, 0xc5, 0x14, 0xb1, 0x02, 0xf2, 0x0c, 0x96,
	0x12, 0xec, 0xc7, 0x3d, 0x3f, 0x41, 0xe9, 0xb8, 0x5c, 0xdf, 0xce, 0x73, 0x7c, 0x96, 0xc6, 0x39,
	0x59, 0xc6, 0x14, 0xa6, 0x1f, 0xbc, 0x87, 0x95, 0x89, 0x6c, 0xb2, 0x02, 0xc5, 0xa6, 0xdd, 0x30,
	0x9f, 0x5b, 0xb6, 0xd9, 0xd0, 0x67, 0xc8, 0x7f, 0x50, 0x69, 0xba, 0xa6, 0xe3, 0x39, 0xe6, 0xb1,
	0xe5, 0x9e, 0x99, 0x8e, 0xd9, 0xd0, 0x35, 0xa2, 0xc3, 0xb2, 0x04, 0x2d, 0xfb, 0xdc, 0x3a, 0x33,
	0x1b, 0x7a, 0x81, 0xac, 0xc3, 0xea, 0xe9, 0x81, 0xeb, 0xbe, 0x3a, 0x71, 0x1a, 0x9e, 0x63, 0x1e,
	0x9d, 0x9c, 0x9b, 0xce, 0x6b, 0x7d, 0x56, 0x64, 0x67, 0xf0, 0xd1, 0x8b, 0x03, 0xfb, 0xd8, 0xd4,
	0xe7, 0xea, 0x9f, 0x66, 0x41, 0x77, 0x91, 0x06, 0x69, 0xcb, 0xd8, 0x20, 0x6c, 0x23, 0x79, 0x0b,
	0x95, 0xe1, 0xc2, 0x7a, 0xa9, 0xdc, 0x93, 0x7b, 0x79, 0x4e, 0x27, 0x36, 0xdb, 0xa6, 0x91, 0x17,
	0x36, 0x7a, 0x31, 0x63, 0x86, 0xbc, 0x83, 0xf5, 0xc9, 0x45, 0x32, 0x54, 0x79, 0x98, 0x97, 0xfe,
	0x8b, 0xbd, 0x33, 0xa5, 0x16, 0x85, 0x8d, 0x9b, 0xc3, 0x3f, 0x54, 0x7b, 0x74, 0x9b, 0xda, 0xc4,
	0xb6, 0x98, 0x52, 0xaf, 0x05, 0xab, 0xa3, 0xe1, 0x1c, 0x2a, 0xed, 0xe6, 0xa5, 0xde, 0x98, 0xe3,
	0xe9, 0x34, 0xea, 0x97, 0x50, 0xc9, 0xde, 0x4c, 0x7e, 0xe2, 0x9c, 0x34, 0x01, 0xec, 0x28, 0x09,
	0x3b, 0xd7, 0xae, 0x1c, 0xb0, 0x3c, 0x9a, 0x6c, 0x28, 0xa6, 0x53, 0x3a, 0x2c, 0xbd, 0x29, 0xd6,
	0xf6, 0x9e, 0xaa, 0xc8, 0xd6, 0x82, 0xfc, 0x0b, 0x7f, 0xfc, 0x23, 0x00, 0x00, 0xff, 0xff, 0x75,
	0xe3, 0xea, 0xac, 0xdd, 0x07, 0x00, 0x00,
}
