// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OauthUserServiceClient is the client API for OauthUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthUserServiceClient interface {
	// Get an authentiction url
	GetAuthURL(ctx context.Context, in *OauthUserGetUrlParams, opts ...grpc.CallOption) (*OauthUserGetUrlResult, error)
	// List all associations for this user
	ListAssociations(ctx context.Context, in *OauthUserGetParams, opts ...grpc.CallOption) (*OauthUserListAssoicationsResponse, error)
	// Remove this token from the system
	RemoveAssociation(ctx context.Context, in *OauthUserGetParams, opts ...grpc.CallOption) (*Empty, error)
	// Assoicate or create the user as needed
	UpsertUser(ctx context.Context, in *OauthUserUpsertParams, opts ...grpc.CallOption) (*OauthUserUpsertResult, error)
}

type oauthUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthUserServiceClient(cc grpc.ClientConnInterface) OauthUserServiceClient {
	return &oauthUserServiceClient{cc}
}

func (c *oauthUserServiceClient) GetAuthURL(ctx context.Context, in *OauthUserGetUrlParams, opts ...grpc.CallOption) (*OauthUserGetUrlResult, error) {
	out := new(OauthUserGetUrlResult)
	err := c.cc.Invoke(ctx, "/core.OauthUserService/GetAuthURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthUserServiceClient) ListAssociations(ctx context.Context, in *OauthUserGetParams, opts ...grpc.CallOption) (*OauthUserListAssoicationsResponse, error) {
	out := new(OauthUserListAssoicationsResponse)
	err := c.cc.Invoke(ctx, "/core.OauthUserService/ListAssociations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthUserServiceClient) RemoveAssociation(ctx context.Context, in *OauthUserGetParams, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.OauthUserService/RemoveAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthUserServiceClient) UpsertUser(ctx context.Context, in *OauthUserUpsertParams, opts ...grpc.CallOption) (*OauthUserUpsertResult, error) {
	out := new(OauthUserUpsertResult)
	err := c.cc.Invoke(ctx, "/core.OauthUserService/UpsertUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthUserServiceServer is the server API for OauthUserService service.
// All implementations must embed UnimplementedOauthUserServiceServer
// for forward compatibility
type OauthUserServiceServer interface {
	// Get an authentiction url
	GetAuthURL(context.Context, *OauthUserGetUrlParams) (*OauthUserGetUrlResult, error)
	// List all associations for this user
	ListAssociations(context.Context, *OauthUserGetParams) (*OauthUserListAssoicationsResponse, error)
	// Remove this token from the system
	RemoveAssociation(context.Context, *OauthUserGetParams) (*Empty, error)
	// Assoicate or create the user as needed
	UpsertUser(context.Context, *OauthUserUpsertParams) (*OauthUserUpsertResult, error)
	mustEmbedUnimplementedOauthUserServiceServer()
}

// UnimplementedOauthUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOauthUserServiceServer struct {
}

func (UnimplementedOauthUserServiceServer) GetAuthURL(context.Context, *OauthUserGetUrlParams) (*OauthUserGetUrlResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthURL not implemented")
}
func (UnimplementedOauthUserServiceServer) ListAssociations(context.Context, *OauthUserGetParams) (*OauthUserListAssoicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssociations not implemented")
}
func (UnimplementedOauthUserServiceServer) RemoveAssociation(context.Context, *OauthUserGetParams) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAssociation not implemented")
}
func (UnimplementedOauthUserServiceServer) UpsertUser(context.Context, *OauthUserUpsertParams) (*OauthUserUpsertResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUser not implemented")
}
func (UnimplementedOauthUserServiceServer) mustEmbedUnimplementedOauthUserServiceServer() {}

// UnsafeOauthUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthUserServiceServer will
// result in compilation errors.
type UnsafeOauthUserServiceServer interface {
	mustEmbedUnimplementedOauthUserServiceServer()
}

func RegisterOauthUserServiceServer(s grpc.ServiceRegistrar, srv OauthUserServiceServer) {
	s.RegisterService(&OauthUserService_ServiceDesc, srv)
}

func _OauthUserService_GetAuthURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthUserGetUrlParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthUserServiceServer).GetAuthURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.OauthUserService/GetAuthURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthUserServiceServer).GetAuthURL(ctx, req.(*OauthUserGetUrlParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthUserService_ListAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthUserGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthUserServiceServer).ListAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.OauthUserService/ListAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthUserServiceServer).ListAssociations(ctx, req.(*OauthUserGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthUserService_RemoveAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthUserGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthUserServiceServer).RemoveAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.OauthUserService/RemoveAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthUserServiceServer).RemoveAssociation(ctx, req.(*OauthUserGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthUserService_UpsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthUserUpsertParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthUserServiceServer).UpsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.OauthUserService/UpsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthUserServiceServer).UpsertUser(ctx, req.(*OauthUserUpsertParams))
	}
	return interceptor(ctx, in, info, handler)
}

// OauthUserService_ServiceDesc is the grpc.ServiceDesc for OauthUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OauthUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.OauthUserService",
	HandlerType: (*OauthUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthURL",
			Handler:    _OauthUserService_GetAuthURL_Handler,
		},
		{
			MethodName: "ListAssociations",
			Handler:    _OauthUserService_ListAssociations_Handler,
		},
		{
			MethodName: "RemoveAssociation",
			Handler:    _OauthUserService_RemoveAssociation_Handler,
		},
		{
			MethodName: "UpsertUser",
			Handler:    _OauthUserService_UpsertUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/oauth_user.proto",
}
