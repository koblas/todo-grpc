// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendEmailServiceClient is the client API for SendEmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendEmailServiceClient interface {
	RegisterMessage(ctx context.Context, in *EmailRegisterParam, opts ...grpc.CallOption) (*EmailOkResponse, error)
	PasswordChangeMessage(ctx context.Context, in *EmailPasswordChangeParam, opts ...grpc.CallOption) (*EmailOkResponse, error)
	PasswordRecoveryMessage(ctx context.Context, in *EmailPasswordRecoveryParam, opts ...grpc.CallOption) (*EmailOkResponse, error)
	InviteUserMessage(ctx context.Context, in *EmailInviteUserParam, opts ...grpc.CallOption) (*EmailOkResponse, error)
}

type sendEmailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSendEmailServiceClient(cc grpc.ClientConnInterface) SendEmailServiceClient {
	return &sendEmailServiceClient{cc}
}

func (c *sendEmailServiceClient) RegisterMessage(ctx context.Context, in *EmailRegisterParam, opts ...grpc.CallOption) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	err := c.cc.Invoke(ctx, "/core.SendEmailService/RegisterMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEmailServiceClient) PasswordChangeMessage(ctx context.Context, in *EmailPasswordChangeParam, opts ...grpc.CallOption) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	err := c.cc.Invoke(ctx, "/core.SendEmailService/PasswordChangeMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEmailServiceClient) PasswordRecoveryMessage(ctx context.Context, in *EmailPasswordRecoveryParam, opts ...grpc.CallOption) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	err := c.cc.Invoke(ctx, "/core.SendEmailService/PasswordRecoveryMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendEmailServiceClient) InviteUserMessage(ctx context.Context, in *EmailInviteUserParam, opts ...grpc.CallOption) (*EmailOkResponse, error) {
	out := new(EmailOkResponse)
	err := c.cc.Invoke(ctx, "/core.SendEmailService/InviteUserMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendEmailServiceServer is the server API for SendEmailService service.
// All implementations must embed UnimplementedSendEmailServiceServer
// for forward compatibility
type SendEmailServiceServer interface {
	RegisterMessage(context.Context, *EmailRegisterParam) (*EmailOkResponse, error)
	PasswordChangeMessage(context.Context, *EmailPasswordChangeParam) (*EmailOkResponse, error)
	PasswordRecoveryMessage(context.Context, *EmailPasswordRecoveryParam) (*EmailOkResponse, error)
	InviteUserMessage(context.Context, *EmailInviteUserParam) (*EmailOkResponse, error)
	mustEmbedUnimplementedSendEmailServiceServer()
}

// UnimplementedSendEmailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSendEmailServiceServer struct {
}

func (UnimplementedSendEmailServiceServer) RegisterMessage(context.Context, *EmailRegisterParam) (*EmailOkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMessage not implemented")
}
func (UnimplementedSendEmailServiceServer) PasswordChangeMessage(context.Context, *EmailPasswordChangeParam) (*EmailOkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordChangeMessage not implemented")
}
func (UnimplementedSendEmailServiceServer) PasswordRecoveryMessage(context.Context, *EmailPasswordRecoveryParam) (*EmailOkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordRecoveryMessage not implemented")
}
func (UnimplementedSendEmailServiceServer) InviteUserMessage(context.Context, *EmailInviteUserParam) (*EmailOkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUserMessage not implemented")
}
func (UnimplementedSendEmailServiceServer) mustEmbedUnimplementedSendEmailServiceServer() {}

// UnsafeSendEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendEmailServiceServer will
// result in compilation errors.
type UnsafeSendEmailServiceServer interface {
	mustEmbedUnimplementedSendEmailServiceServer()
}

func RegisterSendEmailServiceServer(s grpc.ServiceRegistrar, srv SendEmailServiceServer) {
	s.RegisterService(&SendEmailService_ServiceDesc, srv)
}

func _SendEmailService_RegisterMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRegisterParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEmailServiceServer).RegisterMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.SendEmailService/RegisterMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEmailServiceServer).RegisterMessage(ctx, req.(*EmailRegisterParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEmailService_PasswordChangeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailPasswordChangeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEmailServiceServer).PasswordChangeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.SendEmailService/PasswordChangeMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEmailServiceServer).PasswordChangeMessage(ctx, req.(*EmailPasswordChangeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEmailService_PasswordRecoveryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailPasswordRecoveryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEmailServiceServer).PasswordRecoveryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.SendEmailService/PasswordRecoveryMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEmailServiceServer).PasswordRecoveryMessage(ctx, req.(*EmailPasswordRecoveryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendEmailService_InviteUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailInviteUserParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendEmailServiceServer).InviteUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.SendEmailService/InviteUserMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendEmailServiceServer).InviteUserMessage(ctx, req.(*EmailInviteUserParam))
	}
	return interceptor(ctx, in, info, handler)
}

// SendEmailService_ServiceDesc is the grpc.ServiceDesc for SendEmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendEmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.SendEmailService",
	HandlerType: (*SendEmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMessage",
			Handler:    _SendEmailService_RegisterMessage_Handler,
		},
		{
			MethodName: "PasswordChangeMessage",
			Handler:    _SendEmailService_PasswordChangeMessage_Handler,
		},
		{
			MethodName: "PasswordRecoveryMessage",
			Handler:    _SendEmailService_PasswordRecoveryMessage_Handler,
		},
		{
			MethodName: "InviteUserMessage",
			Handler:    _SendEmailService_InviteUserMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/send_email.proto",
}
