// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package publicapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	Register(ctx context.Context, in *RegisterParams, opts ...grpc.CallOption) (*TokenEither, error)
	Authenticate(ctx context.Context, in *LoginParams, opts ...grpc.CallOption) (*TokenEither, error)
	VerifyEmail(ctx context.Context, in *ConfirmParams, opts ...grpc.CallOption) (*TokenEither, error)
	RecoverSend(ctx context.Context, in *RecoveryParams, opts ...grpc.CallOption) (*SuccessEither, error)
	RecoverVerify(ctx context.Context, in *RecoveryParams, opts ...grpc.CallOption) (*SuccessEither, error)
	RecoverUpdate(ctx context.Context, in *RecoveryParams, opts ...grpc.CallOption) (*TokenEither, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) Register(ctx context.Context, in *RegisterParams, opts ...grpc.CallOption) (*TokenEither, error) {
	out := new(TokenEither)
	err := c.cc.Invoke(ctx, "/auth.AuthenticationService/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Authenticate(ctx context.Context, in *LoginParams, opts ...grpc.CallOption) (*TokenEither, error) {
	out := new(TokenEither)
	err := c.cc.Invoke(ctx, "/auth.AuthenticationService/authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) VerifyEmail(ctx context.Context, in *ConfirmParams, opts ...grpc.CallOption) (*TokenEither, error) {
	out := new(TokenEither)
	err := c.cc.Invoke(ctx, "/auth.AuthenticationService/verify_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) RecoverSend(ctx context.Context, in *RecoveryParams, opts ...grpc.CallOption) (*SuccessEither, error) {
	out := new(SuccessEither)
	err := c.cc.Invoke(ctx, "/auth.AuthenticationService/recover_send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) RecoverVerify(ctx context.Context, in *RecoveryParams, opts ...grpc.CallOption) (*SuccessEither, error) {
	out := new(SuccessEither)
	err := c.cc.Invoke(ctx, "/auth.AuthenticationService/recover_verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) RecoverUpdate(ctx context.Context, in *RecoveryParams, opts ...grpc.CallOption) (*TokenEither, error) {
	out := new(TokenEither)
	err := c.cc.Invoke(ctx, "/auth.AuthenticationService/recover_update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	Register(context.Context, *RegisterParams) (*TokenEither, error)
	Authenticate(context.Context, *LoginParams) (*TokenEither, error)
	VerifyEmail(context.Context, *ConfirmParams) (*TokenEither, error)
	RecoverSend(context.Context, *RecoveryParams) (*SuccessEither, error)
	RecoverVerify(context.Context, *RecoveryParams) (*SuccessEither, error)
	RecoverUpdate(context.Context, *RecoveryParams) (*TokenEither, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) Register(context.Context, *RegisterParams) (*TokenEither, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthenticationServiceServer) Authenticate(context.Context, *LoginParams) (*TokenEither, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthenticationServiceServer) VerifyEmail(context.Context, *ConfirmParams) (*TokenEither, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedAuthenticationServiceServer) RecoverSend(context.Context, *RecoveryParams) (*SuccessEither, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverSend not implemented")
}
func (UnimplementedAuthenticationServiceServer) RecoverVerify(context.Context, *RecoveryParams) (*SuccessEither, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverVerify not implemented")
}
func (UnimplementedAuthenticationServiceServer) RecoverUpdate(context.Context, *RecoveryParams) (*TokenEither, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverUpdate not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Register(ctx, req.(*RegisterParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Authenticate(ctx, req.(*LoginParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/verify_email",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).VerifyEmail(ctx, req.(*ConfirmParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_RecoverSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoveryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).RecoverSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/recover_send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).RecoverSend(ctx, req.(*RecoveryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_RecoverVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoveryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).RecoverVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/recover_verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).RecoverVerify(ctx, req.(*RecoveryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_RecoverUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoveryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).RecoverUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthenticationService/recover_update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).RecoverUpdate(ctx, req.(*RecoveryParams))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _AuthenticationService_Register_Handler,
		},
		{
			MethodName: "authenticate",
			Handler:    _AuthenticationService_Authenticate_Handler,
		},
		{
			MethodName: "verify_email",
			Handler:    _AuthenticationService_VerifyEmail_Handler,
		},
		{
			MethodName: "recover_send",
			Handler:    _AuthenticationService_RecoverSend_Handler,
		},
		{
			MethodName: "recover_verify",
			Handler:    _AuthenticationService_RecoverVerify_Handler,
		},
		{
			MethodName: "recover_update",
			Handler:    _AuthenticationService_RecoverUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publicapi/auth.proto",
}
