/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: protos/todo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as dependency_1 from "./../google/api/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace todo {
    export class getTodoParams extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new getTodoParams({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): getTodoParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new getTodoParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): getTodoParams {
            return getTodoParams.deserialize(bytes);
        }
    }
    export class addTodoParams extends pb_1.Message {
        constructor(data?: any[] | {
            task?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("task" in data && data.task != undefined) {
                    this.task = data.task;
                }
            }
        }
        get task() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set task(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            task?: string;
        }) {
            const message = new addTodoParams({});
            if (data.task != null) {
                message.task = data.task;
            }
            return message;
        }
        toObject() {
            const data: {
                task?: string;
            } = {};
            if (this.task != null) {
                data.task = this.task;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.task === "string" && this.task.length)
                writer.writeString(1, this.task);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): addTodoParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new addTodoParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.task = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): addTodoParams {
            return addTodoParams.deserialize(bytes);
        }
    }
    export class deleteTodoParams extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }) {
            const message = new deleteTodoParams({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): deleteTodoParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new deleteTodoParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): deleteTodoParams {
            return deleteTodoParams.deserialize(bytes);
        }
    }
    export class todoObject extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            task?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("task" in data && data.task != undefined) {
                    this.task = data.task;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get task() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set task(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            task?: string;
        }) {
            const message = new todoObject({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.task != null) {
                message.task = data.task;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                task?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.task != null) {
                data.task = this.task;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.task === "string" && this.task.length)
                writer.writeString(2, this.task);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): todoObject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new todoObject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.task = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): todoObject {
            return todoObject.deserialize(bytes);
        }
    }
    export class todoResponse extends pb_1.Message {
        constructor(data?: any[] | {
            todos?: todoObject[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todos" in data && data.todos != undefined) {
                    this.todos = data.todos;
                }
            }
        }
        get todos() {
            return pb_1.Message.getRepeatedWrapperField(this, todoObject, 1) as todoObject[];
        }
        set todos(value: todoObject[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            todos?: ReturnType<typeof todoObject.prototype.toObject>[];
        }) {
            const message = new todoResponse({});
            if (data.todos != null) {
                message.todos = data.todos.map(item => todoObject.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                todos?: ReturnType<typeof todoObject.prototype.toObject>[];
            } = {};
            if (this.todos != null) {
                data.todos = this.todos.map((item: todoObject) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.todos !== undefined)
                writer.writeRepeatedMessage(1, this.todos, (item: todoObject) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): todoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new todoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, todoObject.deserialize(reader), todoObject));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): todoResponse {
            return todoResponse.deserialize(bytes);
        }
    }
    export class deleteResponse extends pb_1.Message {
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }) {
            const message = new deleteResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): deleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new deleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): deleteResponse {
            return deleteResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedtodoServiceService {
        static definition = {
            addTodo: {
                path: "/todo.todoService/addTodo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: addTodoParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => addTodoParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: todoObject) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => todoObject.deserialize(new Uint8Array(bytes))
            },
            deleteTodo: {
                path: "/todo.todoService/deleteTodo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: deleteTodoParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => deleteTodoParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: deleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => deleteResponse.deserialize(new Uint8Array(bytes))
            },
            getTodos: {
                path: "/todo.todoService/getTodos",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: getTodoParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => getTodoParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: todoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => todoResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract addTodo(call: grpc_1.ServerUnaryCall<addTodoParams, todoObject>, callback: grpc_1.requestCallback<todoObject>): void;
        abstract deleteTodo(call: grpc_1.ServerUnaryCall<deleteTodoParams, deleteResponse>, callback: grpc_1.requestCallback<deleteResponse>): void;
        abstract getTodos(call: grpc_1.ServerUnaryCall<getTodoParams, todoResponse>, callback: grpc_1.requestCallback<todoResponse>): void;
    }
    export class todoServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedtodoServiceService.definition, "todoService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
        addTodo: GrpcUnaryServiceInterface<addTodoParams, todoObject> = (message: addTodoParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<todoObject>, options?: grpc_1.CallOptions | grpc_1.requestCallback<todoObject>, callback?: grpc_1.requestCallback<todoObject>): grpc_1.ClientUnaryCall => {
            return super.addTodo(message, metadata, options, callback);
        };
        deleteTodo: GrpcUnaryServiceInterface<deleteTodoParams, deleteResponse> = (message: deleteTodoParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<deleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<deleteResponse>, callback?: grpc_1.requestCallback<deleteResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteTodo(message, metadata, options, callback);
        };
        getTodos: GrpcUnaryServiceInterface<getTodoParams, todoResponse> = (message: getTodoParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<todoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<todoResponse>, callback?: grpc_1.requestCallback<todoResponse>): grpc_1.ClientUnaryCall => {
            return super.getTodos(message, metadata, options, callback);
        };
    }
}
