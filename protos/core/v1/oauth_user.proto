syntax = "proto3";
package core.v1;

option go_package = "github.com/koblas/grpc-todo/protos";

message AuthUserServiceRemoveAssociationResponse {}

message AuthUserServiceGetAuthUrlRequest {
  string provider = 1;
  string redirect_url = 2;
  string state = 3;
}

message AuthUserServiceGetAuthUrlResponse { string url = 1; }

message AuthUserServiceRemoveAssociationRequest {
  string user_id = 1;
  string provider = 2;
}

message AuthUserServiceListAssociationsRequest {
  string user_id = 1;
  string provider = 2;
}

message AuthOauthParams {
  string provider = 1;
  string provider_id = 2;
  string code = 3;
}

message AuthEmailParams {
  string email = 1;
  string password = 2;
}

message AuthUserServiceListAssociationsResponse { repeated string provider = 1; }

message AuthUserServiceUpsertUserRequest {
  // If provide, then we're additing an association
  string user_id = 1;
  AuthOauthParams oauth = 2;
  AuthEmailParams email = 3;
  string redirect_url = 4;
  string state = 5;
}

message AuthUserServiceUpsertUserResponse {
  string user_id = 1;
  bool created = 2;
}

service AuthUserService {
  // Get an authentiction url
  rpc GetAuthUrl(AuthUserServiceGetAuthUrlRequest) returns (AuthUserServiceGetAuthUrlResponse);

  // List all associations for this user
  rpc ListAssociations(AuthUserServiceListAssociationsRequest)
      returns (AuthUserServiceListAssociationsResponse);
  // Remove this token from the system
  rpc RemoveAssociation(AuthUserServiceRemoveAssociationRequest) returns (AuthUserServiceRemoveAssociationResponse);
  // Assoicate or create the user as needed

  rpc UpsertUser(AuthUserServiceUpsertUserRequest) returns (AuthUserServiceUpsertUserResponse);

  // TO make 3rd party calls we need a bearer token...
  //   GetTokenSource(ctx context.Context, userGUID entity.UserGUID, provider
  //   string) (oauth2.TokenSource, error)
}
