syntax = "proto3";

package core;

option go_package = "./;core";

message Empty {}

message OauthUserGetUrlParams {
  string provider = 1;
  string redirect_url = 2;
  string state = 3;
}

message OauthUserGetUrlResult { string url = 1; }

message OauthUserGetParams {
  string user_id = 1;
  string provider = 2;
}

message OauthUserListAssoicationsResponse { repeated string provider = 1; }

message OauthUserUpsertParams {
  // If provide, then we're additing an association
  string user_id = 1;
  string provider = 2;
  string code = 3;
  string redirect_url = 4;
  string state = 5;
}

message OauthUserUpsertResult {
  string user_id = 1;
  bool created = 2;
}

service OauthUserService {
  // Get an authentiction url
  rpc GetAuthURL(OauthUserGetUrlParams) returns (OauthUserGetUrlResult);
  // List all associations for this user
  rpc ListAssociations(OauthUserGetParams)
      returns (OauthUserListAssoicationsResponse);
  // Remove this token from the system
  rpc RemoveAssociation(OauthUserGetParams) returns (Empty);
  // Assoicate or create the user as needed
  rpc UpsertUser(OauthUserUpsertParams) returns (OauthUserUpsertResult);

  // TO make 3rd party calls we need a bearer token...
  //   GetTokenSource(ctx context.Context, userGUID entity.UserGUID, provider
  //   string) (oauth2.TokenSource, error)
}