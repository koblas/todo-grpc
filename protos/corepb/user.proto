syntax = "proto3";

import "google/protobuf/timestamp.proto";

package corepb.user;

option go_package = "./;corepb";

enum UserStatus {
  REGISTERED = 0;
  INVITED = 1;
  ACTIVE = 100;
  DISABLED = 200;
}

enum UserSecurity {
  UNKNOWN = 0;
  USER_PASSWORD_CHANGE = 1;
  USER_FORGOT_REQUEST = 2;
  USER_REGISTER_TOKEN = 3;
  USER_INVITE_TOKEN = 4;
}

message User {
  string id = 1;
  string name = 2;
  string email = 3;
  UserStatus status = 4;
  google.protobuf.Timestamp updated_at = 5;
  google.protobuf.Timestamp created_at = 6;
  bool has_tfa = 7;
  bool email_is_verified = 8;
  optional string avatar_url = 9;
}

message SecureValue {
  // e.g.
  // "arn:aws:kms:us-east-1:111111111:key/abcdef00-0123-4567-7799-012345678990"
  string key_uri = 1;
  // opaque value that key encrypted
  string data_key = 2;
  // encrypted value
  string data_value = 3;
}

// Used for ForgotPassword / Registration events
message UserSecurityEvent {
  UserSecurity action = 1;
  User user = 2;
  // SECURE -- For password recovery and email confirmation
  SecureValue token = 3;
  // Used for invitations
  User sender = 4;
}

message UserChangeEvent {
  // Since some changes (e.g. password) cannot be seen in the serialized version
  User current = 1;
  User original = 2;
}

message UserSettingGroup { map<string, string> values = 1; }

message UserSettings {
  string user_id = 1;
  map<string, UserSettingGroup> settings = 2;
}

message UserSettingsChangeEvent {
  UserSettings current = 1;
  UserSettings orig = 2;
}

message UserSettingsUpdate {
  string user_id = 1;
  map<string, UserSettingGroup> settings = 2;
}

message AuthInfo {
  string provider = 1;
  string provider_id = 2;
}

message UserFindParam {
  // Find by email address
  string email = 1;
  // Find by GUID
  string user_id = 2;

  // OAuth authentication information
  AuthInfo auth = 3;
}

message AuthenticateParam {
  // User Identifier
  string email = 1;
  // Password
  string password = 2;
  // TFA
  string tfa_type = 3;
  string tfa_value = 4;
}

// Associate an OAuth Identifier with a user
message AuthAssociateParam {
  string user_id = 1;

  // OAuth authentication information
  AuthInfo auth = 2;
}

message UserCreateParam {
  string email = 1;
  string password = 2;
  string name = 3;
  UserStatus status = 4;
}

message UserUpdateParam {
  string user_id = 1;
  optional string email = 2;
  optional string password = 3;
  optional string password_new = 4;
  optional string name = 5;
  optional UserStatus status = 6;
  optional UserSettings settings = 7;
  optional string avatar_url = 8;
}

message VerificationParam {
  // The user identifier
  string user_id = 1;
  // Check to see if this token is present
  string token = 2;
  // If we're setting the password
  string password = 3;
}

message UserIdParam { string user_id = 1; }

service UserService {
  rpc FindBy(UserFindParam) returns (User) {}

  rpc Create(UserCreateParam) returns (User) {}
  rpc Update(UserUpdateParam) returns (User) {}

  rpc ComparePassword(AuthenticateParam) returns (UserIdParam) {}
  rpc AuthAssociate(AuthAssociateParam) returns (UserIdParam) {}

  rpc GetSettings(UserIdParam) returns (UserSettings) {}
  rpc SetSettings(UserSettingsUpdate) returns (UserSettings) {}

  // Email address verification
  rpc VerificationVerify(VerificationParam) returns (User) {}

  // Forgot password flow
  rpc ForgotSend(UserFindParam) returns (User) {}
  rpc ForgotVerify(VerificationParam) returns (User) {}
  rpc ForgotUpdate(VerificationParam) returns (User) {}
}
